class ServiceDispatcher
!!!1656066.java!!!	ServiceDispatcher(inout conn : ServiceConnection, inout context : Context, inout activityThread : Handler, in flags : int)
            mIServiceConnection = new InnerConnection(this);
            mConnection = conn;
            mContext = context;
            mActivityThread = activityThread;
            mLocation = new ServiceConnectionLeaked(null);
            mLocation.fillInStackTrace();
            mFlags = flags;
!!!1656194.java!!!	validate(inout context : Context, inout activityThread : Handler) : void
            if (mContext != context) {
                throw new RuntimeException(
                    "ServiceConnection " + mConnection +
                    " registered with differing Context (was " +
                    mContext + " now " + context + ")");
            }
            if (mActivityThread != activityThread) {
                throw new RuntimeException(
                    "ServiceConnection " + mConnection +
                    " registered with differing handler (was " +
                    mActivityThread + " now " + activityThread + ")");
            }
!!!1656322.java!!!	doForget() : void
            synchronized(this) {
                for (int i=0; i<mActiveConnections.size(); i++) {
                    ServiceDispatcher.ConnectionInfo ci = mActiveConnections.valueAt(i);
                    ci.binder.unlinkToDeath(ci.deathMonitor, 0);
                }
                mActiveConnections.clear();
                mForgotten = true;
            }
!!!1656450.java!!!	getLocation() : ServiceConnectionLeaked
            return mLocation;
!!!1656578.java!!!	getServiceConnection() : ServiceConnection
            return mConnection;
!!!1656706.java!!!	getIServiceConnection() : IServiceConnection
            return mIServiceConnection;
!!!1656834.java!!!	getFlags() : int
            return mFlags;
!!!1656962.java!!!	setUnbindLocation(inout ex : RuntimeException) : void
            mUnbindLocation = ex;
!!!1657090.java!!!	getUnbindLocation() : RuntimeException
            return mUnbindLocation;
!!!1657218.java!!!	connected(inout name : ComponentName, inout service : IBinder) : void
            if (mActivityThread != null) {
                mActivityThread.post(new RunConnection(name, service, 0));
            } else {
                doConnected(name, service);
            }
!!!1657346.java!!!	death(inout name : ComponentName, inout service : IBinder) : void
            ServiceDispatcher.ConnectionInfo old;

            synchronized (this) {
                mDied = true;
                old = mActiveConnections.remove(name);
                if (old == null || old.binder != service) {
                    // Death for someone different than who we last
                    // reported...  just ignore it.
                    return;
                }
                old.binder.unlinkToDeath(old.deathMonitor, 0);
            }

            if (mActivityThread != null) {
                mActivityThread.post(new RunConnection(name, service, 1));
            } else {
                doDeath(name, service);
            }
!!!1657474.java!!!	doConnected(inout name : ComponentName, inout service : IBinder) : void
            ServiceDispatcher.ConnectionInfo old;
            ServiceDispatcher.ConnectionInfo info;

            synchronized (this) {
                if (mForgotten) {
                    // We unbound before receiving the connection; ignore
                    // any connection received.
                    return;
                }
                old = mActiveConnections.get(name);
                if (old != null && old.binder == service) {
                    // Huh, already have this one.  Oh well!
                    return;
                }

                if (service != null) {
                    // A new service is being connected... set it all up.
                    mDied = false;
                    info = new ConnectionInfo();
                    info.binder = service;
                    info.deathMonitor = new DeathMonitor(name, service);
                    try {
                        service.linkToDeath(info.deathMonitor, 0);
                        mActiveConnections.put(name, info);
                    } catch (RemoteException e) {
                        // This service was dead before we got it...  just
                        // don't do anything with it.
                        mActiveConnections.remove(name);
                        return;
                    }

                } else {
                    // The named service is being disconnected... clean up.
                    mActiveConnections.remove(name);
                }

                if (old != null) {
                    old.binder.unlinkToDeath(old.deathMonitor, 0);
                }
            }

            // If there was an old service, it is not disconnected.
            if (old != null) {
                mConnection.onServiceDisconnected(name);
            }
            // If there is a new service, it is now connected.
            if (service != null) {
                mConnection.onServiceConnected(name, service);
            }
!!!1657602.java!!!	doDeath(inout name : ComponentName, inout service : IBinder) : void
            mConnection.onServiceDisconnected(name);
