class RecentApplicationsBackground
!!!524802.java!!!	RecentApplicationsBackground(inout context : Context)
        this(context, null);
        init();
!!!524930.java!!!	RecentApplicationsBackground(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        init();
!!!525058.java!!!	init() : void
        mBackground = getBackground();
        setBackgroundDrawable(null);
        setPadding(0, 0, 0, 0);
        setGravity(Gravity.CENTER);
!!!525186.java!!!	setFrame(in left : int, in top : int, in right : int, in bottom : int) : boolean
        setWillNotDraw(false);
        if (mLeft != left || mRight != right || mTop != top || mBottom != bottom) {
            mBackgroundSizeChanged = true;
        }
        return super.setFrame(left, top, right, bottom);
!!!525314.java!!!	verifyDrawable(inout who : Drawable) : boolean
        return who == mBackground || super.verifyDrawable(who);
!!!525442.java!!!	jumpDrawablesToCurrentState() : void
        super.jumpDrawablesToCurrentState();
        if (mBackground != null) mBackground.jumpToCurrentState();
!!!525570.java!!!	drawableStateChanged() : void
        Drawable d = mBackground;
        if (d != null && d.isStateful()) {
            d.setState(getDrawableState());
        }
        super.drawableStateChanged();
!!!525698.java!!!	draw(inout canvas : Canvas) : void
        final Drawable background = mBackground;
        if (background != null) {
            if (mBackgroundSizeChanged) {
                mBackgroundSizeChanged = false;
                Rect chld = mTmp0;
                Rect bkg = mTmp1;
                mBackground.getPadding(bkg);
                getChildBounds(chld);
                // This doesn't clamp to this view's bounds, which is what we want,
                // so that the drawing is clipped.
                final int top = chld.top - bkg.top;
                final int bottom = chld.bottom + bkg.bottom;
                // The background here is a gradient that wants to
                // extend the full width of the screen (whatever that
                // may be).
                int left, right;
                if (false) {
                    // This limits the width of the drawable.
                    left = chld.left - bkg.left;
                    right = chld.right + bkg.right;
                } else {
                    // This expands it to full width.
                    left = 0;
                    right = getRight();
                }
                background.setBounds(left, top, right, bottom);
            }
        }
        mBackground.draw(canvas);

        if (false) {
            android.graphics.Paint p = new android.graphics.Paint();
            p.setColor(0x88ffff00);
            canvas.drawRect(background.getBounds(), p);
        }
        canvas.drawARGB((int)(0.75*0xff), 0, 0, 0);

        super.draw(canvas);
!!!525826.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        mBackground.setCallback(this);
        setWillNotDraw(false);
!!!525954.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        mBackground.setCallback(null);
!!!526082.java!!!	getChildBounds(inout r : Rect) : void
        r.left = r.top = Integer.MAX_VALUE;
        r.bottom = r.right = Integer.MIN_VALUE;
        final int N = getChildCount();
        for (int i=0; i<N; i++) {
            View v = getChildAt(i);
            if (v.getVisibility() == View.VISIBLE) {
                r.left = Math.min(r.left, v.getLeft());
                r.top = Math.min(r.top, v.getTop());
                r.right = Math.max(r.right, v.getRight());
                r.bottom = Math.max(r.bottom, v.getBottom());
            }
        }
