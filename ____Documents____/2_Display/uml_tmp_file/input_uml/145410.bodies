class VibratorInputMapper
!!!239746.cpp!!!	getSources() : uint32_t
    return 0;
!!!239874.cpp!!!	populateDeviceInfo(inout info : InputDeviceInfo) : void
    InputMapper::populateDeviceInfo(info);

    info->setVibrator(true);
!!!240002.cpp!!!	process(in rawEvent : RawEvent) : void
    // TODO: Handle FF_STATUS, although it does not seem to be widely supported.
!!!240130.cpp!!!	vibrate(in pattern : nsecs_t, in patternSize : size_t, in repeat : ssize_t, in token : int32_t) : void
#if DEBUG_VIBRATOR
    String8 patternStr;
    for (size_t i = 0; i < patternSize; i++) {
        if (i != 0) {
            patternStr.append(", ");
        }
        patternStr.appendFormat("%lld", pattern[i]);
    }
    ALOGD("vibrate: deviceId=%d, pattern=[%s], repeat=%ld, token=%d",
            getDeviceId(), patternStr.string(), repeat, token);
#endif

    mVibrating = true;
    memcpy(mPattern, pattern, patternSize * sizeof(nsecs_t));
    mPatternSize = patternSize;
    mRepeat = repeat;
    mToken = token;
    mIndex = -1;

    nextStep();
!!!240258.cpp!!!	cancelVibrate(in token : int32_t) : void
#if DEBUG_VIBRATOR
    ALOGD("cancelVibrate: deviceId=%d, token=%d", getDeviceId(), token);
#endif

    if (mVibrating && mToken == token) {
        stopVibrating();
    }
!!!240386.cpp!!!	timeoutExpired(in when : nsecs_t) : void
    if (mVibrating) {
        if (when >= mNextStepTime) {
            nextStep();
        } else {
            getContext()->requestTimeoutAtTime(mNextStepTime);
        }
    }
!!!240514.cpp!!!	dump(inout dump : String8) : void
    dump.append(INDENT2 "Vibrator Input Mapper:\n");
    dump.appendFormat(INDENT3 "Vibrating: %s\n", toString(mVibrating));
!!!240642.cpp!!!	nextStep() : void
    mIndex += 1;
    if (size_t(mIndex) >= mPatternSize) {
        if (mRepeat < 0) {
            // We are done.
            stopVibrating();
            return;
        }
        mIndex = mRepeat;
    }

    bool vibratorOn = mIndex & 1;
    nsecs_t duration = mPattern[mIndex];
    if (vibratorOn) {
#if DEBUG_VIBRATOR
        ALOGD("nextStep: sending vibrate deviceId=%d, duration=%lld",
                getDeviceId(), duration);
#endif
        getEventHub()->vibrate(getDeviceId(), duration);
    } else {
#if DEBUG_VIBRATOR
        ALOGD("nextStep: sending cancel vibrate deviceId=%d", getDeviceId());
#endif
        getEventHub()->cancelVibrate(getDeviceId());
    }
    nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC);
    mNextStepTime = now + duration;
    getContext()->requestTimeoutAtTime(mNextStepTime);
#if DEBUG_VIBRATOR
    ALOGD("nextStep: scheduled timeout in %0.3fms", duration * 0.000001f);
#endif
!!!240770.cpp!!!	stopVibrating() : void
    mVibrating = false;
#if DEBUG_VIBRATOR
    ALOGD("stopVibrating: sending cancel vibrate deviceId=%d", getDeviceId());
#endif
    getEventHub()->cancelVibrate(getDeviceId());
