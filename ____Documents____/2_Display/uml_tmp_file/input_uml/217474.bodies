class Animation
!!!1106050.java!!!	Animation()
        ensureInterpolator();
!!!1106178.java!!!	Animation(inout context : Context, inout attrs : AttributeSet)
        TypedArray a = context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.Animation);

        setDuration((long) a.getInt(com.android.internal.R.styleable.Animation_duration, 0));
        setStartOffset((long) a.getInt(com.android.internal.R.styleable.Animation_startOffset, 0));
        
        setFillEnabled(a.getBoolean(com.android.internal.R.styleable.Animation_fillEnabled, mFillEnabled));
        setFillBefore(a.getBoolean(com.android.internal.R.styleable.Animation_fillBefore, mFillBefore));
        setFillAfter(a.getBoolean(com.android.internal.R.styleable.Animation_fillAfter, mFillAfter));

        setRepeatCount(a.getInt(com.android.internal.R.styleable.Animation_repeatCount, mRepeatCount));
        setRepeatMode(a.getInt(com.android.internal.R.styleable.Animation_repeatMode, RESTART));

        setZAdjustment(a.getInt(com.android.internal.R.styleable.Animation_zAdjustment, ZORDER_NORMAL));
        
        setBackgroundColor(a.getInt(com.android.internal.R.styleable.Animation_background, 0));

        setDetachWallpaper(a.getBoolean(com.android.internal.R.styleable.Animation_detachWallpaper, false));

        final int resID = a.getResourceId(com.android.internal.R.styleable.Animation_interpolator, 0);

        a.recycle();

        if (resID > 0) {
            setInterpolator(context, resID);
        }

        ensureInterpolator();
!!!1106306.java!!!	clone() : Animation
        final Animation animation = (Animation) super.clone();
        animation.mPreviousRegion = new RectF();
        animation.mRegion = new RectF();
        animation.mTransformation = new Transformation();
        animation.mPreviousTransformation = new Transformation();
        return animation;
!!!1106434.java!!!	reset() : void
        mPreviousRegion.setEmpty();
        mPreviousTransformation.clear();
        mInitialized = false;
        mCycleFlip = false;
        mRepeated = 0;
        mMore = true;
        mOneMoreTime = true;
        mListenerHandler = null;
!!!1106562.java!!!	cancel() : void
        if (mStarted && !mEnded) {
            fireAnimationEnd();
            mEnded = true;
            guard.close();
        }
        // Make sure we move the animation to the end
        mStartTime = Long.MIN_VALUE;
        mMore = mOneMoreTime = false;
!!!1106690.java!!!	detach() : void
        if (mStarted && !mEnded) {
            mEnded = true;
            guard.close();
            fireAnimationEnd();
        }
!!!1106818.java!!!	isInitialized() : boolean
        return mInitialized;
!!!1106946.java!!!	initialize(in width : int, in height : int, in parentWidth : int, in parentHeight : int) : void
        reset();
        mInitialized = true;
!!!1107074.java!!!	setListenerHandler(inout handler : Handler) : void
        if (mListenerHandler == null) {
            mOnStart = new Runnable() {
                public void run() {
                    if (mListener != null) {
                        mListener.onAnimationStart(Animation.this);
                    }
                }
            };
            mOnRepeat = new Runnable() {
                public void run() {
                    if (mListener != null) {
                        mListener.onAnimationRepeat(Animation.this);
                    }
                }
            };
            mOnEnd = new Runnable() {
                public void run() {
                    if (mListener != null) {
                        mListener.onAnimationEnd(Animation.this);
                    }
                }
            };
        }
        mListenerHandler = handler;
!!!1107202.java!!!	setInterpolator(inout context : Context, in resID : int) : void
        setInterpolator(AnimationUtils.loadInterpolator(context, resID));
!!!1107330.java!!!	setInterpolator(inout i : Interpolator) : void
        mInterpolator = i;
!!!1107458.java!!!	setStartOffset(in startOffset : long) : void
        mStartOffset = startOffset;
!!!1107586.java!!!	setDuration(in durationMillis : long) : void
        if (durationMillis < 0) {
            throw new IllegalArgumentException("Animation duration cannot be negative");
        }
        mDuration = durationMillis;
!!!1107714.java!!!	restrictDuration(in durationMillis : long) : void
        // If we start after the duration, then we just won't run.
        if (mStartOffset > durationMillis) {
            mStartOffset = durationMillis;
            mDuration = 0;
            mRepeatCount = 0;
            return;
        }
        
        long dur = mDuration + mStartOffset;
        if (dur > durationMillis) {
            mDuration = durationMillis-mStartOffset;
            dur = durationMillis;
        }
        // If the duration is 0 or less, then we won't run.
        if (mDuration <= 0) {
            mDuration = 0;
            mRepeatCount = 0;
            return;
        }
        // Reduce the number of repeats to keep below the maximum duration.
        // The comparison between mRepeatCount and duration is to catch
        // overflows after multiplying them.
        if (mRepeatCount < 0 || mRepeatCount > durationMillis
                || (dur*mRepeatCount) > durationMillis) {
            // Figure out how many times to do the animation.  Subtract 1 since
            // repeat count is the number of times to repeat so 0 runs once.
            mRepeatCount = (int)(durationMillis/dur) - 1;
            if (mRepeatCount < 0) {
                mRepeatCount = 0;
            }
        }
!!!1107842.java!!!	scaleCurrentDuration(in scale : float) : void
        mDuration = (long) (mDuration * scale);
        mStartOffset = (long) (mStartOffset * scale);
!!!1107970.java!!!	setStartTime(in startTimeMillis : long) : void
        mStartTime = startTimeMillis;
        mStarted = mEnded = false;
        mCycleFlip = false;
        mRepeated = 0;
        mMore = true;
!!!1108098.java!!!	start() : void
        setStartTime(-1);
!!!1108226.java!!!	startNow() : void
        setStartTime(AnimationUtils.currentAnimationTimeMillis());
!!!1108354.java!!!	setRepeatMode(in repeatMode : int) : void
        mRepeatMode = repeatMode;
!!!1108482.java!!!	setRepeatCount(in repeatCount : int) : void
        if (repeatCount < 0) {
            repeatCount = INFINITE;
        }
        mRepeatCount = repeatCount;
!!!1108610.java!!!	isFillEnabled() : boolean
        return mFillEnabled;
!!!1108738.java!!!	setFillEnabled(inout fillEnabled : boolean) : void
        mFillEnabled = fillEnabled;
!!!1108866.java!!!	setFillBefore(inout fillBefore : boolean) : void
        mFillBefore = fillBefore;
!!!1108994.java!!!	setFillAfter(inout fillAfter : boolean) : void
        mFillAfter = fillAfter;
!!!1109122.java!!!	setZAdjustment(in zAdjustment : int) : void
        mZAdjustment = zAdjustment;
!!!1109250.java!!!	setBackgroundColor(in bg : int) : void
        mBackgroundColor = bg;
!!!1109378.java!!!	getScaleFactor() : float
        return mScaleFactor;
!!!1109506.java!!!	setDetachWallpaper(inout detachWallpaper : boolean) : void
        mDetachWallpaper = detachWallpaper;
!!!1109634.java!!!	getInterpolator() : Interpolator
        return mInterpolator;
!!!1109762.java!!!	getStartTime() : long
        return mStartTime;
!!!1109890.java!!!	getDuration() : long
        return mDuration;
!!!1110018.java!!!	getStartOffset() : long
        return mStartOffset;
!!!1110146.java!!!	getRepeatMode() : int
        return mRepeatMode;
!!!1110274.java!!!	getRepeatCount() : int
        return mRepeatCount;
!!!1110402.java!!!	getFillBefore() : boolean
        return mFillBefore;
!!!1110530.java!!!	getFillAfter() : boolean
        return mFillAfter;
!!!1110658.java!!!	getZAdjustment() : int
        return mZAdjustment;
!!!1110786.java!!!	getBackgroundColor() : int
        return mBackgroundColor;
!!!1110914.java!!!	getDetachWallpaper() : boolean
        return mDetachWallpaper;
!!!1111042.java!!!	willChangeTransformationMatrix() : boolean
        // assume we will change the matrix
        return true;
!!!1111170.java!!!	willChangeBounds() : boolean
        // assume we will change the bounds
        return true;
!!!1111298.java!!!	setAnimationListener(inout listener : Animation::AnimationListener) : void
        mListener = listener;
!!!1111426.java!!!	ensureInterpolator() : void
        if (mInterpolator == null) {
            mInterpolator = new AccelerateDecelerateInterpolator();
        }
!!!1111554.java!!!	computeDurationHint() : long
        return (getStartOffset() + getDuration()) * (getRepeatCount() + 1);
!!!1111682.java!!!	getTransformation(in currentTime : long, inout outTransformation : Transformation) : boolean
        if (mStartTime == -1) {
            mStartTime = currentTime;
        }

        final long startOffset = getStartOffset();
        final long duration = mDuration;
        float normalizedTime;
        if (duration != 0) {
            normalizedTime = ((float) (currentTime - (mStartTime + startOffset))) /
                    (float) duration;
        } else {
            // time is a step-change with a zero duration
            normalizedTime = currentTime < mStartTime ? 0.0f : 1.0f;
        }

        final boolean expired = normalizedTime >= 1.0f;
        mMore = !expired;

        if (!mFillEnabled) normalizedTime = Math.max(Math.min(normalizedTime, 1.0f), 0.0f);

        if ((normalizedTime >= 0.0f || mFillBefore) && (normalizedTime <= 1.0f || mFillAfter)) {
            if (!mStarted) {
                fireAnimationStart();
                mStarted = true;
                if (USE_CLOSEGUARD) {
                    guard.open("cancel or detach or getTransformation");
                }
            }

            if (mFillEnabled) normalizedTime = Math.max(Math.min(normalizedTime, 1.0f), 0.0f);

            if (mCycleFlip) {
                normalizedTime = 1.0f - normalizedTime;
            }

            final float interpolatedTime = mInterpolator.getInterpolation(normalizedTime);
            applyTransformation(interpolatedTime, outTransformation);
        }

        if (expired) {
            if (mRepeatCount == mRepeated) {
                if (!mEnded) {
                    mEnded = true;
                    guard.close();
                    fireAnimationEnd();
                }
            } else {
                if (mRepeatCount > 0) {
                    mRepeated++;
                }

                if (mRepeatMode == REVERSE) {
                    mCycleFlip = !mCycleFlip;
                }

                mStartTime = -1;
                mMore = true;

                fireAnimationRepeat();
            }
        }

        if (!mMore && mOneMoreTime) {
            mOneMoreTime = false;
            return true;
        }

        return mMore;
!!!1111810.java!!!	fireAnimationStart() : void
        if (mListener != null) {
            if (mListenerHandler == null) mListener.onAnimationStart(this);
            else mListenerHandler.postAtFrontOfQueue(mOnStart);
        }
!!!1111938.java!!!	fireAnimationRepeat() : void
        if (mListener != null) {
            if (mListenerHandler == null) mListener.onAnimationRepeat(this);
            else mListenerHandler.postAtFrontOfQueue(mOnRepeat);
        }
!!!1112066.java!!!	fireAnimationEnd() : void
        if (mListener != null) {
            if (mListenerHandler == null) mListener.onAnimationEnd(this);
            else mListenerHandler.postAtFrontOfQueue(mOnEnd);
        }
!!!1112194.java!!!	getTransformation(in currentTime : long, inout outTransformation : Transformation, in scale : float) : boolean
        mScaleFactor = scale;
        return getTransformation(currentTime, outTransformation);
!!!1112322.java!!!	hasStarted() : boolean
        return mStarted;
!!!1112450.java!!!	hasEnded() : boolean
        return mEnded;
!!!1112706.java!!!	resolveSize(in type : int, in value : float, in size : int, in parentSize : int) : float
        switch (type) {
            case ABSOLUTE:
                return value;
            case RELATIVE_TO_SELF:
                return size * value;
            case RELATIVE_TO_PARENT:
                return parentSize * value;
            default:
                return value;
        }
!!!1112834.java!!!	getInvalidateRegion(in left : int, in top : int, in right : int, in bottom : int, inout invalidate : RectF, inout transformation : Transformation) : void

        final RectF tempRegion = mRegion;
        final RectF previousRegion = mPreviousRegion;

        invalidate.set(left, top, right, bottom);
        transformation.getMatrix().mapRect(invalidate);
        // Enlarge the invalidate region to account for rounding errors
        invalidate.inset(-1.0f, -1.0f);
        tempRegion.set(invalidate);
        invalidate.union(previousRegion);

        previousRegion.set(tempRegion);

        final Transformation tempTransformation = mTransformation;
        final Transformation previousTransformation = mPreviousTransformation;

        tempTransformation.set(transformation);
        transformation.set(previousTransformation);
        previousTransformation.set(tempTransformation);
!!!1112962.java!!!	initializeInvalidateRegion(in left : int, in top : int, in right : int, in bottom : int) : void
        final RectF region = mPreviousRegion;
        region.set(left, top, right, bottom);
        // Enlarge the invalidate region to account for rounding errors
        region.inset(-1.0f, -1.0f);
        if (mFillBefore) {
            final Transformation previousTransformation = mPreviousTransformation;
            applyTransformation(mInterpolator.getInterpolation(0.0f), previousTransformation);
        }
!!!1113090.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
        } finally {
            super.finalize();
        }
!!!1113218.java!!!	hasAlpha() : boolean
        return false;
