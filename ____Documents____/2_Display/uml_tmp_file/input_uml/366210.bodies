class LegacyCalendarViewDelegate
!!!2138498.java!!!	LegacyCalendarViewDelegate(inout delegator : CalendarView, inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
            super(delegator, context);

            // initialization based on locale
            setCurrentLocale(Locale.getDefault());

            TypedArray attributesArray = context.obtainStyledAttributes(attrs,
                    R.styleable.CalendarView, defStyleAttr, defStyleRes);
            mShowWeekNumber = attributesArray.getBoolean(R.styleable.CalendarView_showWeekNumber,
                    DEFAULT_SHOW_WEEK_NUMBER);
            mFirstDayOfWeek = attributesArray.getInt(R.styleable.CalendarView_firstDayOfWeek,
                    LocaleData.get(Locale.getDefault()).firstDayOfWeek);
            String minDate = attributesArray.getString(R.styleable.CalendarView_minDate);
            if (TextUtils.isEmpty(minDate) || !parseDate(minDate, mMinDate)) {
                parseDate(DEFAULT_MIN_DATE, mMinDate);
            }
            String maxDate = attributesArray.getString(R.styleable.CalendarView_maxDate);
            if (TextUtils.isEmpty(maxDate) || !parseDate(maxDate, mMaxDate)) {
                parseDate(DEFAULT_MAX_DATE, mMaxDate);
            }
            if (mMaxDate.before(mMinDate)) {
                throw new IllegalArgumentException("Max date cannot be before min date.");
            }
            mShownWeekCount = attributesArray.getInt(R.styleable.CalendarView_shownWeekCount,
                    DEFAULT_SHOWN_WEEK_COUNT);
            mSelectedWeekBackgroundColor = attributesArray.getColor(
                    R.styleable.CalendarView_selectedWeekBackgroundColor, 0);
            mFocusedMonthDateColor = attributesArray.getColor(
                    R.styleable.CalendarView_focusedMonthDateColor, 0);
            mUnfocusedMonthDateColor = attributesArray.getColor(
                    R.styleable.CalendarView_unfocusedMonthDateColor, 0);
            mWeekSeparatorLineColor = attributesArray.getColor(
                    R.styleable.CalendarView_weekSeparatorLineColor, 0);
            mWeekNumberColor = attributesArray.getColor(R.styleable.CalendarView_weekNumberColor, 0);
            mSelectedDateVerticalBar = attributesArray.getDrawable(
                    R.styleable.CalendarView_selectedDateVerticalBar);

            mDateTextAppearanceResId = attributesArray.getResourceId(
                    R.styleable.CalendarView_dateTextAppearance, R.style.TextAppearance_Small);
            updateDateTextSize();

            mWeekDayTextAppearanceResId = attributesArray.getResourceId(
                    R.styleable.CalendarView_weekDayTextAppearance,
                    DEFAULT_WEEK_DAY_TEXT_APPEARANCE_RES_ID);
            attributesArray.recycle();

            DisplayMetrics displayMetrics = mDelegator.getResources().getDisplayMetrics();
            mWeekMinVisibleHeight = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                    UNSCALED_WEEK_MIN_VISIBLE_HEIGHT, displayMetrics);
            mListScrollTopOffset = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                    UNSCALED_LIST_SCROLL_TOP_OFFSET, displayMetrics);
            mBottomBuffer = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                    UNSCALED_BOTTOM_BUFFER, displayMetrics);
            mSelectedDateVerticalBarWidth = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                    UNSCALED_SELECTED_DATE_VERTICAL_BAR_WIDTH, displayMetrics);
            mWeekSeperatorLineWidth = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                    UNSCALED_WEEK_SEPARATOR_LINE_WIDTH, displayMetrics);

            LayoutInflater layoutInflater = (LayoutInflater) mContext
                    .getSystemService(Service.LAYOUT_INFLATER_SERVICE);
            View content = layoutInflater.inflate(R.layout.calendar_view, null, false);
            mDelegator.addView(content);

            mListView = (ListView) mDelegator.findViewById(R.id.list);
            mDayNamesHeader = (ViewGroup) content.findViewById(com.android.internal.R.id.day_names);
            mMonthName = (TextView) content.findViewById(com.android.internal.R.id.month_name);

            setUpHeader();
            setUpListView();
            setUpAdapter();

            // go to today or whichever is close to today min or max date
            mTempDate.setTimeInMillis(System.currentTimeMillis());
            if (mTempDate.before(mMinDate)) {
                goTo(mMinDate, false, true, true);
            } else if (mMaxDate.before(mTempDate)) {
                goTo(mMaxDate, false, true, true);
            } else {
                goTo(mTempDate, false, true, true);
            }

            mDelegator.invalidate();
!!!2138626.java!!!	setShownWeekCount(in count : int) : void
            if (mShownWeekCount != count) {
                mShownWeekCount = count;
                mDelegator.invalidate();
            }
!!!2138754.java!!!	getShownWeekCount() : int
            return mShownWeekCount;
!!!2138882.java!!!	setSelectedWeekBackgroundColor(in color : int) : void
            if (mSelectedWeekBackgroundColor != color) {
                mSelectedWeekBackgroundColor = color;
                final int childCount = mListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    WeekView weekView = (WeekView) mListView.getChildAt(i);
                    if (weekView.mHasSelectedDay) {
                        weekView.invalidate();
                    }
                }
            }
!!!2139010.java!!!	getSelectedWeekBackgroundColor() : int
            return mSelectedWeekBackgroundColor;
!!!2139138.java!!!	setFocusedMonthDateColor(in color : int) : void
            if (mFocusedMonthDateColor != color) {
                mFocusedMonthDateColor = color;
                final int childCount = mListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    WeekView weekView = (WeekView) mListView.getChildAt(i);
                    if (weekView.mHasFocusedDay) {
                        weekView.invalidate();
                    }
                }
            }
!!!2139266.java!!!	getFocusedMonthDateColor() : int
            return mFocusedMonthDateColor;
!!!2139394.java!!!	setUnfocusedMonthDateColor(in color : int) : void
            if (mUnfocusedMonthDateColor != color) {
                mUnfocusedMonthDateColor = color;
                final int childCount = mListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    WeekView weekView = (WeekView) mListView.getChildAt(i);
                    if (weekView.mHasUnfocusedDay) {
                        weekView.invalidate();
                    }
                }
            }
!!!2139522.java!!!	getUnfocusedMonthDateColor() : int
            return mFocusedMonthDateColor;
!!!2139650.java!!!	setWeekNumberColor(in color : int) : void
            if (mWeekNumberColor != color) {
                mWeekNumberColor = color;
                if (mShowWeekNumber) {
                    invalidateAllWeekViews();
                }
            }
!!!2139778.java!!!	getWeekNumberColor() : int
            return mWeekNumberColor;
!!!2139906.java!!!	setWeekSeparatorLineColor(in color : int) : void
            if (mWeekSeparatorLineColor != color) {
                mWeekSeparatorLineColor = color;
                invalidateAllWeekViews();
            }
!!!2140034.java!!!	getWeekSeparatorLineColor() : int
            return mWeekSeparatorLineColor;
!!!2140162.java!!!	setSelectedDateVerticalBar(in resourceId : int) : void
            Drawable drawable = mDelegator.getContext().getDrawable(resourceId);
            setSelectedDateVerticalBar(drawable);
!!!2140290.java!!!	setSelectedDateVerticalBar(inout drawable : Drawable) : void
            if (mSelectedDateVerticalBar != drawable) {
                mSelectedDateVerticalBar = drawable;
                final int childCount = mListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    WeekView weekView = (WeekView) mListView.getChildAt(i);
                    if (weekView.mHasSelectedDay) {
                        weekView.invalidate();
                    }
                }
            }
!!!2140418.java!!!	getSelectedDateVerticalBar() : Drawable
            return mSelectedDateVerticalBar;
!!!2140546.java!!!	setWeekDayTextAppearance(in resourceId : int) : void
            if (mWeekDayTextAppearanceResId != resourceId) {
                mWeekDayTextAppearanceResId = resourceId;
                setUpHeader();
            }
!!!2140674.java!!!	getWeekDayTextAppearance() : int
            return mWeekDayTextAppearanceResId;
!!!2140802.java!!!	setDateTextAppearance(in resourceId : int) : void
            if (mDateTextAppearanceResId != resourceId) {
                mDateTextAppearanceResId = resourceId;
                updateDateTextSize();
                invalidateAllWeekViews();
            }
!!!2140930.java!!!	getDateTextAppearance() : int
            return mDateTextAppearanceResId;
!!!2141058.java!!!	setEnabled(inout enabled : boolean) : void
            mListView.setEnabled(enabled);
!!!2141186.java!!!	isEnabled() : boolean
            return mListView.isEnabled();
!!!2141314.java!!!	setMinDate(in minDate : long) : void
            mTempDate.setTimeInMillis(minDate);
            if (isSameDate(mTempDate, mMinDate)) {
                return;
            }
            mMinDate.setTimeInMillis(minDate);
            // make sure the current date is not earlier than
            // the new min date since the latter is used for
            // calculating the indices in the adapter thus
            // avoiding out of bounds error
            Calendar date = mAdapter.mSelectedDate;
            if (date.before(mMinDate)) {
                mAdapter.setSelectedDay(mMinDate);
            }
            // reinitialize the adapter since its range depends on min date
            mAdapter.init();
            if (date.before(mMinDate)) {
                setDate(mTempDate.getTimeInMillis());
            } else {
                // we go to the current date to force the ListView to query its
                // adapter for the shown views since we have changed the adapter
                // range and the base from which the later calculates item indices
                // note that calling setDate will not work since the date is the same
                goTo(date, false, true, false);
            }
!!!2141442.java!!!	getMinDate() : long
            return mMinDate.getTimeInMillis();
!!!2141570.java!!!	setMaxDate(in maxDate : long) : void
            mTempDate.setTimeInMillis(maxDate);
            if (isSameDate(mTempDate, mMaxDate)) {
                return;
            }
            mMaxDate.setTimeInMillis(maxDate);
            // reinitialize the adapter since its range depends on max date
            mAdapter.init();
            Calendar date = mAdapter.mSelectedDate;
            if (date.after(mMaxDate)) {
                setDate(mMaxDate.getTimeInMillis());
            } else {
                // we go to the current date to force the ListView to query its
                // adapter for the shown views since we have changed the adapter
                // range and the base from which the later calculates item indices
                // note that calling setDate will not work since the date is the same
                goTo(date, false, true, false);
            }
!!!2141698.java!!!	getMaxDate() : long
            return mMaxDate.getTimeInMillis();
!!!2141826.java!!!	setShowWeekNumber(inout showWeekNumber : boolean) : void
            if (mShowWeekNumber == showWeekNumber) {
                return;
            }
            mShowWeekNumber = showWeekNumber;
            mAdapter.notifyDataSetChanged();
            setUpHeader();
!!!2141954.java!!!	getShowWeekNumber() : boolean
            return mShowWeekNumber;
!!!2142082.java!!!	setFirstDayOfWeek(in firstDayOfWeek : int) : void
            if (mFirstDayOfWeek == firstDayOfWeek) {
                return;
            }
            mFirstDayOfWeek = firstDayOfWeek;
            mAdapter.init();
            mAdapter.notifyDataSetChanged();
            setUpHeader();
!!!2142210.java!!!	getFirstDayOfWeek() : int
            return mFirstDayOfWeek;
!!!2142338.java!!!	setDate(in date : long) : void
            setDate(date, false, false);
!!!2142466.java!!!	setDate(in date : long, inout animate : boolean, inout center : boolean) : void
            mTempDate.setTimeInMillis(date);
            if (isSameDate(mTempDate, mAdapter.mSelectedDate)) {
                return;
            }
            goTo(mTempDate, animate, true, center);
!!!2142594.java!!!	getDate() : long
            return mAdapter.mSelectedDate.getTimeInMillis();
!!!2142722.java!!!	setOnDateChangeListener(inout listener : CalendarView::OnDateChangeListener) : void
            mOnDateChangeListener = listener;
!!!2142850.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
            setCurrentLocale(newConfig.locale);
!!!2142978.java!!!	onInitializeAccessibilityEvent(inout event : AccessibilityEvent) : void
            event.setClassName(CalendarView.class.getName());
!!!2143106.java!!!	onInitializeAccessibilityNodeInfo(inout info : AccessibilityNodeInfo) : void
            info.setClassName(CalendarView.class.getName());
!!!2143234.java!!!	setCurrentLocale(inout locale : Locale) : void
            super.setCurrentLocale(locale);

            mTempDate = getCalendarForLocale(mTempDate, locale);
            mFirstDayOfMonth = getCalendarForLocale(mFirstDayOfMonth, locale);
            mMinDate = getCalendarForLocale(mMinDate, locale);
            mMaxDate = getCalendarForLocale(mMaxDate, locale);
!!!2143362.java!!!	updateDateTextSize() : void
            TypedArray dateTextAppearance = mDelegator.getContext().obtainStyledAttributes(
                    mDateTextAppearanceResId, R.styleable.TextAppearance);
            mDateTextSize = dateTextAppearance.getDimensionPixelSize(
                    R.styleable.TextAppearance_textSize, DEFAULT_DATE_TEXT_SIZE);
            dateTextAppearance.recycle();
!!!2143490.java!!!	invalidateAllWeekViews() : void
            final int childCount = mListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View view = mListView.getChildAt(i);
                view.invalidate();
            }
!!!2143618.java!!!	getCalendarForLocale(inout oldCalendar : Calendar, inout locale : Locale) : Calendar
            if (oldCalendar == null) {
                return Calendar.getInstance(locale);
            } else {
                final long currentTimeMillis = oldCalendar.getTimeInMillis();
                Calendar newCalendar = Calendar.getInstance(locale);
                newCalendar.setTimeInMillis(currentTimeMillis);
                return newCalendar;
            }
!!!2143746.java!!!	isSameDate(inout firstDate : Calendar, inout secondDate : Calendar) : boolean
            return (firstDate.get(Calendar.DAY_OF_YEAR) == secondDate.get(Calendar.DAY_OF_YEAR)
                    && firstDate.get(Calendar.YEAR) == secondDate.get(Calendar.YEAR));
!!!2143874.java!!!	setUpAdapter() : void
            if (mAdapter == null) {
                mAdapter = new WeeksAdapter(mContext);
                mAdapter.registerDataSetObserver(new DataSetObserver() {
                    @Override
                    public void onChanged() {
                        if (mOnDateChangeListener != null) {
                            Calendar selectedDay = mAdapter.getSelectedDay();
                            mOnDateChangeListener.onSelectedDayChange(mDelegator,
                                    selectedDay.get(Calendar.YEAR),
                                    selectedDay.get(Calendar.MONTH),
                                    selectedDay.get(Calendar.DAY_OF_MONTH));
                        }
                    }
                });
                mListView.setAdapter(mAdapter);
            }

            // refresh the view with the new parameters
            mAdapter.notifyDataSetChanged();
!!!2144002.java!!!	setUpHeader() : void
            mDayLabels = new String[mDaysPerWeek];
            for (int i = mFirstDayOfWeek, count = mFirstDayOfWeek + mDaysPerWeek; i < count; i++) {
                int calendarDay = (i > Calendar.SATURDAY) ? i - Calendar.SATURDAY : i;
                mDayLabels[i - mFirstDayOfWeek] = DateUtils.getDayOfWeekString(calendarDay,
                        DateUtils.LENGTH_SHORTEST);
            }

            TextView label = (TextView) mDayNamesHeader.getChildAt(0);
            if (mShowWeekNumber) {
                label.setVisibility(View.VISIBLE);
            } else {
                label.setVisibility(View.GONE);
            }
            for (int i = 1, count = mDayNamesHeader.getChildCount(); i < count; i++) {
                label = (TextView) mDayNamesHeader.getChildAt(i);
                if (mWeekDayTextAppearanceResId > -1) {
                    label.setTextAppearance(mContext, mWeekDayTextAppearanceResId);
                }
                if (i < mDaysPerWeek + 1) {
                    label.setText(mDayLabels[i - 1]);
                    label.setVisibility(View.VISIBLE);
                } else {
                    label.setVisibility(View.GONE);
                }
            }
            mDayNamesHeader.invalidate();
!!!2144130.java!!!	setUpListView() : void
            // Configure the listview
            mListView.setDivider(null);
            mListView.setItemsCanFocus(true);
            mListView.setVerticalScrollBarEnabled(false);
            mListView.setOnScrollListener(new OnScrollListener() {
                public void onScrollStateChanged(AbsListView view, int scrollState) {
                    LegacyCalendarViewDelegate.this.onScrollStateChanged(view, scrollState);
                }

                public void onScroll(
                        AbsListView view, int firstVisibleItem, int visibleItemCount,
                        int totalItemCount) {
                    LegacyCalendarViewDelegate.this.onScroll(view, firstVisibleItem,
                            visibleItemCount, totalItemCount);
                }
            });
            // Make the scrolling behavior nicer
            mListView.setFriction(mFriction);
            mListView.setVelocityScale(mVelocityScale);
!!!2144258.java!!!	goTo(inout date : Calendar, inout animate : boolean, inout setSelected : boolean, inout forceScroll : boolean) : void
            if (date.before(mMinDate) || date.after(mMaxDate)) {
                throw new IllegalArgumentException("Time not between " + mMinDate.getTime()
                        + " and " + mMaxDate.getTime());
            }
            // Find the first and last entirely visible weeks
            int firstFullyVisiblePosition = mListView.getFirstVisiblePosition();
            View firstChild = mListView.getChildAt(0);
            if (firstChild != null && firstChild.getTop() < 0) {
                firstFullyVisiblePosition++;
            }
            int lastFullyVisiblePosition = firstFullyVisiblePosition + mShownWeekCount - 1;
            if (firstChild != null && firstChild.getTop() > mBottomBuffer) {
                lastFullyVisiblePosition--;
            }
            if (setSelected) {
                mAdapter.setSelectedDay(date);
            }
            // Get the week we're going to
            int position = getWeeksSinceMinDate(date);

            // Check if the selected day is now outside of our visible range
            // and if so scroll to the month that contains it
            if (position < firstFullyVisiblePosition || position > lastFullyVisiblePosition
                    || forceScroll) {
                mFirstDayOfMonth.setTimeInMillis(date.getTimeInMillis());
                mFirstDayOfMonth.set(Calendar.DAY_OF_MONTH, 1);

                setMonthDisplayed(mFirstDayOfMonth);

                // the earliest time we can scroll to is the min date
                if (mFirstDayOfMonth.before(mMinDate)) {
                    position = 0;
                } else {
                    position = getWeeksSinceMinDate(mFirstDayOfMonth);
                }

                mPreviousScrollState = OnScrollListener.SCROLL_STATE_FLING;
                if (animate) {
                    mListView.smoothScrollToPositionFromTop(position, mListScrollTopOffset,
                            GOTO_SCROLL_DURATION);
                } else {
                    mListView.setSelectionFromTop(position, mListScrollTopOffset);
                    // Perform any after scroll operations that are needed
                    onScrollStateChanged(mListView, OnScrollListener.SCROLL_STATE_IDLE);
                }
            } else if (setSelected) {
                // Otherwise just set the selection
                setMonthDisplayed(date);
            }
!!!2144386.java!!!	parseDate(in date : String, inout outDate : Calendar) : boolean
            try {
                outDate.setTime(mDateFormat.parse(date));
                return true;
            } catch (ParseException e) {
                Log.w(LOG_TAG, "Date: " + date + " not in format: " + DATE_FORMAT);
                return false;
            }
!!!2144514.java!!!	onScrollStateChanged(inout view : AbsListView, in scrollState : int) : void
            mScrollStateChangedRunnable.doScrollStateChange(view, scrollState);
!!!2144642.java!!!	onScroll(inout view : AbsListView, in firstVisibleItem : int, in visibleItemCount : int, in totalItemCount : int) : void
            WeekView child = (WeekView) view.getChildAt(0);
            if (child == null) {
                return;
            }

            // Figure out where we are
            long currScroll =
                    view.getFirstVisiblePosition() * child.getHeight() - child.getBottom();

            // If we have moved since our last call update the direction
            if (currScroll < mPreviousScrollPosition) {
                mIsScrollingUp = true;
            } else if (currScroll > mPreviousScrollPosition) {
                mIsScrollingUp = false;
            } else {
                return;
            }

            // Use some hysteresis for checking which month to highlight. This
            // causes the month to transition when two full weeks of a month are
            // visible when scrolling up, and when the first day in a month reaches
            // the top of the screen when scrolling down.
            int offset = child.getBottom() < mWeekMinVisibleHeight ? 1 : 0;
            if (mIsScrollingUp) {
                child = (WeekView) view.getChildAt(SCROLL_HYST_WEEKS + offset);
            } else if (offset != 0) {
                child = (WeekView) view.getChildAt(offset);
            }

            if (child != null) {
                // Find out which month we're moving into
                int month;
                if (mIsScrollingUp) {
                    month = child.getMonthOfFirstWeekDay();
                } else {
                    month = child.getMonthOfLastWeekDay();
                }

                // And how it relates to our current highlighted month
                int monthDiff;
                if (mCurrentMonthDisplayed == 11 && month == 0) {
                    monthDiff = 1;
                } else if (mCurrentMonthDisplayed == 0 && month == 11) {
                    monthDiff = -1;
                } else {
                    monthDiff = month - mCurrentMonthDisplayed;
                }

                // Only switch months if we're scrolling away from the currently
                // selected month
                if ((!mIsScrollingUp && monthDiff > 0) || (mIsScrollingUp && monthDiff < 0)) {
                    Calendar firstDay = child.getFirstDay();
                    if (mIsScrollingUp) {
                        firstDay.add(Calendar.DAY_OF_MONTH, -DAYS_PER_WEEK);
                    } else {
                        firstDay.add(Calendar.DAY_OF_MONTH, DAYS_PER_WEEK);
                    }
                    setMonthDisplayed(firstDay);
                }
            }
            mPreviousScrollPosition = currScroll;
            mPreviousScrollState = mCurrentScrollState;
!!!2144770.java!!!	setMonthDisplayed(inout calendar : Calendar) : void
            mCurrentMonthDisplayed = calendar.get(Calendar.MONTH);
            mAdapter.setFocusMonth(mCurrentMonthDisplayed);
            final int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NO_MONTH_DAY
                    | DateUtils.FORMAT_SHOW_YEAR;
            final long millis = calendar.getTimeInMillis();
            String newMonthName = DateUtils.formatDateRange(mContext, millis, millis, flags);
            mMonthName.setText(newMonthName);
            mMonthName.invalidate();
!!!2144898.java!!!	getWeeksSinceMinDate(inout date : Calendar) : int
            if (date.before(mMinDate)) {
                throw new IllegalArgumentException("fromDate: " + mMinDate.getTime()
                        + " does not precede toDate: " + date.getTime());
            }
            long endTimeMillis = date.getTimeInMillis()
                    + date.getTimeZone().getOffset(date.getTimeInMillis());
            long startTimeMillis = mMinDate.getTimeInMillis()
                    + mMinDate.getTimeZone().getOffset(mMinDate.getTimeInMillis());
            long dayOffsetMillis = (mMinDate.get(Calendar.DAY_OF_WEEK) - mFirstDayOfWeek)
                    * MILLIS_IN_DAY;
            return (int) ((endTimeMillis - startTimeMillis + dayOffsetMillis) / MILLIS_IN_WEEK);
