class ViewPropertyAnimator
!!!927746.java!!!	ViewPropertyAnimator(inout view : View)
        mView = view;
        view.ensureTransformationInfo();
!!!927874.java!!!	setDuration(in duration : long) : ViewPropertyAnimator
        if (duration < 0) {
            throw new IllegalArgumentException("Animators cannot have negative duration: " +
                    duration);
        }
        mDurationSet = true;
        mDuration = duration;
        return this;
!!!928002.java!!!	getDuration() : long
        if (mDurationSet) {
            return mDuration;
        } else {
            // Just return the default from ValueAnimator, since that's what we'd get if
            // the value has not been set otherwise
            if (mTempValueAnimator == null) {
                mTempValueAnimator = new ValueAnimator();
            }
            return mTempValueAnimator.getDuration();
        }
!!!928130.java!!!	getStartDelay() : long
        if (mStartDelaySet) {
            return mStartDelay;
        } else {
            // Just return the default from ValueAnimator (0), since that's what we'd get if
            // the value has not been set otherwise
            return 0;
        }
!!!928258.java!!!	setStartDelay(in startDelay : long) : ViewPropertyAnimator
        if (startDelay < 0) {
            throw new IllegalArgumentException("Animators cannot have negative start " +
                "delay: " + startDelay);
        }
        mStartDelaySet = true;
        mStartDelay = startDelay;
        return this;
!!!928386.java!!!	setInterpolator(inout interpolator : TimeInterpolator) : ViewPropertyAnimator
        mInterpolatorSet = true;
        mInterpolator = interpolator;
        return this;
!!!928514.java!!!	getInterpolator() : TimeInterpolator
        if (mInterpolatorSet) {
            return mInterpolator;
        } else {
            // Just return the default from ValueAnimator, since that's what we'd get if
            // the value has not been set otherwise
            if (mTempValueAnimator == null) {
                mTempValueAnimator = new ValueAnimator();
            }
            return mTempValueAnimator.getInterpolator();
        }
!!!928642.java!!!	setListener(inout listener : Animator.AnimatorListener) : ViewPropertyAnimator
        mListener = listener;
        return this;
!!!928770.java!!!	getListener() : Animator.AnimatorListener
        return mListener;
!!!928898.java!!!	setUpdateListener(inout listener : ValueAnimator.AnimatorUpdateListener) : ViewPropertyAnimator
        mUpdateListener = listener;
        return this;
!!!929026.java!!!	getUpdateListener() : ValueAnimator.AnimatorUpdateListener
        return mUpdateListener;
!!!929154.java!!!	start() : void
        mView.removeCallbacks(mAnimationStarter);
        startAnimation();
!!!929282.java!!!	cancel() : void
        if (mAnimatorMap.size() > 0) {
            HashMap<Animator, PropertyBundle> mAnimatorMapCopy =
                    (HashMap<Animator, PropertyBundle>)mAnimatorMap.clone();
            Set<Animator> animatorSet = mAnimatorMapCopy.keySet();
            for (Animator runningAnim : animatorSet) {
                runningAnim.cancel();
            }
        }
        mPendingAnimations.clear();
        mPendingSetupAction = null;
        mPendingCleanupAction = null;
        mPendingOnStartAction = null;
        mPendingOnEndAction = null;
        mView.removeCallbacks(mAnimationStarter);
        if (mRTBackend != null) {
            mRTBackend.cancelAll();
        }
!!!929410.java!!!	x(in value : float) : ViewPropertyAnimator
        animateProperty(X, value);
        return this;
!!!929538.java!!!	xBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(X, value);
        return this;
!!!929666.java!!!	y(in value : float) : ViewPropertyAnimator
        animateProperty(Y, value);
        return this;
!!!929794.java!!!	yBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(Y, value);
        return this;
!!!929922.java!!!	z(in value : float) : ViewPropertyAnimator
        animateProperty(Z, value);
        return this;
!!!930050.java!!!	zBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(Z, value);
        return this;
!!!930178.java!!!	rotation(in value : float) : ViewPropertyAnimator
        animateProperty(ROTATION, value);
        return this;
!!!930306.java!!!	rotationBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(ROTATION, value);
        return this;
!!!930434.java!!!	rotationX(in value : float) : ViewPropertyAnimator
        animateProperty(ROTATION_X, value);
        return this;
!!!930562.java!!!	rotationXBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(ROTATION_X, value);
        return this;
!!!930690.java!!!	rotationY(in value : float) : ViewPropertyAnimator
        animateProperty(ROTATION_Y, value);
        return this;
!!!930818.java!!!	rotationYBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(ROTATION_Y, value);
        return this;
!!!930946.java!!!	translationX(in value : float) : ViewPropertyAnimator
        animateProperty(TRANSLATION_X, value);
        return this;
!!!931074.java!!!	translationXBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(TRANSLATION_X, value);
        return this;
!!!931202.java!!!	translationY(in value : float) : ViewPropertyAnimator
        animateProperty(TRANSLATION_Y, value);
        return this;
!!!931330.java!!!	translationYBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(TRANSLATION_Y, value);
        return this;
!!!931458.java!!!	translationZ(in value : float) : ViewPropertyAnimator
        animateProperty(TRANSLATION_Z, value);
        return this;
!!!931586.java!!!	translationZBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(TRANSLATION_Z, value);
        return this;
!!!931714.java!!!	scaleX(in value : float) : ViewPropertyAnimator
        animateProperty(SCALE_X, value);
        return this;
!!!931842.java!!!	scaleXBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(SCALE_X, value);
        return this;
!!!931970.java!!!	scaleY(in value : float) : ViewPropertyAnimator
        animateProperty(SCALE_Y, value);
        return this;
!!!932098.java!!!	scaleYBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(SCALE_Y, value);
        return this;
!!!932226.java!!!	alpha(in value : float) : ViewPropertyAnimator
        animateProperty(ALPHA, value);
        return this;
!!!932354.java!!!	alphaBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(ALPHA, value);
        return this;
!!!932482.java!!!	withLayer() : ViewPropertyAnimator
         mPendingSetupAction= new Runnable() {
            @Override
            public void run() {
                mView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
                if (mView.isAttachedToWindow()) {
                    mView.buildLayer();
                }
            }
        };
        final int currentLayerType = mView.getLayerType();
        mPendingCleanupAction = new Runnable() {
            @Override
            public void run() {
                mView.setLayerType(currentLayerType, null);
            }
        };
        if (mAnimatorSetupMap == null) {
            mAnimatorSetupMap = new HashMap<Animator, Runnable>();
        }
        if (mAnimatorCleanupMap == null) {
            mAnimatorCleanupMap = new HashMap<Animator, Runnable>();
        }

        return this;
!!!932610.java!!!	withStartAction(inout runnable : Runnable) : ViewPropertyAnimator
        mPendingOnStartAction = runnable;
        if (runnable != null && mAnimatorOnStartMap == null) {
            mAnimatorOnStartMap = new HashMap<Animator, Runnable>();
        }
        return this;
!!!932738.java!!!	withEndAction(inout runnable : Runnable) : ViewPropertyAnimator
        mPendingOnEndAction = runnable;
        if (runnable != null && mAnimatorOnEndMap == null) {
            mAnimatorOnEndMap = new HashMap<Animator, Runnable>();
        }
        return this;
!!!932866.java!!!	hasActions() : boolean
        return mPendingSetupAction != null
                || mPendingCleanupAction != null
                || mPendingOnStartAction != null
                || mPendingOnEndAction != null;
!!!932994.java!!!	startAnimation() : void
        if (mRTBackend != null && mRTBackend.startAnimation(this)) {
            return;
        }
        mView.setHasTransientState(true);
        ValueAnimator animator = ValueAnimator.ofFloat(1.0f);
        ArrayList<NameValuesHolder> nameValueList =
                (ArrayList<NameValuesHolder>) mPendingAnimations.clone();
        mPendingAnimations.clear();
        int propertyMask = 0;
        int propertyCount = nameValueList.size();
        for (int i = 0; i < propertyCount; ++i) {
            NameValuesHolder nameValuesHolder = nameValueList.get(i);
            propertyMask |= nameValuesHolder.mNameConstant;
        }
        mAnimatorMap.put(animator, new PropertyBundle(propertyMask, nameValueList));
        if (mPendingSetupAction != null) {
            mAnimatorSetupMap.put(animator, mPendingSetupAction);
            mPendingSetupAction = null;
        }
        if (mPendingCleanupAction != null) {
            mAnimatorCleanupMap.put(animator, mPendingCleanupAction);
            mPendingCleanupAction = null;
        }
        if (mPendingOnStartAction != null) {
            mAnimatorOnStartMap.put(animator, mPendingOnStartAction);
            mPendingOnStartAction = null;
        }
        if (mPendingOnEndAction != null) {
            mAnimatorOnEndMap.put(animator, mPendingOnEndAction);
            mPendingOnEndAction = null;
        }
        animator.addUpdateListener(mAnimatorEventListener);
        animator.addListener(mAnimatorEventListener);
        if (mStartDelaySet) {
            animator.setStartDelay(mStartDelay);
        }
        if (mDurationSet) {
            animator.setDuration(mDuration);
        }
        if (mInterpolatorSet) {
            animator.setInterpolator(mInterpolator);
        }
        animator.start();
!!!933122.java!!!	animateProperty(in constantName : int, in toValue : float) : void
        float fromValue = getValue(constantName);
        float deltaValue = toValue - fromValue;
        animatePropertyBy(constantName, fromValue, deltaValue);
!!!933250.java!!!	animatePropertyBy(in constantName : int, in byValue : float) : void
        float fromValue = getValue(constantName);
        animatePropertyBy(constantName, fromValue, byValue);
!!!933378.java!!!	animatePropertyBy(in constantName : int, in startValue : float, in byValue : float) : void
        // First, cancel any existing animations on this property
        if (mAnimatorMap.size() > 0) {
            Animator animatorToCancel = null;
            Set<Animator> animatorSet = mAnimatorMap.keySet();
            for (Animator runningAnim : animatorSet) {
                PropertyBundle bundle = mAnimatorMap.get(runningAnim);
                if (bundle.cancel(constantName)) {
                    // property was canceled - cancel the animation if it's now empty
                    // Note that it's safe to break out here because every new animation
                    // on a property will cancel a previous animation on that property, so
                    // there can only ever be one such animation running.
                    if (bundle.mPropertyMask == NONE) {
                        // the animation is no longer changing anything - cancel it
                        animatorToCancel = runningAnim;
                        break;
                    }
                }
            }
            if (animatorToCancel != null) {
                animatorToCancel.cancel();
            }
        }

        NameValuesHolder nameValuePair = new NameValuesHolder(constantName, startValue, byValue);
        mPendingAnimations.add(nameValuePair);
        mView.removeCallbacks(mAnimationStarter);
        mView.postOnAnimation(mAnimationStarter);
!!!933506.java!!!	setValue(in propertyConstant : int, in value : float) : void
        final View.TransformationInfo info = mView.mTransformationInfo;
        final RenderNode renderNode = mView.mRenderNode;
        switch (propertyConstant) {
            case TRANSLATION_X:
                renderNode.setTranslationX(value);
                break;
            case TRANSLATION_Y:
                renderNode.setTranslationY(value);
                break;
            case TRANSLATION_Z:
                renderNode.setTranslationZ(value);
                break;
            case ROTATION:
                renderNode.setRotation(value);
                break;
            case ROTATION_X:
                renderNode.setRotationX(value);
                break;
            case ROTATION_Y:
                renderNode.setRotationY(value);
                break;
            case SCALE_X:
                renderNode.setScaleX(value);
                break;
            case SCALE_Y:
                renderNode.setScaleY(value);
                break;
            case X:
                renderNode.setTranslationX(value - mView.mLeft);
                break;
            case Y:
                renderNode.setTranslationY(value - mView.mTop);
                break;
            case Z:
                renderNode.setTranslationZ(value - renderNode.getElevation());
                break;
            case ALPHA:
                info.mAlpha = value;
                renderNode.setAlpha(value);
                break;
        }
!!!933634.java!!!	getValue(in propertyConstant : int) : float
        final RenderNode node = mView.mRenderNode;
        switch (propertyConstant) {
            case TRANSLATION_X:
                return node.getTranslationX();
            case TRANSLATION_Y:
                return node.getTranslationY();
            case TRANSLATION_Z:
                return node.getTranslationZ();
            case ROTATION:
                return node.getRotation();
            case ROTATION_X:
                return node.getRotationX();
            case ROTATION_Y:
                return node.getRotationY();
            case SCALE_X:
                return node.getScaleX();
            case SCALE_Y:
                return node.getScaleY();
            case X:
                return mView.mLeft + node.getTranslationX();
            case Y:
                return mView.mTop + node.getTranslationY();
            case Z:
                return node.getElevation() + node.getTranslationZ();
            case ALPHA:
                return mView.mTransformationInfo.mAlpha;
        }
        return 0;
