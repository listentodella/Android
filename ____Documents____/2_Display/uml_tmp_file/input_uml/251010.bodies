class GridLayoutAnimationController
!!!1126402.java!!!	GridLayoutAnimationController(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);

        TypedArray a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.GridLayoutAnimation);

        Animation.Description d = Animation.Description.parseValue(
                a.peekValue(com.android.internal.R.styleable.GridLayoutAnimation_columnDelay));
        mColumnDelay = d.value;
        d = Animation.Description.parseValue(
                a.peekValue(com.android.internal.R.styleable.GridLayoutAnimation_rowDelay));
        mRowDelay = d.value;
        //noinspection PointlessBitwiseExpression
        mDirection = a.getInt(com.android.internal.R.styleable.GridLayoutAnimation_direction,
                DIRECTION_LEFT_TO_RIGHT | DIRECTION_TOP_TO_BOTTOM);
        mDirectionPriority = a.getInt(com.android.internal.R.styleable.GridLayoutAnimation_directionPriority,
                PRIORITY_NONE);

        a.recycle();
!!!1126530.java!!!	GridLayoutAnimationController(inout animation : Animation)
        this(animation, 0.5f, 0.5f);
!!!1126658.java!!!	GridLayoutAnimationController(inout animation : Animation, in columnDelay : float, in rowDelay : float)
        super(animation);
        mColumnDelay = columnDelay;
        mRowDelay = rowDelay;
!!!1126786.java!!!	getColumnDelay() : float
        return mColumnDelay;
!!!1126914.java!!!	setColumnDelay(in columnDelay : float) : void
        mColumnDelay = columnDelay;
!!!1127042.java!!!	getRowDelay() : float
        return mRowDelay;
!!!1127170.java!!!	setRowDelay(in rowDelay : float) : void
        mRowDelay = rowDelay;
!!!1127298.java!!!	getDirection() : int
        return mDirection;
!!!1127426.java!!!	setDirection(in direction : int) : void
        mDirection = direction;
!!!1127554.java!!!	getDirectionPriority() : int
        return mDirectionPriority;
!!!1127682.java!!!	setDirectionPriority(in directionPriority : int) : void
        mDirectionPriority = directionPriority;
!!!1127810.java!!!	willOverlap() : boolean
        return mColumnDelay < 1.0f || mRowDelay < 1.0f;
!!!1127938.java!!!	getDelayForView(inout view : View) : long
        ViewGroup.LayoutParams lp = view.getLayoutParams();
        AnimationParameters params = (AnimationParameters) lp.layoutAnimationParameters;

        if (params == null) {
            return 0;
        }

        final int column = getTransformedColumnIndex(params);
        final int row = getTransformedRowIndex(params);

        final int rowsCount = params.rowsCount;
        final int columnsCount = params.columnsCount;

        final long duration = mAnimation.getDuration();
        final float columnDelay = mColumnDelay * duration;
        final float rowDelay = mRowDelay * duration;

        float totalDelay;
        long viewDelay;

        if (mInterpolator == null) {
            mInterpolator = new LinearInterpolator();
        }

        switch (mDirectionPriority) {
            case PRIORITY_COLUMN:
                viewDelay = (long) (row * rowDelay + column * rowsCount * rowDelay);
                totalDelay = rowsCount * rowDelay + columnsCount * rowsCount * rowDelay;
                break;
            case PRIORITY_ROW:
                viewDelay = (long) (column * columnDelay + row * columnsCount * columnDelay);
                totalDelay = columnsCount * columnDelay + rowsCount * columnsCount * columnDelay;
                break;
            case PRIORITY_NONE:
            default:
                viewDelay = (long) (column * columnDelay + row * rowDelay);
                totalDelay = columnsCount * columnDelay + rowsCount * rowDelay;
                break;
        }

        float normalizedDelay = viewDelay / totalDelay;
        normalizedDelay = mInterpolator.getInterpolation(normalizedDelay);

        return (long) (normalizedDelay * totalDelay);
!!!1128066.java!!!	getTransformedColumnIndex(inout params : LayoutAnimationController::AnimationParameters) : int
        int index;
        switch (getOrder()) {
            case ORDER_REVERSE:
                index = params.columnsCount - 1 - params.column;
                break;
            case ORDER_RANDOM:
                if (mRandomizer == null) {
                    mRandomizer = new Random();
                }
                index = (int) (params.columnsCount * mRandomizer.nextFloat());
                break;
            case ORDER_NORMAL:
            default:
                index = params.column;
                break;
        }

        int direction = mDirection & DIRECTION_HORIZONTAL_MASK;
        if (direction == DIRECTION_RIGHT_TO_LEFT) {
            index = params.columnsCount - 1 - index;
        }

        return index;
!!!1128194.java!!!	getTransformedRowIndex(inout params : LayoutAnimationController::AnimationParameters) : int
        int index;
        switch (getOrder()) {
            case ORDER_REVERSE:
                index = params.rowsCount - 1 - params.row;
                break;
            case ORDER_RANDOM:
                if (mRandomizer == null) {
                    mRandomizer = new Random();
                }
                index = (int) (params.rowsCount * mRandomizer.nextFloat());
                break;
            case ORDER_NORMAL:
            default:
                index = params.row;
                break;
        }

        int direction = mDirection & DIRECTION_VERTICAL_MASK;
        if (direction == DIRECTION_BOTTOM_TO_TOP) {
            index = params.rowsCount - 1 - index;
        }

        return index;
