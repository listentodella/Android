format 76
"admin" // app::admin
  revision 1
  modified_by 2 "thisway_diy"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "l:/android_projects/uml_tmp_file/app/admin/"
  java_package "android.app.admin"
  classview 155010 "admin"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 307330 "DeviceAdminInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used to specify meta information of a device administrator
component."
      classrelation 391426 // <realization>
	relation 390530 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 391426 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 1183618 "TAG"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"DeviceAdminInfo\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1183746 "USES_POLICY_DEVICE_OWNER"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: device owner meta-policy
for an admin that is designated as owner of the device.

@hide
"
      end

      attribute 1183874 "USES_POLICY_PROFILE_OWNER"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: profile owner meta-policy
for admins that have been installed as owner of some user profile.

@hide
"
      end

      attribute 1184002 "USES_POLICY_LIMIT_PASSWORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: limit the passwords
that the user can select, via {@link DevicePolicyManager#setPasswordQuality}
and {@link DevicePolicyManager#setPasswordMinimumLength}.

<p>To control this policy, the device admin must have a \"limit-password\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 1184130 "USES_POLICY_WATCH_LOGIN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to watch login
attempts from the user, via {@link DeviceAdminReceiver#ACTION_PASSWORD_FAILED},
{@link DeviceAdminReceiver#ACTION_PASSWORD_SUCCEEDED}, and
{@link DevicePolicyManager#getCurrentFailedPasswordAttempts}.

<p>To control this policy, the device admin must have a \"watch-login\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 1184258 "USES_POLICY_RESET_PASSWORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to reset the
user's password via
{@link DevicePolicyManager#resetPassword}.

<p>To control this policy, the device admin must have a \"reset-password\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 1184386 "USES_POLICY_FORCE_LOCK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to force the device
to lock via{@link DevicePolicyManager#lockNow} or limit the
maximum lock timeout for the device via
{@link DevicePolicyManager#setMaximumTimeToLock}.

<p>To control this policy, the device admin must have a \"force-lock\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 1184514 "USES_POLICY_WIPE_DATA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to factory
reset the device, erasing all of the user's data, via
{@link DevicePolicyManager#wipeData}.

<p>To control this policy, the device admin must have a \"wipe-data\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 1184642 "USES_POLICY_SETS_GLOBAL_PROXY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to specify the
device Global Proxy, via {@link DevicePolicyManager#setGlobalProxy}.

<p>To control this policy, the device admin must have a \"set-global-proxy\"
tag in the \"uses-policies\" section of its meta-data.
@hide
"
      end

      attribute 1184770 "USES_POLICY_EXPIRE_PASSWORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: force the user to
change their password after an administrator-defined time limit.

<p>To control this policy, the device admin must have an \"expire-password\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 1184898 "USES_ENCRYPTED_STORAGE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: require encryption of stored data.

<p>To control this policy, the device admin must have a \"encrypted-storage\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 1185026 "USES_POLICY_DISABLE_CAMERA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: disables use of all device cameras.

<p>To control this policy, the device admin must have a \"disable-camera\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 1185154 "USES_POLICY_DISABLE_KEYGUARD_FEATURES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: disables use of keyguard features.

<p>To control this policy, the device admin must have a \"disable-keyguard-features\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      class 307458 "PolicyInfo"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1185282 "ident"
	  const_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1185410 "tag"
	  const_attribute public explicit_type "String"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1185538 "label"
	  const_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1185666 "description"
	  const_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1769218 "PolicyInfo"
	  public explicit_return_type ""
	  nparams 4
	    param in name "identIn" explicit_type "int"
	    param in name "tagIn" explicit_type "String"
	    param in name "labelIn" explicit_type "int"
	    param in name "descriptionIn" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 391554 // sPoliciesDisplayOrder (<unidirectional association>)
	relation 390658 --->
	  stereotype "ArrayList"
	  a role_name "sPoliciesDisplayOrder" init_value " new ArrayList<PolicyInfo>()" class_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 391554 // sPoliciesDisplayOrder (<unidirectional association>)
	  b parent class_ref 307458 // PolicyInfo
      end

      attribute 1185794 "sKnownPolicies"
	class_attribute package explicit_type "String, Integer"
	init_value " new HashMap<String, Integer>()"
	stereotype "HashMap"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 391682 // sRevKnownPolicies (<unidirectional association>)
	relation 390786 --->
	  stereotype "SparseArray"
	  a role_name "sRevKnownPolicies" init_value " new SparseArray<PolicyInfo>()" class_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 391682 // sRevKnownPolicies (<unidirectional association>)
	  b parent class_ref 307458 // PolicyInfo
      end

      extra_member 143106 "initialization"
	
	cpp "" ""
	java "  static {
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_WIPE_DATA, \"wipe-data\",
                com.android.internal.R.string.policylab_wipeData,
                com.android.internal.R.string.policydesc_wipeData));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_RESET_PASSWORD, \"reset-password\",
                com.android.internal.R.string.policylab_resetPassword,
                com.android.internal.R.string.policydesc_resetPassword));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_LIMIT_PASSWORD, \"limit-password\",
                com.android.internal.R.string.policylab_limitPassword,
                com.android.internal.R.string.policydesc_limitPassword));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_WATCH_LOGIN, \"watch-login\",
                com.android.internal.R.string.policylab_watchLogin,
                com.android.internal.R.string.policydesc_watchLogin));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_FORCE_LOCK, \"force-lock\",
                com.android.internal.R.string.policylab_forceLock,
                com.android.internal.R.string.policydesc_forceLock));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_SETS_GLOBAL_PROXY, \"set-global-proxy\",
                com.android.internal.R.string.policylab_setGlobalProxy,
                com.android.internal.R.string.policydesc_setGlobalProxy));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_EXPIRE_PASSWORD, \"expire-password\",
                com.android.internal.R.string.policylab_expirePassword,
                com.android.internal.R.string.policydesc_expirePassword));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_ENCRYPTED_STORAGE, \"encrypted-storage\",
                com.android.internal.R.string.policylab_encryptedStorage,
                com.android.internal.R.string.policydesc_encryptedStorage));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_DISABLE_CAMERA, \"disable-camera\",
                com.android.internal.R.string.policylab_disableCamera,
                com.android.internal.R.string.policydesc_disableCamera));
        sPoliciesDisplayOrder.add(new PolicyInfo(
                USES_POLICY_DISABLE_KEYGUARD_FEATURES, \"disable-keyguard-features\",
                com.android.internal.R.string.policylab_disableKeyguardFeatures,
                com.android.internal.R.string.policydesc_disableKeyguardFeatures));

        for (int i=0; i<sPoliciesDisplayOrder.size(); i++) {
            PolicyInfo pi = sPoliciesDisplayOrder.get(i);
            sRevKnownPolicies.put(pi.ident, pi);
            sKnownPolicies.put(pi.tag, pi.ident);
        }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 1185922 "mReceiver"
	const_attribute package explicit_type "ResolveInfo"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The BroadcastReceiver that implements this device admin component.
"
      end

      attribute 1186050 "mVisible"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether this should be visible to the user.
"
      end

      attribute 1186178 "mUsesPolicies"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The policies this administrator needs access to.
"
      end

      operation 1769346 "DeviceAdminInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "receiver" explicit_type "ResolveInfo"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param context The Context in which we are parsing the device admin.
@param receiver The ResolveInfo returned from the package manager about
this device admin's component."
      end

      operation 1769474 "DeviceAdminInfo"
	package explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1769602 "getPackageName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the .apk package that implements this device admin."
      end

      operation 1769730 "getReceiverName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the class name of the receiver component that implements
this device admin."
      end

      operation 1769858 "getActivityInfo"
	public explicit_return_type "ActivityInfo"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the raw information about the receiver implementing this
device admin.  Do not modify the returned object."
      end

      operation 1769986 "getComponent"
	public explicit_return_type "ComponentName"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the component of the receiver that implements this device admin."
      end

      operation 1770114 "loadLabel"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "pm" explicit_type "PackageManager"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the user-displayed label for this device admin.

@param pm Supply a PackageManager used to load the device admin's
resources."
      end

      operation 1770242 "loadDescription"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "pm" explicit_type "PackageManager"
	nexceptions 1
	  explicit_exception "NotFoundException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load user-visible description associated with this device admin.

@param pm Supply a PackageManager used to load the device admin's
resources."
      end

      operation 1770370 "loadIcon"
	public explicit_return_type "Drawable"
	nparams 1
	  param inout name "pm" explicit_type "PackageManager"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the user-displayed icon for this device admin.

@param pm Supply a PackageManager used to load the device admin's
resources."
      end

      operation 1770498 "isVisible"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this device admin would like to be visible to the
user, even when it is not enabled."
      end

      operation 1770626 "usesPolicy"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "policyIdent" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the device admin has requested that it be able to use
the given policy control.  The possible policy identifier inputs are:
{@link #USES_POLICY_LIMIT_PASSWORD}, {@link #USES_POLICY_WATCH_LOGIN},
{@link #USES_POLICY_RESET_PASSWORD}, {@link #USES_POLICY_FORCE_LOCK},
{@link #USES_POLICY_WIPE_DATA},
{@link #USES_POLICY_EXPIRE_PASSWORD}, {@link #USES_ENCRYPTED_STORAGE},
{@link #USES_POLICY_DISABLE_CAMERA}."
      end

      operation 1770754 "getTagForPolicy"
	public explicit_return_type "String"
	nparams 1
	  param in name "policyIdent" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the XML tag name for the given policy identifier.  Valid identifiers
are as per {@link #usesPolicy(int)}.  If the given identifier is not
known, null is returned."
      end

      operation 1770882 "getUsedPolicies"
	public return_type class_ref 307458 // PolicyInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 1771010 "writePoliciesToXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "XmlSerializer"
	nexceptions 3
	  explicit_exception "IllegalArgumentException"
	  explicit_exception "IllegalStateException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 1771138 "readPoliciesFromXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parser" explicit_type "XmlPullParser"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 1771266 "dump"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pw" explicit_type "Printer"
	  param in name "prefix" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1771394 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1771522 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 391810 // CREATOR (<unidirectional association>)
	relation 390914 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<DeviceAdminInfo>() {
        public DeviceAdminInfo createFromParcel(Parcel source) {
            return new DeviceAdminInfo(source);
        }

        public DeviceAdminInfo[] newArray(int size) {
            return new DeviceAdminInfo[size];
        }
    }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 391810 // CREATOR (<unidirectional association>)
	  b parent class_ref 307330 // DeviceAdminInfo
      end

      operation 1771650 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 307586 "DeviceAdminReceiver"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class for implementing a device administration component.  This
class provides a convenience for interpreting the raw intent actions
that are sent by the system.

<p>The callback methods, like the base
{@link BroadcastReceiver#onReceive(Context, Intent) BroadcastReceiver.onReceive()}
method, happen on the main thread of the process.  Thus long running
operations must be done on another thread.  Note that because a receiver
is done once returning from its receive function, such long-running operations
should probably be done in a {@link Service}.

<p>When publishing your DeviceAdmin subclass as a receiver, it must
handle {@link #ACTION_DEVICE_ADMIN_ENABLED} and require the
{@link android.Manifest.permission#BIND_DEVICE_ADMIN} permission.  A typical
manifest entry would look like:</p>

{@sample development/samples/ApiDemos/AndroidManifest.xml device_admin_declaration}

<p>The meta-data referenced here provides addition information specific
to the device administrator, as parsed by the {@link DeviceAdminInfo} class.
A typical file would be:</p>

{@sample development/samples/ApiDemos/res/xml/device_admin_sample.xml meta_data}

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about device administration, read the
<a href=\"{@docRoot}guide/topics/admin/device-admin.html\">Device Administration</a>
developer guide.</p>
</div>"
      classrelation 391938 // <generalisation>
	relation 391042 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 391938 // <generalisation>
	  b parent class_ref 307714 // BroadcastReceiver
      end

      attribute 1186306 "TAG"
	class_attribute private explicit_type "String"
	init_value " \"DevicePolicy\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1186434 "localLOGV"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1186562 "ACTION_DEVICE_ADMIN_ENABLED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.DEVICE_ADMIN_ENABLED\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the primary action that a device administrator must implement to be
allowed to manage a device.  This will be set to the receiver
when the user enables it for administration.  You will generally
handle this in {@link DeviceAdminReceiver#onEnabled(Context, Intent)}.  To be
supported, the receiver must also require the
{@link android.Manifest.permission#BIND_DEVICE_ADMIN} permission so
that other applications can not abuse it.
"
      end

      attribute 1186690 "ACTION_DEVICE_ADMIN_DISABLE_REQUESTED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Action sent to a device administrator when the user has requested to
disable it, but before this has actually been done.  This gives you
a chance to supply a message to the user about the impact of
disabling your admin, by setting the extra field
{@link #EXTRA_DISABLE_WARNING} in the result Intent.  If not set,
no warning will be displayed.  If set, the given text will be shown
to the user before they disable your admin.
"
      end

      attribute 1186818 "EXTRA_DISABLE_WARNING"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.DISABLE_WARNING\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A CharSequence that can be shown to the user informing them of the
impact of disabling your admin.

@see #ACTION_DEVICE_ADMIN_DISABLE_REQUESTED
"
      end

      attribute 1186946 "ACTION_DEVICE_ADMIN_DISABLED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.DEVICE_ADMIN_DISABLED\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Action sent to a device administrator when the user has disabled
it.  Upon return, the application no longer has access to the
protected device policy manager APIs.  You will generally
handle this in {@link DeviceAdminReceiver#onDisabled(Context, Intent)}.  Note
that this action will be
sent the receiver regardless of whether it is explicitly listed in
its intent filter.
"
      end

      attribute 1187074 "ACTION_PASSWORD_CHANGED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.ACTION_PASSWORD_CHANGED\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Action sent to a device administrator when the user has changed the
password of their device.  You can at this point check the characteristics
of the new password with {@link DevicePolicyManager#isActivePasswordSufficient()
DevicePolicyManager.isActivePasswordSufficient()}.
You will generally
handle this in {@link DeviceAdminReceiver#onPasswordChanged}.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to receive
this broadcast.
"
      end

      attribute 1187202 "ACTION_PASSWORD_FAILED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.ACTION_PASSWORD_FAILED\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Action sent to a device administrator when the user has failed at
attempted to enter the password.  You can at this point check the
number of failed password attempts there have been with
{@link DevicePolicyManager#getCurrentFailedPasswordAttempts
DevicePolicyManager.getCurrentFailedPasswordAttempts()}.  You will generally
handle this in {@link DeviceAdminReceiver#onPasswordFailed}.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to receive
this broadcast.
"
      end

      attribute 1187330 "ACTION_PASSWORD_SUCCEEDED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.ACTION_PASSWORD_SUCCEEDED\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Action sent to a device administrator when the user has successfully
entered their password, after failing one or more times.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to receive
this broadcast.
"
      end

      attribute 1187458 "ACTION_PASSWORD_EXPIRING"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.ACTION_PASSWORD_EXPIRING\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Action periodically sent to a device administrator when the device password
is expiring.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_EXPIRE_PASSWORD} to receive
this broadcast.
"
      end

      attribute 1187586 "ACTION_LOCK_TASK_ENTERING"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.LOCK_TASK_ENTERING\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Action sent to a device administrator to notify that the device is entering
lock task mode from an authorized package.  The extra {@link #EXTRA_LOCK_TASK_PACKAGE}
will describe the authorized package using lock task mode.

@see DevicePolicyManager#isLockTaskPermitted(String)

<p>The calling device admin must be the device owner or profile
owner to receive this broadcast.
"
      end

      attribute 1187714 "ACTION_LOCK_TASK_EXITING"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.LOCK_TASK_EXITING\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Action sent to a device administrator to notify that the device is exiting
lock task mode from an authorized package.

@see DevicePolicyManager#isLockTaskPermitted(String)

<p>The calling device admin must be the device owner or profile
owner to receive this broadcast.
"
      end

      attribute 1187842 "EXTRA_LOCK_TASK_PACKAGE"
	class_attribute const_attribute public explicit_type "String"
	init_value "
            \"android.app.extra.LOCK_TASK_PACKAGE\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A boolean describing whether the device is currently entering or exiting
lock task mode.

@see #ACTION_LOCK_TASK_CHANGED
"
      end

      attribute 1187970 "ACTION_PROFILE_PROVISIONING_COMPLETE"
	class_attribute const_attribute public explicit_type "String"
	init_value "
            \"android.app.action.PROFILE_PROVISIONING_COMPLETE\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Broadcast Action: This broadcast is sent to indicate that provisioning of a managed profile
or managed device has completed successfully.

<p>The broadcast is limited to the profile that will be managed by the application that
requested provisioning. In the device owner case the profile is the primary user.
The broadcast will also be limited to the {@link DeviceAdminReceiver} component
specified in the original intent or NFC bump that started the provisioning process
(@see DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE).

<p>A device admin application which listens to this intent can find out if the device was
provisioned for the device owner or profile owner case by calling respectively
{@link android.app.admin.DevicePolicyManager#isDeviceOwnerApp} and
{@link android.app.admin.DevicePolicyManager#isProfileOwnerApp}.

<p>Input: Nothing.</p>
<p>Output: Nothing</p>
"
      end

      attribute 1188098 "DEVICE_ADMIN_META_DATA"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.device_admin\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Name under which a DevicePolicy component publishes information
about itself.  This meta-data must reference an XML resource containing
a device-admin tag.  XXX TO DO: describe syntax.
"
      end

      classrelation 392066 // mManager (<unidirectional association>)
	relation 391170 --->
	  a role_name "mManager" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 392066 // mManager (<unidirectional association>)
	  b parent class_ref 307842 // DevicePolicyManager
      end

      attribute 1188226 "mWho"
	private explicit_type "ComponentName"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1771778 "getManager"
	public return_type class_ref 307842 // DevicePolicyManager
	nparams 1
	  param inout name "context" explicit_type "Context"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the DevicePolicyManager interface for this administrator to work
with the system."
      end

      operation 1771906 "getWho"
	public explicit_return_type "ComponentName"
	nparams 1
	  param inout name "context" explicit_type "Context"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the ComponentName describing who this device administrator is, for
use in {@link DevicePolicyManager} APIs that require the administrator to
identify itself."
      end

      operation 1772034 "onEnabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called after the administrator is first enabled, as a result of
receiving {@link #ACTION_DEVICE_ADMIN_ENABLED}.  At this point you
can use {@link DevicePolicyManager} to set your desired policies.

<p> If the admin is activated by a device owner, then the intent
may contain private extras that are relevant to user setup.
{@see DevicePolicyManager#createAndInitializeUser(ComponentName, String, String,
     ComponentName, Intent)}

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 1772162 "onDisableRequested"
	public explicit_return_type "CharSequence"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the user has asked to disable the administrator, as a result of
receiving {@link #ACTION_DEVICE_ADMIN_DISABLE_REQUESTED}, giving you
a chance to present a warning message to them.  The message is returned
as the result; if null is returned (the default implementation), no
message will be displayed.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@return Return the warning message to display to the user before
being disabled; if null is returned, no message is displayed."
      end

      operation 1772290 "onDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called prior to the administrator being disabled, as a result of
receiving {@link #ACTION_DEVICE_ADMIN_DISABLED}.  Upon return, you
can no longer use the protected parts of the {@link DevicePolicyManager}
API.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 1772418 "onPasswordChanged"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called after the user has changed their password, as a result of
receiving {@link #ACTION_PASSWORD_CHANGED}.  At this point you
can use {@link DevicePolicyManager#getCurrentFailedPasswordAttempts()
DevicePolicyManager.getCurrentFailedPasswordAttempts()}
to retrieve the active password characteristics.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 1772546 "onPasswordFailed"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called after the user has failed at entering their current password, as a result of
receiving {@link #ACTION_PASSWORD_FAILED}.  At this point you
can use {@link DevicePolicyManager} to retrieve the number of failed
password attempts.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 1772674 "onPasswordSucceeded"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called after the user has succeeded at entering their current password,
as a result of receiving {@link #ACTION_PASSWORD_SUCCEEDED}.  This will
only be received the first time they succeed after having previously
failed.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 1772802 "onPasswordExpiring"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called periodically when the password is about to expire or has expired.  It will typically
be called at these times: on device boot, once per day before the password expires,
and at the time when the password expires.

<p>If the password is not updated by the user, this method will continue to be called
once per day until the password is changed or the device admin disables password expiration.

<p>The admin will typically post a notification requesting the user to change their password
in response to this call. The actual password expiration time can be obtained by calling
{@link DevicePolicyManager#getPasswordExpiration(ComponentName) }

<p>The admin should be sure to take down any notifications it posted in response to this call
when it receives {@link DeviceAdminReceiver#onPasswordChanged(Context, Intent) }.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 1772930 "onProfileProvisioningComplete"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when provisioning of a managed profile or managed device has completed successfully.

<p> As a prerequisit for the execution of this callback the (@link DeviceAdminReceiver} has
to declare an intent filter for {@link #ACTION_PROFILE_PROVISIONING_COMPLETE}.
Its component must also be specified in the {@link DevicePolicyManager#EXTRA_DEVICE_ADMIN}
of the {@link DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE} intent that started the
managed provisioning.

<p>When provisioning is complete, the managed profile is hidden until the profile owner
calls {DevicePolicyManager#setProfileEnabled(ComponentName admin)}. Typically a profile
owner will enable the profile when it has finished any additional setup such as adding an
account by using the {@link AccountManager} and calling apis to bring the profile into the
desired state.

<p> Note that provisioning completes without waiting for any server interactions, so the
profile owner needs to wait for data to be available if required (e.g android device ids or
other data that is set as a result of server interactions).

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 1773058 "onLockTaskModeEntering"
	public explicit_return_type "void"
	nparams 3
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	  param in name "pkg" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a device is entering lock task mode by a package authorized
by {@link DevicePolicyManager#isLockTaskPermitted(String)}

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@param pkg If entering, the authorized package using lock task mode, otherwise null."
      end

      operation 1773186 "onLockTaskModeExiting"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a device is exiting lock task mode by a package authorized
by {@link DevicePolicyManager#isLockTaskPermitted(String)}

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 1773314 "onReceive"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Intercept standard device administrator broadcasts.  Implementations
should not override this method; it is better to implement the
convenience callbacks for each action."
      end
    end

    class 307842 "DevicePolicyManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Public interface for managing policies enforced on a device.  Most clients
of this class must have published a {@link DeviceAdminReceiver} that the user
has currently enabled.

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about managing policies for device adminstration, read the
<a href=\"{@docRoot}guide/topics/admin/device-admin.html\">Device Administration</a>
developer guide.</p>
</div>"
      attribute 1188354 "TAG"
	class_attribute private explicit_type "String"
	init_value " \"DevicePolicyManager\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1188482 "mContext"
	const_attribute private explicit_type "Context"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1188610 "mService"
	const_attribute private explicit_type "IDevicePolicyManager"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1773442 "DevicePolicyManager"
	private explicit_return_type ""
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "handler" explicit_type "Handler"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1773570 "create"
	class_operation public return_type class_ref 307842 // DevicePolicyManager
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "handler" explicit_type "Handler"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      attribute 1188738 "ACTION_PROVISION_MANAGED_PROFILE"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.PROVISION_MANAGED_PROFILE\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Activity action: Starts the provisioning flow which sets up a managed profile.

<p>A managed profile allows data separation for example for the usage of a
device as a personal and corporate device. The user which provisioning is started from and
the managed profile share a launcher.

<p>This intent will typically be sent by a mobile device management application (mdm).
Provisioning adds a managed profile and sets the mdm as the profile owner who has full
control over the profile

<p>This intent must contain the extra {@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME}.

<p> When managed provisioning has completed, an intent of the type
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE} is broadcasted to the
managed profile.

<p> If provisioning fails, the managedProfile is removed so the device returns to its
previous state.

<p>Input: Nothing.</p>
<p>Output: Nothing</p>
"
      end

      attribute 1188866 "EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE"
	class_attribute const_attribute public explicit_type "String"
	init_value "
            \"android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A {@link android.os.Parcelable} extra of type {@link android.os.PersistableBundle} that allows
a mobile device management application that starts managed profile provisioning to pass data
to itself on the managed profile when provisioning completes. The mobile device management
application sends this extra in an intent with the action
{@link #ACTION_PROVISION_MANAGED_PROFILE} and receives it in
{@link DeviceAdminReceiver#onProfileProvisioningComplete} via an intent with the action
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE}. The bundle is not changed
during the managed profile provisioning.
"
      end

      attribute 1188994 "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the package name of the mobile device management application that
will be set as the profile owner or device owner.

<p>If an application starts provisioning directly via an intent with action
{@link #ACTION_PROVISION_MANAGED_PROFILE} this package has to match the package name of the
application that started provisioning. The package will be set as profile owner in that case.

<p>This package is set as device owner when device owner provisioning is started by an Nfc
message containing an Nfc record with MIME type {@link #MIME_TYPE_PROVISIONING_NFC}.
"
      end

      attribute 1189122 "EXTRA_PROVISIONING_EMAIL_ADDRESS"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_EMAIL_ADDRESS\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra that, holds the email address of the account which a managed profile is
created for. Used with {@link #ACTION_PROVISION_MANAGED_PROFILE} and
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE}.

<p> This extra is part of the {@link #EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE}.

<p> If the {@link #ACTION_PROVISION_MANAGED_PROFILE} intent that starts managed provisioning
contains this extra, it is forwarded in the
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE} intent to the mobile
device management application that was set as the profile owner during provisioning.
It is usually used to avoid that the user has to enter their email address twice.
"
      end

      attribute 1189250 "EXTRA_PROVISIONING_TIME_ZONE"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_TIME_ZONE\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the time zone {@link android.app.AlarmManager} that the device
will be set to.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1189378 "EXTRA_PROVISIONING_LOCAL_TIME"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_LOCAL_TIME\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A Long extra holding the wall clock time (in milliseconds) to be set on the device's
{@link android.app.AlarmManager}.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1189506 "EXTRA_PROVISIONING_LOCALE"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_LOCALE\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the {@link java.util.Locale} that the device will be set to.
Format: xx_yy, where xx is the language code, and yy the country code.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1189634 "EXTRA_PROVISIONING_WIFI_SSID"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_WIFI_SSID\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the ssid of the wifi network that should be used during nfc device
owner provisioning for downloading the mobile device management application.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1189762 "EXTRA_PROVISIONING_WIFI_HIDDEN"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_WIFI_HIDDEN\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A boolean extra indicating whether the wifi network in {@link #EXTRA_PROVISIONING_WIFI_SSID}
is hidden or not.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1189890 "EXTRA_PROVISIONING_WIFI_SECURITY_TYPE"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_WIFI_SECURITY_TYPE\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra indicating the security type of the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1190018 "EXTRA_PROVISIONING_WIFI_PASSWORD"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_WIFI_PASSWORD\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the password of the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1190146 "EXTRA_PROVISIONING_WIFI_PROXY_HOST"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_WIFI_PROXY_HOST\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the proxy host for the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1190274 "EXTRA_PROVISIONING_WIFI_PROXY_PORT"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_WIFI_PROXY_PORT\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An int extra holding the proxy port for the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1190402 "EXTRA_PROVISIONING_WIFI_PROXY_BYPASS"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_WIFI_PROXY_BYPASS\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the proxy bypass for the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1190530 "EXTRA_PROVISIONING_WIFI_PAC_URL"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_WIFI_PAC_URL\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the proxy auto-config (PAC) URL for the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1190658 "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding a url that specifies the download location of the device admin
package. When not provided it is assumed that the device admin package is already installed.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1190786 "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding a http cookie header which should be used in the http request to the
url specified in {@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION}.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1190914 "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A String extra holding the SHA-1 checksum of the file at download location specified in
{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION}. If this doesn't match
the file at the download location an error will be shown to the user and the user will be
asked to factory reset the device.

<p>Use in an Nfc record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an Nfc bump.
"
      end

      attribute 1191042 "MIME_TYPE_PROVISIONING_NFC"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"application/com.android.managedprovisioning\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This MIME type is used for starting the Device Owner provisioning.

<p>During device owner provisioning a device admin app is set as the owner of the device.
A device owner has full control over the device. The device owner can not be modified by the
user and the only way of resetting the device is if the device owner app calls a factory
reset.

<p> A typical use case would be a device that is owned by a company, but used by either an
employee or client.

<p> The Nfc message should be send to an unprovisioned device.

<p>The Nfc record must contain a serialized {@link java.util.Properties} object which
contains the following properties:
<ul>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME}</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION}</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER}, optional</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM}</li>
<li>{@link #EXTRA_PROVISIONING_LOCAL_TIME} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_TIME_ZONE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOCALE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_SSID}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_HIDDEN} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_SECURITY_TYPE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PASSWORD}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_HOST}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_PORT} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_BYPASS}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PAC_URL}, optional</li></ul>

<p> When device owner provisioning has completed, an intent of the type
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE} is broadcasted to the
device owner.

<p>
If provisioning fails, the device is factory reset.

<p>Input: Nothing.</p>
<p>Output: Nothing</p>
"
      end

      attribute 1191170 "ACTION_ADD_DEVICE_ADMIN"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.ADD_DEVICE_ADMIN\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Activity action: ask the user to add a new device administrator to the system.
The desired policy is the ComponentName of the policy in the
{@link #EXTRA_DEVICE_ADMIN} extra field.  This will invoke a UI to
bring the user through adding the device administrator to the system (or
allowing them to reject it).

<p>You can optionally include the {@link #EXTRA_ADD_EXPLANATION}
field to provide the user with additional explanation (in addition
to your component's description) about what is being added.

<p>If your administrator is already active, this will ordinarily return immediately (without
user intervention).  However, if your administrator has been updated and is requesting
additional uses-policy flags, the user will be presented with the new list.  New policies
will not be available to the updated administrator until the user has accepted the new list.
"
      end

      attribute 1191298 "ACTION_SET_PROFILE_OWNER"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.SET_PROFILE_OWNER\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide
Activity action: ask the user to add a new device administrator as the profile owner
for this user. Only system privileged apps that have MANAGE_USERS and MANAGE_DEVICE_ADMINS
permission can call this API.

<p>The ComponentName of the profile owner admin is pass in {@link #EXTRA_DEVICE_ADMIN} extra
field. This will invoke a UI to bring the user through adding the profile owner admin
to remotely control restrictions on the user.

<p>The intent must be invoked via {@link Activity#startActivityForResult()} to receive the
result of whether or not the user approved the action. If approved, the result will
be {@link Activity#RESULT_OK} and the component will be set as an active admin as well
as a profile owner.

<p>You can optionally include the {@link #EXTRA_ADD_EXPLANATION}
field to provide the user with additional explanation (in addition
to your component's description) about what is being added.

<p>If there is already a profile owner active or the caller doesn't have the required
permissions, the operation will return a failure result.
"
      end

      attribute 1191426 "EXTRA_PROFILE_OWNER_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.PROFILE_OWNER_NAME\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide
Name of the profile owner admin that controls the user.
"
      end

      attribute 1191554 "ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Activity action: send when any policy admin changes a policy.
This is generally used to find out when a new policy is in effect.

@hide
"
      end

      attribute 1191682 "EXTRA_DEVICE_ADMIN"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.DEVICE_ADMIN\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The ComponentName of the administrator component.

@see #ACTION_ADD_DEVICE_ADMIN
"
      end

      attribute 1191810 "EXTRA_ADD_EXPLANATION"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.extra.ADD_EXPLANATION\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An optional CharSequence providing additional explanation for why the
admin is being added.

@see #ACTION_ADD_DEVICE_ADMIN
"
      end

      attribute 1191938 "ACTION_SET_NEW_PASSWORD"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.SET_NEW_PASSWORD\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Activity action: have the user enter a new password. This activity should
be launched after using {@link #setPasswordQuality(ComponentName, int)},
or {@link #setPasswordMinimumLength(ComponentName, int)} to have the user
enter a new password that meets the current requirements. You can use
{@link #isActivePasswordSufficient()} to determine whether you need to
have the user select a new password in order to meet the current
constraints. Upon being resumed from this activity, you can check the new
password characteristics to see if they are sufficient.
"
      end

      attribute 1192066 "FLAG_PARENT_CAN_ACCESS_MANAGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag used by {@link #addCrossProfileIntentFilter} to allow access
<em>from</em> a managed profile <em>to</em> its parent. That is, any
matching activities in the parent profile are included in the
disambiguation list shown when an app in the managed profile calls
{@link Activity#startActivity(Intent)}.
"
      end

      attribute 1192194 "FLAG_MANAGED_CAN_ACCESS_PARENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag used by {@link #addCrossProfileIntentFilter} to allow access
<em>from</em> a parent <em>to</em> its managed profile. That is, any
matching activities in the managed profile are included in the
disambiguation list shown when an app in the parent profile calls
{@link Activity#startActivity(Intent)}.
"
      end

      operation 1773698 "isAdminActive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "who" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the given administrator component is currently
active (enabled) in the system."
      end

      operation 1773826 "isAdminActiveAsUser"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "who" explicit_type "ComponentName"
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #isAdminActive(ComponentName)
@hide"
      end

      operation 1773954 "getActiveAdmins"
	public explicit_return_type "List<ComponentName>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a list of all currently active device administrator's component
names.  Note that if there are no administrators than null may be
returned."
      end

      operation 1774082 "getActiveAdminsAsUser"
	public explicit_return_type "List<ComponentName>"
	nparams 1
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #getActiveAdmins()
@hide"
      end

      operation 1774210 "packageHasActiveAdmins"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by package administration code to determine if a package can be stopped
or uninstalled.
@hide"
      end

      operation 1774338 "removeActiveAdmin"
	public explicit_return_type "void"
	nparams 1
	  param inout name "who" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a current administration component.  This can only be called
by the application that owns the administration component; if you
try to remove someone else's component, a security exception will be
thrown."
      end

      operation 1774466 "hasGrantedPolicy"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "usesPolicy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if an administrator has been granted a particular device policy.  This can
be used to check if the administrator was activated under an earlier set of policies,
but requires additional policies after an upgrade.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.  Must be
an active administrator, or an exception will be thrown.
@param usesPolicy Which uses-policy to check, as defined in {@link DeviceAdminInfo}."
      end

      attribute 1192322 "PASSWORD_QUALITY_UNSPECIFIED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the policy has no requirements
for the password.  Note that quality constants are ordered so that higher
values are more restrictive.
"
      end

      attribute 1192450 "PASSWORD_QUALITY_BIOMETRIC_WEAK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the policy allows for low-security biometric
recognition technology.  This implies technologies that can recognize the identity of
an individual to about a 3 digit PIN (false detection is less than 1 in 1,000).
Note that quality constants are ordered so that higher values are more restrictive.
"
      end

      attribute 1192578 "PASSWORD_QUALITY_SOMETHING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the policy requires some kind
of password, but doesn't care what it is.  Note that quality constants
are ordered so that higher values are more restrictive.
"
      end

      attribute 1192706 "PASSWORD_QUALITY_NUMERIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least numeric characters.  Note that quality
constants are ordered so that higher values are more restrictive.
"
      end

      attribute 1192834 "PASSWORD_QUALITY_NUMERIC_COMPLEX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x30000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least numeric characters with no repeating (4444)
or ordered (1234, 4321, 2468) sequences.  Note that quality
constants are ordered so that higher values are more restrictive.
"
      end

      attribute 1192962 "PASSWORD_QUALITY_ALPHABETIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x40000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least alphabetic (or other symbol) characters.
Note that quality constants are ordered so that higher values are more
restrictive.
"
      end

      attribute 1193090 "PASSWORD_QUALITY_ALPHANUMERIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x50000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least <em>both></em> numeric <em>and</em>
alphabetic (or other symbol) characters.  Note that quality constants are
ordered so that higher values are more restrictive.
"
      end

      attribute 1193218 "PASSWORD_QUALITY_COMPLEX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x60000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least a letter, a numerical digit and a special
symbol, by default. With this password quality, passwords can be
restricted to contain various sets of characters, like at least an
uppercase letter, etc. These are specified using various methods,
like {@link #setPasswordMinimumLowerCase(ComponentName, int)}. Note
that quality constants are ordered so that higher values are more
restrictive.
"
      end

      operation 1774594 "setPasswordQuality"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "quality" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
password restrictions it is imposing.  After setting this, the user
will not be able to enter a new password that is not at least as
restrictive as what has been set.  Note that the current password
will remain until the user has set a new one, so the change does not
take place immediately.  To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} after setting this value.

<p>Quality constants are ordered so that higher values are more restrictive;
thus the highest requested quality constant (between the policy set here,
the user's preference, and any other considerations) is the one that
is in effect.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param quality The new desired quality.  One of
{@link #PASSWORD_QUALITY_UNSPECIFIED}, {@link #PASSWORD_QUALITY_SOMETHING},
{@link #PASSWORD_QUALITY_NUMERIC}, {@link #PASSWORD_QUALITY_NUMERIC_COMPLEX},
{@link #PASSWORD_QUALITY_ALPHABETIC}, {@link #PASSWORD_QUALITY_ALPHANUMERIC}
or {@link #PASSWORD_QUALITY_COMPLEX}."
      end

      operation 1774722 "getPasswordQuality"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current minimum password quality for all admins of this user
and its profiles or a particular one.
@param admin The name of the admin component to check, or null to aggregate
all admins."
      end

      operation 1774850 "getPasswordQuality"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1774978 "setPasswordMinimumLength"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
minimum allowed password length.  After setting this, the user
will not be able to enter a new password that is not at least as
restrictive as what has been set.  Note that the current password
will remain until the user has set a new one, so the change does not
take place immediately.  To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} after setting this value.  This
constraint is only imposed if the administrator has also requested either
{@link #PASSWORD_QUALITY_NUMERIC}, {@link #PASSWORD_QUALITY_NUMERIC_COMPLEX},
{@link #PASSWORD_QUALITY_ALPHABETIC}, {@link #PASSWORD_QUALITY_ALPHANUMERIC},
or {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired minimum password length.  A value of 0
means there is no restriction."
      end

      operation 1775106 "getPasswordMinimumLength"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current minimum password length for all admins of this
user and its profiles or a particular one.
@param admin The name of the admin component to check, or null to aggregate
all admins."
      end

      operation 1775234 "getPasswordMinimumLength"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1775362 "setPasswordMinimumUpperCase"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
minimum number of upper case letters required in the password. After
setting this, the user will not be able to enter a new password that is
not at least as restrictive as what has been set. Note that the current
password will remain until the user has set a new one, so the change does
not take place immediately. To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} after setting this value. This
constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The
default value is 0.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param length The new desired minimum number of upper case letters
           required in the password. A value of 0 means there is no
           restriction."
      end

      operation 1775490 "getPasswordMinimumUpperCase"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of upper case letters required in the
password for all admins of this user and its profiles or a particular one.
This is the same value as set by
{#link {@link #setPasswordMinimumUpperCase(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

@param admin The name of the admin component to check, or null to
           aggregate all admins.
@return The minimum number of upper case letters required in the
        password."
      end

      operation 1775618 "getPasswordMinimumUpperCase"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1775746 "setPasswordMinimumLowerCase"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
minimum number of lower case letters required in the password. After
setting this, the user will not be able to enter a new password that is
not at least as restrictive as what has been set. Note that the current
password will remain until the user has set a new one, so the change does
not take place immediately. To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} after setting this value. This
constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The
default value is 0.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param length The new desired minimum number of lower case letters
           required in the password. A value of 0 means there is no
           restriction."
      end

      operation 1775874 "getPasswordMinimumLowerCase"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of lower case letters required in the
password for all admins of this user and its profiles or a particular one.
This is the same value as set by
{#link {@link #setPasswordMinimumLowerCase(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

@param admin The name of the admin component to check, or null to
           aggregate all admins.
@return The minimum number of lower case letters required in the
        password."
      end

      operation 1776002 "getPasswordMinimumLowerCase"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1776130 "setPasswordMinimumLetters"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
minimum number of letters required in the password. After setting this,
the user will not be able to enter a new password that is not at least as
restrictive as what has been set. Note that the current password will
remain until the user has set a new one, so the change does not take
place immediately. To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} after setting this value. This
constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The
default value is 1.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param length The new desired minimum number of letters required in the
           password. A value of 0 means there is no restriction."
      end

      operation 1776258 "getPasswordMinimumLetters"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of letters required in the password for all
admins or a particular one. This is the same value as
set by {#link {@link #setPasswordMinimumLetters(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

@param admin The name of the admin component to check, or null to
           aggregate all admins.
@return The minimum number of letters required in the password."
      end

      operation 1776386 "getPasswordMinimumLetters"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1776514 "setPasswordMinimumNumeric"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
minimum number of numerical digits required in the password. After
setting this, the user will not be able to enter a new password that is
not at least as restrictive as what has been set. Note that the current
password will remain until the user has set a new one, so the change does
not take place immediately. To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} after setting this value. This
constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The
default value is 1.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param length The new desired minimum number of numerical digits required
           in the password. A value of 0 means there is no restriction."
      end

      operation 1776642 "getPasswordMinimumNumeric"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of numerical digits required in the password
for all admins of this user and its profiles or a particular one.
This is the same value as set by
{#link {@link #setPasswordMinimumNumeric(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

@param admin The name of the admin component to check, or null to
           aggregate all admins.
@return The minimum number of numerical digits required in the password."
      end

      operation 1776770 "getPasswordMinimumNumeric"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1776898 "setPasswordMinimumSymbols"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
minimum number of symbols required in the password. After setting this,
the user will not be able to enter a new password that is not at least as
restrictive as what has been set. Note that the current password will
remain until the user has set a new one, so the change does not take
place immediately. To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} after setting this value. This
constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The
default value is 1.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param length The new desired minimum number of symbols required in the
           password. A value of 0 means there is no restriction."
      end

      operation 1777026 "getPasswordMinimumSymbols"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of symbols required in the password for all
admins or a particular one. This is the same value as
set by {#link {@link #setPasswordMinimumSymbols(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

@param admin The name of the admin component to check, or null to
           aggregate all admins.
@return The minimum number of symbols required in the password."
      end

      operation 1777154 "getPasswordMinimumSymbols"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1777282 "setPasswordMinimumNonLetter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
minimum number of non-letter characters (numerical digits or symbols)
required in the password. After setting this, the user will not be able
to enter a new password that is not at least as restrictive as what has
been set. Note that the current password will remain until the user has
set a new one, so the change does not take place immediately. To prompt
the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} after
setting this value. This constraint is only imposed if the administrator
has also requested {@link #PASSWORD_QUALITY_COMPLEX} with
{@link #setPasswordQuality}. The default value is 0.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param length The new desired minimum number of letters required in the
           password. A value of 0 means there is no restriction."
      end

      operation 1777410 "getPasswordMinimumNonLetter"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of non-letter characters required in the
password for all admins of this user and its profiles or a particular one.
This is the same value as set by
{#link {@link #setPasswordMinimumNonLetter(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

@param admin The name of the admin component to check, or null to
           aggregate all admins.
@return The minimum number of letters required in the password."
      end

      operation 1777538 "getPasswordMinimumNonLetter"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1777666 "setPasswordHistoryLength"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the length
of the password history. After setting this, the user will not be able to
enter a new password that is the same as any password in the history. Note
that the current password will remain until the user has set a new one, so
the change does not take place immediately. To prompt the user for a new
password, use {@link #ACTION_SET_NEW_PASSWORD} after setting this value.
This constraint is only imposed if the administrator has also requested
either {@link #PASSWORD_QUALITY_NUMERIC}, {@link #PASSWORD_QUALITY_NUMERIC_COMPLEX}
{@link #PASSWORD_QUALITY_ALPHABETIC}, or {@link #PASSWORD_QUALITY_ALPHANUMERIC}
with {@link #setPasswordQuality}.

<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this
method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
       with.
@param length The new desired length of password history. A value of 0
       means there is no restriction."
      end

      operation 1777794 "setPasswordExpirationTimeout"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "timeout" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device admin to set the password expiration timeout. Calling this method
will restart the countdown for password expiration for the given admin, as will changing
the device password (for all admins).

<p>The provided timeout is the time delta in ms and will be added to the current time.
For example, to have the password expire 5 days from now, timeout would be
5 * 86400 * 1000 = 432000000 ms for timeout.

<p>To disable password expiration, a value of 0 may be used for timeout.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_EXPIRE_PASSWORD} to be able to call this
method; if it has not, a security exception will be thrown.

<p> Note that setting the password will automatically reset the expiration time for all
active admins. Active admins do not need to explicitly call this method in that case.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param timeout The limit (in ms) that a password can remain in effect. A value of 0
       means there is no restriction (unlimited)."
      end

      operation 1777922 "getPasswordExpirationTimeout"
	public explicit_return_type "long"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the password expiration timeout for the given admin. The expiration timeout is the
recurring expiration timeout provided in the call to
{@link #setPasswordExpirationTimeout(ComponentName, long)} for the given admin or the
aggregate of all policy administrators if admin is null.

@param admin The name of the admin component to check, or null to aggregate all admins.
@return The timeout for the given admin or the minimum of all timeouts"
      end

      operation 1778050 "getPasswordExpiration"
	public explicit_return_type "long"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current password expiration time for the given admin or an aggregate of
all admins of this user and its profiles if admin is null. If the password is
expired, this will return the time since the password expired as a negative number.
If admin is null, then a composite of all expiration timeouts is returned
- which will be the minimum of all timeouts.

@param admin The name of the admin component to check, or null to aggregate all admins.
@return The password expiration time, in ms."
      end

      operation 1778178 "getPasswordHistoryLength"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current password history length for all admins of this
user and its profiles or a particular one.
@param admin The name of the admin component to check, or null to aggregate
all admins.
@return The length of the password history"
      end

      operation 1778306 "getPasswordHistoryLength"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1778434 "getPasswordMaximumLength"
	public explicit_return_type "int"
	nparams 1
	  param in name "quality" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the maximum password length that the device supports for a
particular password quality.
@param quality The quality being interrogated.
@return Returns the maximum length that the user can enter."
      end

      operation 1778562 "isActivePasswordSufficient"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether the current password the user has set is sufficient
to meet the policy requirements (quality, minimum length) that have been
requested by the admins of this user and its profiles.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

@return Returns true if the password meets the current requirements, else false."
      end

      operation 1778690 "getCurrentFailedPasswordAttempts"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the number of times the user has failed at entering a
password since that last successful password entry.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to be able to call
this method; if it has not, a security exception will be thrown."
      end

      operation 1778818 "setMaximumFailedPasswordsForWipe"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "num" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setting this to a value greater than zero enables a built-in policy
that will perform a device wipe after too many incorrect
device-unlock passwords have been entered.  This built-in policy combines
watching for failed passwords and wiping the device, and requires
that you request both {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} and
{@link DeviceAdminInfo#USES_POLICY_WIPE_DATA}}.

<p>To implement any other policy (e.g. wiping data for a particular
application only, erasing or revoking credentials, or reporting the
failure to a server), you should implement
{@link DeviceAdminReceiver#onPasswordFailed(Context, android.content.Intent)}
instead.  Do not use this API, because if the maximum count is reached,
the device will be wiped immediately, and your callback will not be invoked.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param num The number of failed password attempts at which point the
device will wipe its data."
      end

      operation 1778946 "getMaximumFailedPasswordsForWipe"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current maximum number of login attempts that are allowed
before the device wipes itself, for all admins of this user and its profiles
or a particular one.
@param admin The name of the admin component to check, or null to aggregate
all admins."
      end

      operation 1779074 "getMaximumFailedPasswordsForWipe"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      attribute 1193346 "RESET_PASSWORD_REQUIRE_ENTRY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #resetPassword}: don't allow other admins to change
the password again until the user has entered it.
"
      end

      operation 1779202 "resetPassword"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "password" explicit_type "String"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force a new device unlock password (the password needed to access the
entire device, not for individual accounts) on the user.  This takes
effect immediately.
The given password must be sufficient for the
current password quality and length constraints as returned by
{@link #getPasswordQuality(ComponentName)} and
{@link #getPasswordMinimumLength(ComponentName)}; if it does not meet
these constraints, then it will be rejected and false returned.  Note
that the password may be a stronger quality (containing alphanumeric
characters when the requested quality is only numeric), in which case
the currently active quality will be increased to match.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_RESET_PASSWORD} to be able to call
this method; if it has not, a security exception will be thrown.

<p>Calling this from a managed profile will throw a security exception.

@param password The new password for the user.
@param flags May be 0 or {@link #RESET_PASSWORD_REQUIRE_ENTRY}.
@return Returns true if the password was applied, or false if it is
not acceptable for the current constraints."
      end

      operation 1779330 "setMaximumTimeToLock"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "timeMs" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
maximum time for user activity until the device will lock.  This limits
the length that the user can set.  It takes effect immediately.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_FORCE_LOCK} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param timeMs The new desired maximum time to lock in milliseconds.
A value of 0 means there is no restriction."
      end

      operation 1779458 "getMaximumTimeToLock"
	public explicit_return_type "long"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current maximum time to unlock for all admins of this user
and its profiles or a particular one.
@param admin The name of the admin component to check, or null to aggregate
all admins.
@return time in milliseconds for the given admin or the minimum value (strictest) of
all admins if admin is null. Returns 0 if there are no restrictions."
      end

      operation 1779586 "getMaximumTimeToLock"
	public explicit_return_type "long"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1779714 "lockNow"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make the device lock immediately, as if the lock screen timeout has
expired at the point of this call.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_FORCE_LOCK} to be able to call
this method; if it has not, a security exception will be thrown."
      end

      attribute 1193474 "WIPE_EXTERNAL_STORAGE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #wipeData(int)}: also erase the device's external
storage.
"
      end

      operation 1779842 "wipeData"
	public explicit_return_type "void"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ask the user data be wiped.  This will cause the device to reboot,
erasing all user data while next booting up.  External storage such
as SD cards will be also erased if the flag {@link #WIPE_EXTERNAL_STORAGE}
is set.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_WIPE_DATA} to be able to call
this method; if it has not, a security exception will be thrown.

@param flags Bit mask of additional options: currently 0 and
             {@link #WIPE_EXTERNAL_STORAGE} are supported."
      end

      operation 1779970 "setGlobalProxy"
	public explicit_return_type "ComponentName"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "proxySpec" explicit_type "Proxy"
	  param inout name "exclusionList" explicit_type "List<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
global proxy and exclusion list.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_SETS_GLOBAL_PROXY} to be able to call
this method; if it has not, a security exception will be thrown.
Only the first device admin can set the proxy. If a second admin attempts
to set the proxy, the {@link ComponentName} of the admin originally setting the
proxy will be returned. If successful in setting the proxy, null will
be returned.
The method can be called repeatedly by the device admin alrady setting the
proxy to update the proxy and exclusion list.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param proxySpec the global proxy desired. Must be an HTTP Proxy.
           Pass Proxy.NO_PROXY to reset the proxy.
@param exclusionList a list of domains to be excluded from the global proxy.
@return returns null if the proxy was successfully set, or a {@link ComponentName}
           of the device admin that sets thew proxy otherwise.
@hide"
      end

      operation 1780098 "setRecommendedGlobalProxy"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "proxyInfo" explicit_type "ProxyInfo"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a network-independent global HTTP proxy.  This is not normally what you want
for typical HTTP proxies - they are generally network dependent.  However if you're
doing something unusual like general internal filtering this may be useful.  On
a private network where the proxy is not accessible, you may break HTTP using this.

<p>This method requires the caller to be the device owner.

<p>This proxy is only a recommendation and it is possible that some apps will ignore it.
@see ProxyInfo

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param proxyInfo The a {@link ProxyInfo} object defining the new global
       HTTP proxy.  A {@code null} value will clear the global HTTP proxy."
      end

      operation 1780226 "getGlobalProxyAdmin"
	public explicit_return_type "ComponentName"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the component name setting the global proxy.
@return ComponentName object of the device admin that set the global proxy, or
           null if no admin has set the proxy.
@hide"
      end

      attribute 1193602 "ENCRYPTION_STATUS_UNSUPPORTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #setStorageEncryption} and {@link #getStorageEncryptionStatus}:
indicating that encryption is not supported.
"
      end

      attribute 1193730 "ENCRYPTION_STATUS_INACTIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #setStorageEncryption} and {@link #getStorageEncryptionStatus}:
indicating that encryption is supported, but is not currently active.
"
      end

      attribute 1193858 "ENCRYPTION_STATUS_ACTIVATING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #setStorageEncryption} and {@link #getStorageEncryptionStatus}:
indicating that encryption is not currently active, but is currently
being activated.  This is only reported by devices that support
encryption of data and only when the storage is currently
undergoing a process of becoming encrypted.  A device that must reboot and/or wipe data
to become encrypted will never return this value.
"
      end

      attribute 1193986 "ENCRYPTION_STATUS_ACTIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #setStorageEncryption} and {@link #getStorageEncryptionStatus}:
indicating that encryption is active.
"
      end

      attribute 1194114 "ACTION_START_ENCRYPTION"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.app.action.START_ENCRYPTION\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Activity action: begin the process of encrypting data on the device.  This activity should
be launched after using {@link #setStorageEncryption} to request encryption be activated.
After resuming from this activity, use {@link #getStorageEncryption}
to check encryption status.  However, on some devices this activity may never return, as
it may trigger a reboot and in some cases a complete data wipe of the device.
"
      end

      attribute 1194242 "KEYGUARD_DISABLE_FEATURES_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Widgets are enabled in keyguard
"
      end

      attribute 1194370 "KEYGUARD_DISABLE_WIDGETS_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable all keyguard widgets. Has no effect.
"
      end

      attribute 1194498 "KEYGUARD_DISABLE_SECURE_CAMERA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable the camera on secure keyguard screens (e.g. PIN/Pattern/Password)
"
      end

      attribute 1194626 "KEYGUARD_DISABLE_SECURE_NOTIFICATIONS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable showing all notifications on secure keyguard screens (e.g. PIN/Pattern/Password)
"
      end

      attribute 1194754 "KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Only allow redacted notifications on secure keyguard screens (e.g. PIN/Pattern/Password)
"
      end

      attribute 1194882 "KEYGUARD_DISABLE_TRUST_AGENTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Ignore trust agent state on secure keyguard screens
(e.g. PIN/Pattern/Password).
"
      end

      attribute 1195010 "KEYGUARD_DISABLE_FINGERPRINT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable fingerprint sensor on keyguard secure screens (e.g. PIN/Pattern/Password).
"
      end

      attribute 1195138 "KEYGUARD_DISABLE_FEATURES_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x7fffffff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable all current and future keyguard customizations.
"
      end

      operation 1780354 "setStorageEncryption"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "encrypt" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to
request that the storage system be encrypted.

<p>When multiple device administrators attempt to control device
encryption, the most secure, supported setting will always be
used.  If any device administrator requests device encryption,
it will be enabled;  Conversely, if a device administrator
attempts to disable device encryption while another
device administrator has enabled it, the call to disable will
fail (most commonly returning {@link #ENCRYPTION_STATUS_ACTIVE}).

<p>This policy controls encryption of the secure (application data) storage area.  Data
written to other storage areas may or may not be encrypted, and this policy does not require
or control the encryption of any other storage areas.
There is one exception:  If {@link android.os.Environment#isExternalStorageEmulated()} is
{@code true}, then the directory returned by
{@link android.os.Environment#getExternalStorageDirectory()} must be written to disk
within the encrypted storage area.

<p>Important Note:  On some devices, it is possible to encrypt storage without requiring
the user to create a device PIN or Password.  In this case, the storage is encrypted, but
the encryption key may not be fully secured.  For maximum security, the administrator should
also require (and check for) a pattern, PIN, or password.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param encrypt true to request encryption, false to release any previous request
@return the new request status (for all active admins) - will be one of
{@link #ENCRYPTION_STATUS_UNSUPPORTED}, {@link #ENCRYPTION_STATUS_INACTIVE}, or
{@link #ENCRYPTION_STATUS_ACTIVE}.  This is the value of the requests;  Use
{@link #getStorageEncryptionStatus()} to query the actual device state."
      end

      operation 1780482 "getStorageEncryption"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to
determine the requested setting for secure storage.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.  If null,
this will return the requested encryption setting as an aggregate of all active
administrators.
@return true if the admin(s) are requesting encryption, false if not."
      end

      operation 1780610 "getStorageEncryptionStatus"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to
determine the current encryption status of the device.

Depending on the returned status code, the caller may proceed in different
ways.  If the result is {@link #ENCRYPTION_STATUS_UNSUPPORTED}, the
storage system does not support encryption.  If the
result is {@link #ENCRYPTION_STATUS_INACTIVE}, use {@link
#ACTION_START_ENCRYPTION} to begin the process of encrypting or decrypting the
storage.  If the result is {@link #ENCRYPTION_STATUS_ACTIVATING} or
{@link #ENCRYPTION_STATUS_ACTIVE}, no further action is required.

@return current status of encryption. The value will be one of
{@link #ENCRYPTION_STATUS_UNSUPPORTED}, {@link #ENCRYPTION_STATUS_INACTIVE},
{@link #ENCRYPTION_STATUS_ACTIVATING}, or{@link #ENCRYPTION_STATUS_ACTIVE}."
      end

      operation 1780738 "getStorageEncryptionStatus"
	public explicit_return_type "int"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1780866 "installCaCert"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "certBuffer" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Installs the given certificate as a user CA.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param certBuffer encoded form of the certificate to install.

@return false if the certBuffer cannot be parsed or installation is
        interrupted, true otherwise."
      end

      operation 1780994 "uninstallCaCert"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "certBuffer" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uninstalls the given certificate from trusted user CAs, if present.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param certBuffer encoded form of the certificate to remove."
      end

      operation 1781122 "getInstalledCaCerts"
	public explicit_return_type "List<byte[]>"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all CA certificates that are currently trusted, excluding system CA certificates.
If a user has installed any certificates by other means than device policy these will be
included too.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return a List of byte[] arrays, each encoding one user CA certificate."
      end

      operation 1781250 "uninstallAllUserCaCerts"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uninstalls all custom trusted CA certificates from the profile. Certificates installed by
means other than device policy will also be removed, except for system CA certificates.

@param admin Which {@link DeviceAdminReceiver} this request is associated with."
      end

      operation 1781378 "hasCaCertInstalled"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "certBuffer" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this certificate is installed as a trusted CA.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param certBuffer encoded form of the certificate to look up."
      end

      operation 1781506 "installKeyPair"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "who" explicit_type "ComponentName"
	  param inout name "privKey" explicit_type "PrivateKey"
	  param inout name "cert" explicit_type "Certificate"
	  param in name "alias" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device or profile owner to install a certificate and private key pair. The
keypair will be visible to all apps within the profile.

@param who Which {@link DeviceAdminReceiver} this request is associated with.
@param privKey The private key to install.
@param cert The certificate to install.
@param alias The private key alias under which to install the certificate. If a certificate
with that alias already exists, it will be overwritten.
@return {@code true} if the keys were installed, {@code false} otherwise."
      end

      operation 1781634 "getCaCertAlias"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "certBuffer" explicit_type "byte"
	nexceptions 1
	  explicit_exception "CertificateException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alias of a given CA certificate in the certificate store, or null if it
doesn't exist."
      end

      operation 1781762 "setCameraDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to disable all cameras
on the device, for this user. After setting this, no applications running as this user
will be able to access any cameras on the device.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled Whether or not the camera should be disabled."
      end

      operation 1781890 "getCameraDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not the device's cameras have been disabled for this user,
either by the current admin, if specified, or all admins.
@param admin The name of the admin component to check, or null to check if any admins
have disabled the camera"
      end

      operation 1782018 "getCameraDisabled"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1782146 "setScreenCaptureDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device/profile owner to set whether the screen capture is disabled. Disabling
screen capture also prevents the content from being shown on display devices that do not have
a secure video output. See {@link android.view.Display#FLAG_SECURE} for more details about
secure surfaces and secure displays.

<p>The calling device admin must be a device or profile owner. If it is not, a
security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled Whether screen capture is disabled or not."
      end

      operation 1782274 "getScreenCaptureDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not screen capture has been disabled by the current
admin, if specified, or all admins.
@param admin The name of the admin component to check, or null to check if any admins
have disabled screen capture."
      end

      operation 1782402 "getScreenCaptureDisabled"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1782530 "setAutoTimeRequired"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "required" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to set whether auto time is required. If auto time is
required the user cannot set the date and time, but has to use network date and time.

<p>Note: if auto time is required the user can still manually set the time zone.

<p>The calling device admin must be a device owner. If it is not, a security exception will
be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param required Whether auto time is set required or not."
      end

      operation 1782658 "getAutoTimeRequired"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if auto time is required."
      end

      operation 1782786 "setKeyguardDisabledFeatures"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "which" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to disable keyguard customizations,
such as widgets. After setting this, keyguard features will be disabled according to the
provided feature list.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES} to be able to call
this method; if it has not, a security exception will be thrown.

<p>Calling this from a managed profile will throw a security exception.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param which {@link #KEYGUARD_DISABLE_FEATURES_NONE} (default),
{@link #KEYGUARD_DISABLE_WIDGETS_ALL}, {@link #KEYGUARD_DISABLE_SECURE_CAMERA},
{@link #KEYGUARD_DISABLE_SECURE_NOTIFICATIONS}, {@link #KEYGUARD_DISABLE_TRUST_AGENTS},
{@link #KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS}, {@link #KEYGUARD_DISABLE_FEATURES_ALL}"
      end

      operation 1782914 "getKeyguardDisabledFeatures"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not features have been disabled in keyguard either by the current
admin, if specified, or all admins.
@param admin The name of the admin component to check, or null to check if any admins
have disabled features in keyguard.
@return bitfield of flags. See {@link #setKeyguardDisabledFeatures(ComponentName, int)}
for a list."
      end

      operation 1783042 "getKeyguardDisabledFeatures"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 1783170 "setActiveAdmin"
	public explicit_return_type "void"
	nparams 3
	  param inout name "policyReceiver" explicit_type "ComponentName"
	  param inout name "refreshing" explicit_type "boolean"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1783298 "setActiveAdmin"
	public explicit_return_type "void"
	nparams 2
	  param inout name "policyReceiver" explicit_type "ComponentName"
	  param inout name "refreshing" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1783426 "getAdminInfo"
	public return_type class_ref 307330 // DeviceAdminInfo
	nparams 1
	  param inout name "cn" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the DeviceAdminInfo as defined by the administrator's package info & meta-data
@hide"
      end

      operation 1783554 "getRemoveWarning"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "result" explicit_type "RemoteCallback"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1783682 "setActivePasswordState"
	public explicit_return_type "void"
	nparams 9
	  param in name "quality" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "letters" explicit_type "int"
	  param in name "uppercase" explicit_type "int"
	  param in name "lowercase" explicit_type "int"
	  param in name "numbers" explicit_type "int"
	  param in name "symbols" explicit_type "int"
	  param in name "nonletter" explicit_type "int"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1783810 "reportFailedPasswordAttempt"
	public explicit_return_type "void"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1783938 "reportSuccessfulPasswordAttempt"
	public explicit_return_type "void"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1784066 "setDeviceOwner"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "packageName" explicit_type "String"
	nexceptions 2
	  explicit_exception "IllegalArgumentException"
	  explicit_exception "IllegalStateException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Sets the given package as the device owner. The package must already be installed and there
shouldn't be an existing device owner registered, for this call to succeed. Also, this
method must be called before the device is provisioned.
@param packageName the package name of the application to be registered as the device owner.
@return whether the package was successfully registered as the device owner.
@throws IllegalArgumentException if the package name is null or invalid
@throws IllegalStateException if a device owner is already registered or the device has
        already been provisioned."
      end

      operation 1784194 "setDeviceOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "packageName" explicit_type "String"
	  param in name "ownerName" explicit_type "String"
	nexceptions 2
	  explicit_exception "IllegalArgumentException"
	  explicit_exception "IllegalStateException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Sets the given package as the device owner. The package must already be installed and there
shouldn't be an existing device owner registered, for this call to succeed. Also, this
method must be called before the device is provisioned.
@param packageName the package name of the application to be registered as the device owner.
@param ownerName the human readable name of the institution that owns this device.
@return whether the package was successfully registered as the device owner.
@throws IllegalArgumentException if the package name is null or invalid
@throws IllegalStateException if a device owner is already registered or the device has
        already been provisioned."
      end

      operation 1784322 "isDeviceOwnerApp"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to determine if a particular package has been registered as a Device Owner app.
A device owner app is a special device admin that cannot be deactivated by the user, once
activated as a device admin. It also cannot be uninstalled. To check if a particular
package is currently registered as the device owner app, pass in the package name from
{@link Context#getPackageName()} to this method.<p/>This is useful for device
admin apps that want to check if they are also registered as the device owner app. The
exact mechanism by which a device admin app is registered as a device owner app is defined by
the setup process.
@param packageName the package name of the app, to compare with the registered device owner
app, if any.
@return whether or not the package is registered as the device owner app."
      end

      operation 1784450 "isDeviceOwner"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Redirect to isDeviceOwnerApp."
      end

      operation 1784578 "clearDeviceOwnerApp"
	public explicit_return_type "void"
	nparams 1
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the current device owner.  The caller must be the device owner.

This function should be used cautiously as once it is called it cannot
be undone.  The device owner can only be set as a part of device setup
before setup completes.

@param packageName The package name of the device owner."
      end

      operation 1784706 "getDeviceOwner"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment " @hide "
      end

      operation 1784834 "getDeviceOwnerName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 1784962 "setActiveProfileOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "ownerName" explicit_type "String"
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "@hide
@deprecated Use #ACTION_SET_PROFILE_OWNER
Sets the given component as an active admin and registers the package as the profile
owner for this user. The package must already be installed and there shouldn't be
an existing profile owner registered for this user. Also, this method must be called
before the user setup has been completed.
<p>
This method can only be called by system apps that hold MANAGE_USERS permission and
MANAGE_DEVICE_ADMINS permission.
@param admin The component to register as an active admin and profile owner.
@param ownerName The user-visible name of the entity that is managing this user.
@return whether the admin was successfully registered as the profile owner.
@throws IllegalArgumentException if packageName is null, the package isn't installed, or
        the user has already been set up."
      end

      operation 1785090 "clearProfileOwner"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "@hide
Clears the active profile owner and removes all user restrictions. The caller must
be from the same package as the active profile owner for this user, otherwise a
SecurityException will be thrown.

@param admin The component to remove as the profile owner.
@return"
      end

      operation 1785218 "hasUserSetupCompleted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Checks if the user was already setup."
      end

      operation 1785346 "setProfileOwner"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "packageName" explicit_type "String"
	  param in name "ownerName" explicit_type "String"
	  param in name "userHandle" explicit_type "int"
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@deprecated Use setProfileOwner(ComponentName ...)
@hide
Sets the given package as the profile owner of the given user profile. The package must
already be installed and there shouldn't be an existing profile owner registered for this
user. Also, this method must be called before the user has been used for the first time.
@param packageName the package name of the application to be registered as profile owner.
@param ownerName the human readable name of the organisation associated with this DPM.
@param userHandle the userId to set the profile owner for.
@return whether the package was successfully registered as the profile owner.
@throws IllegalArgumentException if packageName is null, the package isn't installed, or
        the user has already been set up."
      end

      operation 1785474 "setProfileOwner"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "ownerName" explicit_type "String"
	  param in name "userHandle" explicit_type "int"
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Sets the given component as the profile owner of the given user profile. The package must
already be installed and there shouldn't be an existing profile owner registered for this
user. Only the system can call this API if the user has already completed setup.
@param admin the component name to be registered as profile owner.
@param ownerName the human readable name of the organisation associated with this DPM.
@param userHandle the userId to set the profile owner for.
@return whether the component was successfully registered as the profile owner.
@throws IllegalArgumentException if admin is null, the package isn't installed, or
        the user has already been set up."
      end

      operation 1785602 "setProfileEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the enabled state of the profile. A profile should be enabled only once it is ready to
be used. Only the profile owner can call this.

@see #isProfileOwnerApp

@param admin Which {@link DeviceAdminReceiver} this request is associated with."
      end

      operation 1785730 "setProfileName"
	public explicit_return_type "void"
	nparams 2
	  param inout name "who" explicit_type "ComponentName"
	  param in name "profileName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the profile. In the device owner case it sets the name of the user
which it is called from. Only a profile owner or device owner can call this. If this is
never called by the profile or device owner, the name will be set to default values.

@see #isProfileOwnerApp
@see #isDeviceOwnerApp

@param profileName The name of the profile."
      end

      operation 1785858 "isProfileOwnerApp"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to determine if a particular package is registered as the profile owner for the
current user. A profile owner is a special device admin that has additional privileges
within the profile.

@param packageName The package name of the app to compare with the registered profile owner.
@return Whether or not the package is registered as the profile owner."
      end

      operation 1785986 "getProfileOwner"
	public explicit_return_type "ComponentName"
	nparams 0
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "@hide
@return the packageName of the owner of the given user profile or null if no profile
owner has been set for that user.
@throws IllegalArgumentException if the userId is invalid."
      end

      operation 1786114 "getProfileOwnerAsUser"
	public explicit_return_type "ComponentName"
	nparams 1
	  param in name "userId" explicit_type "int"
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #getProfileOwner()
@hide"
      end

      operation 1786242 "getProfileOwnerName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
@return the human readable name of the organisation associated with this DPM or null if
        one is not set.
@throws IllegalArgumentException if the userId is invalid."
      end

      operation 1786370 "getProfileOwnerNameAsUser"
	public explicit_return_type "String"
	nparams 1
	  param in name "userId" explicit_type "int"
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "@hide
@param user The user for whom to fetch the profile owner name, if any.
@return the human readable name of the organisation associated with this profile owner or
        null if one is not set.
@throws IllegalArgumentException if the userId is invalid."
      end

      operation 1786498 "addPersistentPreferredActivity"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "filter" explicit_type "IntentFilter"
	  param inout name "activity" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner or device owner to add a default intent handler activity for
intents that match a certain intent filter. This activity will remain the default intent
handler even if the set of potential event handlers for the intent filter changes and if
the intent preferences are reset.

<p>The default disambiguation mechanism takes over if the activity is not installed
(anymore). When the activity is (re)installed, it is automatically reset as default
intent handler for the filter.

<p>The calling device admin must be a profile owner or device owner. If it is not, a
security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param filter The IntentFilter for which a default handler is added.
@param activity The Activity that is added as default intent handler."
      end

      operation 1786626 "clearPackagePersistentPreferredActivities"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner or device owner to remove all persistent intent handler preferences
associated with the given package that were set by {@link #addPersistentPreferredActivity}.

<p>The calling device admin must be a profile owner. If it is not, a security
exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package for which preferences are removed."
      end

      operation 1786754 "setApplicationRestrictions"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	  param inout name "settings" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to set the application restrictions for a given target
application running in the profile.

<p>The provided {@link Bundle} consists of key-value pairs, where the types of values may be
boolean, int, String, or String[].

<p>The application restrictions are only made visible to the target application and the
profile or device owner.

<p>The calling device admin must be a profile or device owner; if it is not, a security
exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package to update restricted settings for.
@param settings A {@link Bundle} to be parsed by the receiving application, conveying a new
set of active restrictions."
      end

      operation 1786882 "setTrustAgentFeaturesEnabled"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "agent" explicit_type "ComponentName"
	  param inout name "features" explicit_type "List<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a list of features to enable for a TrustAgent component. This is meant to be
used in conjunction with {@link #KEYGUARD_DISABLE_TRUST_AGENTS}, which will disable all
trust agents but those with features enabled by this function call.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES} to be able to call
this method; if it has not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param agent Which component to enable features for.
@param features List of features to enable. Consult specific TrustAgent documentation for
the feature list.
@hide"
      end

      operation 1787010 "getTrustAgentFeaturesEnabled"
	public explicit_return_type "List<String>"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "agent" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets list of enabled features for the given TrustAgent component. If admin is
null, this will return the intersection of all features enabled for the given agent by all
admins.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param agent Which component to get enabled features for.
@return List of enabled features.
@hide"
      end

      operation 1787138 "setCrossProfileCallerIdDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "who" explicit_type "ComponentName"
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to set whether caller-Id information from
the managed profile will be shown in the parent profile, for incoming calls.

<p>The calling device admin must be a profile owner. If it is not, a
security exception will be thrown.

@param who Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled If true caller-Id information in the managed profile is not displayed."
      end

      operation 1787266 "getCrossProfileCallerIdDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "who" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to determine whether or not caller-Id
information has been disabled.

<p>The calling device admin must be a profile owner. If it is not, a
security exception will be thrown.

@param who Which {@link DeviceAdminReceiver} this request is associated with."
      end

      operation 1787394 "getCrossProfileCallerIdDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "userHandle" explicit_type "UserHandle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not caller-Id information has been disabled.

@param userHandle The user for whom to check the caller-id permission
@hide"
      end

      operation 1787522 "addCrossProfileIntentFilter"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "filter" explicit_type "IntentFilter"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile so that some intents sent in the managed
profile can also be resolved in the parent, or vice versa.
@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param filter The {@link IntentFilter} the intent has to match to be also resolved in the
other profile
@param flags {@link DevicePolicyManager#FLAG_MANAGED_CAN_ACCESS_PARENT} and
{@link DevicePolicyManager#FLAG_PARENT_CAN_ACCESS_MANAGED} are supported."
      end

      operation 1787650 "clearCrossProfileIntentFilters"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to remove the cross-profile intent filters
that go from the managed profile to the parent, or from the parent to the managed profile.
Only removes those that have been set by the profile owner.
@param admin Which {@link DeviceAdminReceiver} this request is associated with."
      end

      operation 1787778 "setPermittedAccessibilityServices"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "packageNames" explicit_type "List<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to set the permitted accessibility services. When
set by a device owner or profile owner the restriction applies to all profiles of the
user the device owner or profile owner is an admin for.

By default the user can use any accessiblity service. When zero or more packages have
been added, accessiblity services that are not in the list and not part of the system
can not be enabled by the user.

<p> Calling with a null value for the list disables the restriction so that all services
can be used, calling with an empty list only allows the builtin system's services.

<p> System accesibility services are always available to the user the list can't modify
this.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageNames List of accessibility service package names.

@return true if setting the restriction succeeded. It fail if there is
one or more non-system accessibility services enabled, that are not in the list."
      end

      operation 1787906 "getPermittedAccessibilityServices"
	public explicit_return_type "List<String>"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of permitted accessibility services set by this device or profile owner.

<p>An empty list means no accessibility services except system services are allowed.
Null means all accessibility services are allowed.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return List of accessiblity service package names."
      end

      operation 1788034 "getPermittedAccessibilityServices"
	public explicit_return_type "List<String>"
	nparams 1
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Returns the list of accessibility services permitted by the device or profiles
owners of this user.

<p>Null means all accessibility services are allowed, if a non-null list is returned
it will contain the intersection of the permitted lists for any device or profile
owners that apply to this user. It will also include any system accessibility services.

@param userId which user to check for.
@return List of accessiblity service package names.
@hide"
      end

      operation 1788162 "setPermittedInputMethods"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "packageNames" explicit_type "List<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to set the permitted input methods services. When
set by a device owner or profile owner the restriction applies to all profiles of the
user the device owner or profile owner is an admin for.

By default the user can use any input method. When zero or more packages have
been added, input method that are not in the list and not part of the system
can not be enabled by the user.

This method will fail if it is called for a admin that is not for the foreground user
or a profile of the foreground user.

<p> Calling with a null value for the list disables the restriction so that all input methods
can be used, calling with an empty list disables all but the system's own input methods.

<p> System input methods are always available to the user this method can't modify this.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageNames List of input method package names.
@return true if setting the restriction succeeded. It will fail if there is
    one or more input method enabled, that are not in the list or user if the foreground
    user."
      end

      operation 1788290 "getPermittedInputMethods"
	public explicit_return_type "List<String>"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of permitted input methods set by this device or profile owner.

<p>An empty list means no input methods except system input methods are allowed.
Null means all input methods are allowed.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return List of input method package names."
      end

      operation 1788418 "getPermittedInputMethodsForCurrentUser"
	public explicit_return_type "List<String>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Returns the list of input methods permitted by the device or profiles
owners of the current user.

<p>Null means all input methods are allowed, if a non-null list is returned
it will contain the intersection of the permitted lists for any device or profile
owners that apply to this user. It will also include any system input methods.

@return List of input method package names.
@hide"
      end

      operation 1788546 "createUser"
	public explicit_return_type "UserHandle"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "name" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to create a user with the specified name. The UserHandle returned
by this method should not be persisted as user handles are recycled as users are removed and
created. If you need to persist an identifier for this user, use
{@link UserManager#getSerialNumberForUser}.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param name the user's name
@see UserHandle
@return the UserHandle object for the created user, or null if the user could not be created."
      end

      operation 1788674 "createAndInitializeUser"
	public explicit_return_type "UserHandle"
	nparams 5
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "name" explicit_type "String"
	  param in name "ownerName" explicit_type "String"
	  param inout name "profileOwnerComponent" explicit_type "ComponentName"
	  param inout name "adminExtras" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to create a user with the specified name. The UserHandle returned
by this method should not be persisted as user handles are recycled as users are removed and
created. If you need to persist an identifier for this user, use
{@link UserManager#getSerialNumberForUser}.  The new user will be started in the background
immediately.

<p> profileOwnerComponent is the {@link DeviceAdminReceiver} to be the profile owner as well
as registered as an active admin on the new user.  The profile owner package will be
installed on the new user if it already is installed on the device.

<p>If the optionalInitializeData is not null, then the extras will be passed to the
profileOwnerComponent when onEnable is called.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param name the user's name
@param ownerName the human readable name of the organisation associated with this DPM.
@param profileOwnerComponent The {@link DeviceAdminReceiver} that will be an active admin on
     the user.
@param adminExtras Extras that will be passed to onEnable of the admin receiver
     on the new user.
@see UserHandle
@return the UserHandle object for the created user, or null if the user could not be created."
      end

      operation 1788802 "removeUser"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "userHandle" explicit_type "UserHandle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to remove a user and all associated data. The primary user can
not be removed.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param userHandle the user to remove.
@return {@code true} if the user was removed, {@code false} otherwise."
      end

      operation 1788930 "switchUser"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "userHandle" explicit_type "UserHandle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to switch the specified user to the foreground.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param userHandle the user to switch to; null will switch to primary.
@return {@code true} if the switch was successful, {@code false} otherwise.

@see Intent#ACTION_USER_FOREGROUND"
      end

      operation 1789058 "getApplicationRestrictions"
	public explicit_return_type "Bundle"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to get the application restrictions for a given target
application running in the profile.

<p>The calling device admin must be a profile or device owner; if it is not, a security
exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package to fetch restricted settings of.
@return {@link Bundle} of settings corresponding to what was set last time
{@link DevicePolicyManager#setApplicationRestrictions} was called, or an empty {@link Bundle}
if no restrictions have been set."
      end

      operation 1789186 "addUserRestriction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to set a user restriction specified
by the key.
<p>
The calling device admin must be a profile or device owner; if it is not,
a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param key The key of the restriction. See the constants in
           {@link android.os.UserManager} for the list of keys."
      end

      operation 1789314 "clearUserRestriction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to clear a user restriction specified
by the key.
<p>
The calling device admin must be a profile or device owner; if it is not,
a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated
           with.
@param key The key of the restriction. See the constants in
           {@link android.os.UserManager} for the list of keys."
      end

      operation 1789442 "setApplicationHidden"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	  param inout name "hidden" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device or profile owner to hide or unhide packages. When a package is hidden it
is unavailable for use, but the data and actual package file remain.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package to hide or unhide.
@param hidden {@code true} if the package should be hidden, {@code false} if it should be
                unhidden.
@return boolean Whether the hidden setting of the package was successfully updated."
      end

      operation 1789570 "isApplicationHidden"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device or profile owner to determine if a package is hidden.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package to retrieve the hidden status of.
@return boolean {@code true} if the package is hidden, {@code false} otherwise."
      end

      operation 1789698 "enableSystemApp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owner to re-enable a system app that was disabled by default
when the user was initialized.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The package to be re-enabled in the current profile."
      end

      operation 1789826 "enableSystemApp"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "intent" explicit_type "Intent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owner to re-enable system apps by intent that were disabled
by default when the user was initialized.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param intent An intent matching the app(s) to be installed. All apps that resolve for this
              intent will be re-enabled in the current profile.
@return int The number of activities that matched the intent and were installed."
      end

      operation 1789954 "setAccountManagementDisabled"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "accountType" explicit_type "String"
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner to disable account management for a specific type of account.

<p>The calling device admin must be a profile owner. If it is not, a
security exception will be thrown.

<p>When account management is disabled for an account type, adding or removing an account
of that type will not be possible.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param accountType For which account management is disabled or enabled.
@param disabled The boolean indicating that account management will be disabled (true) or
enabled (false)."
      end

      operation 1790082 "getAccountTypesWithManagementDisabled"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the array of accounts for which account management is disabled by the profile owner.

<p> Account management can be disabled/enabled by calling
{@link #setAccountManagementDisabled}.

@return a list of account types for which account management has been disabled.

@see #setAccountManagementDisabled"
      end

      operation 1790210 "getAccountTypesWithManagementDisabledAsUser"
	public explicit_return_type "String"
	nparams 1
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #getAccountTypesWithManagementDisabled()
@hide"
      end

      operation 1790338 "setLockTaskPackages"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "packages" explicit_type "String"
	nexceptions 1
	  explicit_exception "SecurityException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets which packages may enter lock task mode.

<p>Any packages that shares uid with an allowed package will also be allowed
to activate lock task.

This function can only be called by the device owner.
@param packages The list of packages allowed to enter lock task mode
@param admin Which {@link DeviceAdminReceiver} this request is associated with.

@see Activity#startLockTask()
@see DeviceAdminReceiver#onLockTaskModeChanged(Context, Intent, boolean, String)
@see UserManager#DISALLOW_CREATE_WINDOWS"
      end

      operation 1790466 "getLockTaskPackages"
	public explicit_return_type "String"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the list of packages allowed to start the lock task mode.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@hide"
      end

      operation 1790594 "isLockTaskPermitted"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pkg" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function lets the caller know whether the given component is allowed to start the
lock task mode.
@param pkg The package to check"
      end

      operation 1790722 "setGlobalSetting"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "setting" explicit_type "String"
	  param in name "value" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owners to update {@link Settings.Global} settings. Validation that the value
of the setting is in the correct form for the setting type should be performed by the caller.
<p>The settings that can be updated with this method are:
<ul>
<li>{@link Settings.Global#ADB_ENABLED}</li>
<li>{@link Settings.Global#AUTO_TIME}</li>
<li>{@link Settings.Global#AUTO_TIME_ZONE}</li>
<li>{@link Settings.Global#BLUETOOTH_ON}</li>
<li>{@link Settings.Global#DATA_ROAMING}</li>
<li>{@link Settings.Global#DEVELOPMENT_SETTINGS_ENABLED}</li>
<li>{@link Settings.Global#MODE_RINGER}</li>
<li>{@link Settings.Global#NETWORK_PREFERENCE}</li>
<li>{@link Settings.Global#USB_MASS_STORAGE_ENABLED}</li>
<li>{@link Settings.Global#WIFI_ON}</li>
<li>{@link Settings.Global#WIFI_SLEEP_POLICY}</li>
</ul>

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param setting The name of the setting to update.
@param value The value to update the setting to."
      end

      operation 1790850 "setSecureSetting"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "setting" explicit_type "String"
	  param in name "value" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to update {@link Settings.Secure} settings. Validation
that the value of the setting is in the correct form for the setting type should be performed
by the caller.
<p>The settings that can be updated by a profile or device owner with this method are:
<ul>
<li>{@link Settings.Secure#DEFAULT_INPUT_METHOD}</li>
<li>{@link Settings.Secure#SKIP_FIRST_USE_HINTS}</li>
</ul>
<p>A device owner can additionally update the following settings:
<ul>
<li>{@link Settings.Secure#LOCATION_MODE}</li>
</ul>
@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param setting The name of the setting to update.
@param value The value to update the setting to."
      end

      operation 1790978 "setRestrictionsProvider"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "provider" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Designates a specific service component as the provider for
making permission requests of a local or remote administrator of the user.
<p/>
Only a profile owner can designate the restrictions provider.
@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param provider The component name of the service that implements
{@link RestrictionsReceiver}. If this param is null,
it removes the restrictions provider previously assigned."
      end

      operation 1791106 "setMasterVolumeMuted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param inout name "on" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to set the master volume mute on or off.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param on {@code true} to mute master volume, {@code false} to turn mute off."
      end

      operation 1791234 "isMasterVolumeMuted"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to check whether the master volume mute is on or off.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return {@code true} if master volume is muted, {@code false} if it's not."
      end

      operation 1791362 "setUninstallBlocked"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	  param inout name "uninstallBlocked" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to change whether a user can uninstall
a package.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName package to change.
@param uninstallBlocked true if the user shouldn't be able to uninstall the package."
      end

      operation 1791490 "isUninstallBlocked"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to check whether a user has been blocked from
uninstalling a package.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName package to check.
@return true if the user shouldn't be able to uninstall the package."
      end

      operation 1791618 "addCrossProfileWidgetProvider"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile to enable widget providers from a
given package to be available in the parent profile. As a result the user will be able to
add widgets from the white-listed package running under the profile to a widget
host which runs under the parent profile, for example the home screen. Note that
a package may have zero or more provider components, where each component
provides a different widget type.
<p>
<strong>Note:</strong> By default no widget provider package is white-listed.
</p>

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The package from which widget providers are white-listed.
@return Whether the package was added.

@see #removeCrossProfileWidgetProvider(android.content.ComponentName, String)
@see #getCrossProfileWidgetProviders(android.content.ComponentName)"
      end

      operation 1791746 "removeCrossProfileWidgetProvider"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" explicit_type "ComponentName"
	  param in name "packageName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile to disable widget providers from a given
package to be available in the parent profile. For this method to take effect the
package should have been added via {@link #addCrossProfileWidgetProvider(
android.content.ComponentName, String)}.
<p>
<strong>Note:</strong> By default no widget provider package is white-listed.
</p>

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The package from which widget providers are no longer
    white-listed.
@return Whether the package was removed.

@see #addCrossProfileWidgetProvider(android.content.ComponentName, String)
@see #getCrossProfileWidgetProviders(android.content.ComponentName)"
      end

      operation 1791874 "getCrossProfileWidgetProviders"
	public explicit_return_type "List<String>"
	nparams 1
	  param inout name "admin" explicit_type "ComponentName"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile to query providers from which packages are
available in the parent profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return The white-listed package list.

@see #addCrossProfileWidgetProvider(android.content.ComponentName, String)
@see #removeCrossProfileWidgetProvider(android.content.ComponentName, String)"
      end
    end

    class 307970 "DevicePolicyManagerInternal"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Device policy manager local system service interface.

@hide Only for use within the system server."
      class 308098 "OnCrossProfileWidgetProvidersChangeListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1792002 "onCrossProfileWidgetProvidersChanged"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "profileId" explicit_type "int"
	    param inout name "packages" explicit_type "List<String>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the white-listed packages to show cross-profile widgets
have changed for a given user.

@param profileId The profile for which the white-listed packages changed.
@param packages The white-listed packages."
	end
      end

      operation 1792130 "getCrossProfileWidgetProviders"
	abstract public explicit_return_type "List<String>"
	nparams 1
	  param in name "profileId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the packages whose widget providers are white-listed to be
available in the parent user.

@param profileId The profile id.
@return The list of packages if such or empty list if there are
   no white-listed packages or the profile id is not a managed
   profile."
      end

      operation 1792258 "addOnCrossProfileWidgetProvidersChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 308098 // OnCrossProfileWidgetProvidersChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener for changes in the white-listed packages to show
cross-profile app widgets.

@param listener The listener to add."
      end
    end
  end

  deploymentview 150018 "admin"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 196994 "DeviceAdminInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.content.res.Resources.NotFoundException;
import android.graphics.drawable.Drawable;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.AttributeSet;
import android.util.Log;
import android.util.Printer;
import android.util.SparseArray;
import android.util.Xml;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
${definition}"
      associated_classes
	class_ref 307330 // DeviceAdminInfo
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 197122 "DeviceAdminReceiver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.accounts.AccountManager;
import android.annotation.SdkConstant;
import android.annotation.SdkConstant.SdkConstantType;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
${definition}"
      associated_classes
	class_ref 307586 // DeviceAdminReceiver
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 197250 "DevicePolicyManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.SdkConstant;
import android.annotation.SdkConstant.SdkConstantType;
import android.annotation.SystemApi;
import android.app.Activity;
import android.app.admin.IDevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.net.ProxyInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Process;
import android.os.RemoteCallback;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.Settings;
import android.security.Credentials;
import android.service.restrictions.RestrictionsReceiver;
import android.util.Log;
import com.android.org.conscrypt.TrustedCertificateStore;
import org.xmlpull.v1.XmlPullParserException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
${definition}"
      associated_classes
	class_ref 307842 // DevicePolicyManager
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 197378 "DevicePolicyManagerInternal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 307970 // DevicePolicyManagerInternal
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
