class SearchManager
!!!1736194.java!!!	SearchManager(inout context : Context, inout handler : Handler)
        mContext = context;
        mHandler = handler;
        mService = ISearchManager.Stub.asInterface(
                ServiceManager.getService(Context.SEARCH_SERVICE));
!!!1736322.java!!!	startSearch(in initialQuery : String, inout selectInitialQuery : boolean, inout launchActivity : ComponentName, inout appSearchData : Bundle, inout globalSearch : boolean) : void
        startSearch(initialQuery, selectInitialQuery, launchActivity,
                appSearchData, globalSearch, null);
!!!1736450.java!!!	startSearch(in initialQuery : String, inout selectInitialQuery : boolean, inout launchActivity : ComponentName, inout appSearchData : Bundle, inout globalSearch : boolean, inout sourceBounds : Rect) : void
        if (globalSearch) {
            startGlobalSearch(initialQuery, selectInitialQuery, appSearchData, sourceBounds);
            return;
        }

        UiModeManager uiModeManager = new UiModeManager();
        // Don't show search dialog on televisions.
        if (uiModeManager.getCurrentModeType() != Configuration.UI_MODE_TYPE_TELEVISION) {
            ensureSearchDialog();

            mSearchDialog.show(initialQuery, selectInitialQuery, launchActivity, appSearchData);
        }
!!!1736578.java!!!	ensureSearchDialog() : void
        if (mSearchDialog == null) {
            mSearchDialog = new SearchDialog(mContext, this);
            mSearchDialog.setOnCancelListener(this);
            mSearchDialog.setOnDismissListener(this);
        }
!!!1736706.java!!!	startGlobalSearch(in initialQuery : String, inout selectInitialQuery : boolean, inout appSearchData : Bundle, inout sourceBounds : Rect) : void
        ComponentName globalSearchActivity = getGlobalSearchActivity();
        if (globalSearchActivity == null) {
            Log.w(TAG, "No global search activity found.");
            return;
        }
        Intent intent = new Intent(INTENT_ACTION_GLOBAL_SEARCH);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setComponent(globalSearchActivity);
        // Make sure that we have a Bundle to put source in
        if (appSearchData == null) {
            appSearchData = new Bundle();
        } else {
            appSearchData = new Bundle(appSearchData);
        }
        // Set source to package name of app that starts global search, if not set already.
        if (!appSearchData.containsKey("source")) {
            appSearchData.putString("source", mContext.getPackageName());
        }
        intent.putExtra(APP_DATA, appSearchData);
        if (!TextUtils.isEmpty(initialQuery)) {
            intent.putExtra(QUERY, initialQuery);
        }
        if (selectInitialQuery) {
            intent.putExtra(EXTRA_SELECT_QUERY, selectInitialQuery);
        }
        intent.setSourceBounds(sourceBounds);
        try {
            if (DBG) Log.d(TAG, "Starting global search: " + intent.toUri(0));
            mContext.startActivity(intent);
        } catch (ActivityNotFoundException ex) {
            Log.e(TAG, "Global search activity not found: " + globalSearchActivity);
        }
!!!1736834.java!!!	getGlobalSearchActivities() : List<ResolveInfo>
        try {
            return mService.getGlobalSearchActivities();
        } catch (RemoteException ex) {
            Log.e(TAG, "getGlobalSearchActivities() failed: " + ex);
            return null;
        }
!!!1736962.java!!!	getGlobalSearchActivity() : ComponentName
        try {
            return mService.getGlobalSearchActivity();
        } catch (RemoteException ex) {
            Log.e(TAG, "getGlobalSearchActivity() failed: " + ex);
            return null;
        }
!!!1737090.java!!!	getWebSearchActivity() : ComponentName
        try {
            return mService.getWebSearchActivity();
        } catch (RemoteException ex) {
            Log.e(TAG, "getWebSearchActivity() failed: " + ex);
            return null;
        }
!!!1737218.java!!!	triggerSearch(in query : String, inout launchActivity : ComponentName, inout appSearchData : Bundle) : void
        if (!mAssociatedPackage.equals(launchActivity.getPackageName())) {
            throw new IllegalArgumentException("invoking app search on a different package " +
                    "not associated with this search manager");
        }
        if (query == null || TextUtils.getTrimmedLength(query) == 0) {
            Log.w(TAG, "triggerSearch called with empty query, ignoring.");
            return;
        }
        startSearch(query, false, launchActivity, appSearchData, false);
        mSearchDialog.launchQuerySearch();
!!!1737346.java!!!	stopSearch() : void
        if (mSearchDialog != null) {
            mSearchDialog.cancel();
        }
!!!1737474.java!!!	isVisible() : boolean
        return mSearchDialog == null? false : mSearchDialog.isShowing();
!!!1737858.java!!!	setOnDismissListener(in listener : SearchManager::OnDismissListener) : void
        mDismissListener = listener;
!!!1737986.java!!!	setOnCancelListener(inout listener : SearchManager::OnCancelListener) : void
        mCancelListener = listener;
!!!1738114.java!!!	onCancel(inout dialog : DialogInterface) : void
        if (mCancelListener != null) {
            mCancelListener.onCancel();
        }
!!!1738242.java!!!	onDismiss(inout dialog : DialogInterface) : void
        if (mDismissListener != null) {
            mDismissListener.onDismiss();
        }
!!!1738370.java!!!	getSearchableInfo(inout componentName : ComponentName) : SearchableInfo
        try {
            return mService.getSearchableInfo(componentName);
        } catch (RemoteException ex) {
            Log.e(TAG, "getSearchableInfo() failed: " + ex);
            return null;
        }
!!!1738498.java!!!	getSuggestions(inout searchable : SearchableInfo, in query : String) : Cursor
        return getSuggestions(searchable, query, -1);
!!!1738626.java!!!	getSuggestions(inout searchable : SearchableInfo, in query : String, in limit : int) : Cursor
        if (searchable == null) {
            return null;
        }

        String authority = searchable.getSuggestAuthority();
        if (authority == null) {
            return null;
        }

        Uri.Builder uriBuilder = new Uri.Builder()
                .scheme(ContentResolver.SCHEME_CONTENT)
                .authority(authority)
                .query("")  // TODO: Remove, workaround for a bug in Uri.writeToParcel()
                .fragment("");  // TODO: Remove, workaround for a bug in Uri.writeToParcel()

        // if content path provided, insert it now
        final String contentPath = searchable.getSuggestPath();
        if (contentPath != null) {
            uriBuilder.appendEncodedPath(contentPath);
        }

        // append standard suggestion query path
        uriBuilder.appendPath(SearchManager.SUGGEST_URI_PATH_QUERY);

        // get the query selection, may be null
        String selection = searchable.getSuggestSelection();
        // inject query, either as selection args or inline
        String[] selArgs = null;
        if (selection != null) {    // use selection if provided
            selArgs = new String[] { query };
        } else {                    // no selection, use REST pattern
            uriBuilder.appendPath(query);
        }

        if (limit > 0) {
            uriBuilder.appendQueryParameter(SUGGEST_PARAMETER_LIMIT, String.valueOf(limit));
        }

        Uri uri = uriBuilder.build();

        // finally, make the query
        return mContext.getContentResolver().query(uri, null, selection, selArgs, null);
!!!1738754.java!!!	getSearchablesInGlobalSearch() : SearchableInfo
        try {
            return mService.getSearchablesInGlobalSearch();
        } catch (RemoteException e) {
            Log.e(TAG, "getSearchablesInGlobalSearch() failed: " + e);
            return null;
        }
!!!1738882.java!!!	getAssistIntent(inout context : Context, inout inclContext : boolean) : Intent
        return getAssistIntent(context, inclContext, UserHandle.myUserId());
!!!1739010.java!!!	getAssistIntent(inout context : Context, inout inclContext : boolean, in userHandle : int) : Intent
        try {
            if (mService == null) {
                return null;
            }
            ComponentName comp = mService.getAssistIntent(userHandle);
            if (comp == null) {
                return null;
            }
            Intent intent = new Intent(Intent.ACTION_ASSIST);
            intent.setComponent(comp);
            if (inclContext) {
                IActivityManager am = ActivityManagerNative.getDefault();
                Bundle extras = am.getAssistContextExtras(0);
                if (extras != null) {
                    intent.replaceExtras(extras);
                }
            }
            return intent;
        } catch (RemoteException re) {
            Log.e(TAG, "getAssistIntent() failed: " + re);
            return null;
        }
!!!1739138.java!!!	launchAssistAction(in requestType : int, in hint : String, in userHandle : int) : boolean
        try {
            if (mService == null) {
                return false;
            }
            return mService.launchAssistAction(requestType, hint, userHandle);
        } catch (RemoteException re) {
            Log.e(TAG, "launchAssistAction() failed: " + re);
            return false;
        }
