class AppOpsManager
!!!1526274.java!!!	opToSwitch(in op : int) : int
        return sOpToSwitch[op];
!!!1526402.java!!!	opToName(in op : int) : String
        if (op == OP_NONE) return "NONE";
        return op < sOpNames.length ? sOpNames[op] : ("Unknown(" + op + ")");
!!!1526530.java!!!	opToPermission(in op : int) : String
        return sOpPerms[op];
!!!1526658.java!!!	opToRestriction(in op : int) : String
        return sOpRestrictions[op];
!!!1526786.java!!!	opAllowSystemBypassRestriction(in op : int) : boolean
        return sOpAllowSystemRestrictionBypass[op];
!!!1526914.java!!!	opToDefaultMode(in op : int) : int
        return sOpDefaultMode[op];
!!!1527042.java!!!	opAllowsReset(in op : int) : boolean
        return !sOpDisableReset[op];
!!!1529730.java!!!	AppOpsManager(inout context : Context, inout service : IAppOpsService)
        mContext = context;
        mService = service;
!!!1529858.java!!!	getPackagesForOps(inout ops : int) : AppOpsManager::PackageOps
        try {
            return mService.getPackagesForOps(ops);
        } catch (RemoteException e) {
        }
        return null;
!!!1529986.java!!!	getOpsForPackage(in uid : int, in packageName : String, inout ops : int) : AppOpsManager::PackageOps
        try {
            return mService.getOpsForPackage(uid, packageName, ops);
        } catch (RemoteException e) {
        }
        return null;
!!!1530114.java!!!	setMode(in code : int, in uid : int, in packageName : String, in mode : int) : void
        try {
            mService.setMode(code, uid, packageName, mode);
        } catch (RemoteException e) {
        }
!!!1530242.java!!!	setRestriction(in code : int, in usage : int, in mode : int, inout exceptionPackages : String) : void
        try {
            final int uid = Binder.getCallingUid();
            mService.setAudioRestriction(code, usage, uid, mode, exceptionPackages);
        } catch (RemoteException e) {
        }
!!!1530370.java!!!	resetAllModes() : void
        try {
            mService.resetAllModes();
        } catch (RemoteException e) {
        }
!!!1530498.java!!!	startWatchingMode(in op : String, in packageName : String, in callback : AppOpsManager::OnOpChangedListener) : void
        startWatchingMode(strOpToOp(op), packageName, callback);
!!!1530626.java!!!	startWatchingMode(in op : int, in packageName : String, in callback : AppOpsManager::OnOpChangedListener) : void
        synchronized (mModeWatchers) {
            IAppOpsCallback cb = mModeWatchers.get(callback);
            if (cb == null) {
                cb = new IAppOpsCallback.Stub() {
                    public void opChanged(int op, String packageName) {
                        if (callback instanceof OnOpChangedInternalListener) {
                            ((OnOpChangedInternalListener)callback).onOpChanged(op, packageName);
                        }
                        if (sOpToString[op] != null) {
                            callback.onOpChanged(sOpToString[op], packageName);
                        }
                    }
                };
                mModeWatchers.put(callback, cb);
            }
            try {
                mService.startWatchingMode(op, packageName, cb);
            } catch (RemoteException e) {
            }
        }
!!!1530754.java!!!	stopWatchingMode(inout callback : AppOpsManager::OnOpChangedListener) : void
        synchronized (mModeWatchers) {
            IAppOpsCallback cb = mModeWatchers.get(callback);
            if (cb != null) {
                try {
                    mService.stopWatchingMode(cb);
                } catch (RemoteException e) {
                }
            }
        }
!!!1530882.java!!!	buildSecurityExceptionMsg(in op : int, in uid : int, in packageName : String) : String
        return packageName + " from uid " + uid + " not allowed to perform " + sOpNames[op];
!!!1531010.java!!!	strOpToOp(in op : String) : int
        Integer val = sOpStrToOp.get(op);
        if (val == null) {
            throw new IllegalArgumentException("Unknown operation string: " + op);
        }
        return val;
!!!1531138.java!!!	checkOp(in op : String, in uid : int, in packageName : String) : int
        return checkOp(strOpToOp(op), uid, packageName);
!!!1531266.java!!!	checkOpNoThrow(in op : String, in uid : int, in packageName : String) : int
        return checkOpNoThrow(strOpToOp(op), uid, packageName);
!!!1531394.java!!!	noteOp(in op : String, in uid : int, in packageName : String) : int
        return noteOp(strOpToOp(op), uid, packageName);
!!!1531522.java!!!	noteOpNoThrow(in op : String, in uid : int, in packageName : String) : int
        return noteOpNoThrow(strOpToOp(op), uid, packageName);
!!!1531650.java!!!	startOp(in op : String, in uid : int, in packageName : String) : int
        return startOp(strOpToOp(op), uid, packageName);
!!!1531778.java!!!	startOpNoThrow(in op : String, in uid : int, in packageName : String) : int
        return startOpNoThrow(strOpToOp(op), uid, packageName);
!!!1531906.java!!!	finishOp(in op : String, in uid : int, in packageName : String) : void
        finishOp(strOpToOp(op), uid, packageName);
!!!1532034.java!!!	checkOp(in op : int, in uid : int, in packageName : String) : int
        try {
            int mode = mService.checkOperation(op, uid, packageName);
            if (mode == MODE_ERRORED) {
                if (packageName.equals("android")) {
                    //FIXME
                } else {
                    throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
                }
            }
            return mode;
        } catch (RemoteException e) {
        }
        return MODE_IGNORED;
!!!1532162.java!!!	checkOpNoThrow(in op : int, in uid : int, in packageName : String) : int
        try {
            return mService.checkOperation(op, uid, packageName);
        } catch (RemoteException e) {
        }
        return MODE_IGNORED;
!!!1532290.java!!!	checkPackage(in uid : int, in packageName : String) : void
        try {
            if (mService.checkPackage(uid, packageName) != MODE_ALLOWED) {

                if (packageName.equals("android")) {
                    //FIXME
                } else {
                    throw new SecurityException(
                        "Package " + packageName + " does not belong to " + uid);
                }
            }
        } catch (RemoteException e) {
            throw new SecurityException("Unable to verify package ownership", e);
        }
!!!1532418.java!!!	checkAudioOp(in op : int, in stream : int, in uid : int, in packageName : String) : int
        try {
            final int mode = mService.checkAudioOperation(op, stream, uid, packageName);
            if (mode == MODE_ERRORED) {
                if (packageName.equals("android")) {
                    //FIXME
                } else {
                    throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
                }
            }
            return mode;
        } catch (RemoteException e) {
        }
        return MODE_IGNORED;
!!!1532546.java!!!	checkAudioOpNoThrow(in op : int, in stream : int, in uid : int, in packageName : String) : int
        try {
            return mService.checkAudioOperation(op, stream, uid, packageName);
        } catch (RemoteException e) {
        }
        return MODE_IGNORED;
!!!1532674.java!!!	noteOp(in op : int, in uid : int, in packageName : String) : int
        try {
            int mode = mService.noteOperation(op, uid, packageName);
            if (mode == MODE_ERRORED) {
                if (packageName.equals("android")) {
                    //FIXME
                } else {
                    throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
                }
            }
            return mode;
        } catch (RemoteException e) {
        }
        return MODE_IGNORED;
!!!1532802.java!!!	noteOpNoThrow(in op : int, in uid : int, in packageName : String) : int
        try {
            return mService.noteOperation(op, uid, packageName);
        } catch (RemoteException e) {
        }
        return MODE_IGNORED;
!!!1532930.java!!!	noteOp(in op : int) : int
        return noteOp(op, Process.myUid(), mContext.getOpPackageName());
!!!1533058.java!!!	getToken(inout service : IAppOpsService) : IBinder
        synchronized (AppOpsManager.class) {
            if (sToken != null) {
                return sToken;
            }
            try {
                sToken = service.getToken(new Binder());
            } catch (RemoteException e) {
                // System is dead, whatevs.
            }
            return sToken;
        }
!!!1533186.java!!!	startOp(in op : int, in uid : int, in packageName : String) : int
        try {
            int mode = mService.startOperation(getToken(mService), op, uid, packageName);
            if (mode == MODE_ERRORED) {
                if (packageName.equals("android")) {
                    //FIXME
                } else {
                    throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
                }
            }
            return mode;
        } catch (RemoteException e) {
        }
        return MODE_IGNORED;
!!!1533314.java!!!	startOpNoThrow(in op : int, in uid : int, in packageName : String) : int
        try {
            return mService.startOperation(getToken(mService), op, uid, packageName);
        } catch (RemoteException e) {
        }
        return MODE_IGNORED;
!!!1533442.java!!!	startOp(in op : int) : int
        return startOp(op, Process.myUid(), mContext.getOpPackageName());
!!!1533570.java!!!	finishOp(in op : int, in uid : int, in packageName : String) : void
        try {
            mService.finishOperation(getToken(mService), op, uid, packageName);
        } catch (RemoteException e) {
        }
!!!1533698.java!!!	finishOp(in op : int) : void
        finishOp(op, Process.myUid(), mContext.getOpPackageName());
