format 76
"inputmethod" // view::inputmethod
  revision 1
  modified_by 2 "thisway_diy"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "L:/android_projects/uml_tmp_file/view/inputmethod/"
  java_package "android.view.inputmethod"
  classview 144770 "inputmethod"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 222210 "InputConnection"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The InputConnection interface is the communication channel from an
{@link InputMethod} back to the application that is receiving its
input. It is used to perform such things as reading text around the
cursor, committing text to the text box, and sending raw key events
to the application.

<p>Applications should never directly implement this interface, but
instead subclass from {@link BaseInputConnection}. This will ensure
that the application does not break when new methods are added to
the interface.</p>

<h3>Implementing an IME or an editor</h3>
<p>Text input is the result of the synergy of two essential components:
an Input Method Engine (IME) and an editor. The IME can be a
software keyboard, a handwriting interface, an emoji palette, a
speech-to-text engine, and so on. There are typically several IMEs
installed on any given Android device. In Android, IMEs extend
{@link android.inputmethodservice.InputMethodService}.
For more information about how to create an IME, see the
<a href=\"{@docRoot}guide/topics/text/creating-input-method.html\">
Creating an input method</a> guide.

The editor is the component that receives text and displays it.
Typically, this is an {@link android.widget.EditText} instance, but
some applications may choose to implement their own editor for
various reasons. This is a large and complicated task, and an
application that does this needs to make sure the behavior is
consistent with standard EditText behavior in Android. An editor
needs to interact with the IME, receiving commands through
this InputConnection interface, and sending commands through
{@link android.view.inputmethod.InputMethodManager}. An editor
should start by implementing
{@link android.view.View#onCreateInputConnection(EditorInfo)}
to return its own input connection.</p>

<p>If you are implementing your own IME, you will need to call the
methods in this interface to interact with the application. Be sure
to test your IME with a wide range of applications, including
browsers and rich text editors, as some may have peculiarities you
need to deal with. Remember your IME may not be the only source of
changes on the text, and try to be as conservative as possible in
the data you send and as liberal as possible in the data you
receive.</p>

<p>If you are implementing your own editor, you will probably need
to provide your own subclass of {@link BaseInputConnection} to
answer to the commands from IMEs. Please be sure to test your
editor with as many IMEs as you can as their behavior can vary a
lot. Also be sure to test with various languages, including CJK
languages and right-to-left languages like Arabic, as these may
have different input requirements. When in doubt about the
behavior you should adopt for a particular call, please mimic the
default TextView implementation in the latest Android version, and
if you decide to drift from it, please consider carefully that
inconsistencies in text editor behavior is almost universally felt
as a bad thing by users.</p>

<h3>Cursors, selections and compositions</h3>
<p>In Android, the cursor and the selection are one and the same
thing. A \"cursor\" is just the special case of a zero-sized
selection. As such, this documentation uses them
interchangeably. Any method acting \"before the cursor\" would act
before the start of the selection if there is one, and any method
acting \"after the cursor\" would act after the end of the
selection.</p>

<p>An editor needs to be able to keep track of a currently
\"composing\" region, like the standard edition widgets do. The
composition is marked in a specific style: see
{@link android.text.Spanned#SPAN_COMPOSING}. IMEs use this to help
the user keep track of what part of the text they are currently
focusing on, and interact with the editor using
{@link InputConnection#setComposingText(CharSequence, int)},
{@link InputConnection#setComposingRegion(int, int)} and
{@link InputConnection#finishComposingText()}.
The composing region and the selection are completely independent
of each other, and the IME may use them however they see fit.</p>"
      attribute 784130 "GET_TEXT_WITH_STYLES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #getTextAfterCursor} and
{@link #getTextBeforeCursor} to have style information returned
along with the text. If not set, {@link #getTextAfterCursor}
sends only the raw text, without style or other spans. If set,
it may return a complex CharSequence of both text and style
spans. <strong>Editor authors</strong>: you should strive to
send text with styles if possible, but it is not required.
"
      end

      attribute 784258 "GET_EXTRACTED_TEXT_MONITOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #getExtractedText} to indicate you
would like to receive updates when the extracted text changes.
"
      end

      operation 1135746 "getTextBeforeCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get <var>n</var> characters of text before the current cursor
position.

<p>This method may fail either if the input connection has
become invalid (such as its process crashing) or the editor is
taking too long to respond with the text (it is given a couple
seconds to return). In either case, null is returned. This
method does not affect the text in the editor in any way, nor
does it affect the selection or composing spans.</p>

<p>If {@link #GET_TEXT_WITH_STYLES} is supplied as flags, the
editor should return a {@link android.text.SpannableString}
with all the spans set on the text.</p>

<p><strong>IME authors:</strong> please consider this will
trigger an IPC round-trip that will take some time. Assume this
method consumes a lot of time. Also, please keep in mind the
Editor may choose to return less characters than requested even
if they are available for performance reasons.</p>

<p><strong>Editor authors:</strong> please be careful of race
conditions in implementing this call. An IME can make a change
to the text and use this method right away; you need to make
sure the returned value is consistent with the result of the
latest edits. Also, you may return less than n characters if performance
dictates so, but keep in mind IMEs are relying on this for many
functions: you should not, for example, limit the returned value to
the current line, and specifically do not return 0 characters unless
the cursor is really at the start of the text.</p>

@param n The expected length of the text.
@param flags Supplies additional options controlling how the text is
returned. May be either 0 or {@link #GET_TEXT_WITH_STYLES}.
@return the text before the cursor position; the length of the
returned text might be less than <var>n</var>."
      end

      operation 1135874 "getTextAfterCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get <var>n</var> characters of text after the current cursor
position.

<p>This method may fail either if the input connection has
become invalid (such as its process crashing) or the client is
taking too long to respond with the text (it is given a couple
seconds to return). In either case, null is returned.

<p>This method does not affect the text in the editor in any
way, nor does it affect the selection or composing spans.</p>

<p>If {@link #GET_TEXT_WITH_STYLES} is supplied as flags, the
editor should return a {@link android.text.SpannableString}
with all the spans set on the text.</p>

<p><strong>IME authors:</strong> please consider this will
trigger an IPC round-trip that will take some time. Assume this
method consumes a lot of time.</p>

<p><strong>Editor authors:</strong> please be careful of race
conditions in implementing this call. An IME can make a change
to the text and use this method right away; you need to make
sure the returned value is consistent with the result of the
latest edits. Also, you may return less than n characters if performance
dictates so, but keep in mind IMEs are relying on this for many
functions: you should not, for example, limit the returned value to
the current line, and specifically do not return 0 characters unless
the cursor is really at the end of the text.</p>

@param n The expected length of the text.
@param flags Supplies additional options controlling how the text is
returned. May be either 0 or {@link #GET_TEXT_WITH_STYLES}.

@return the text after the cursor position; the length of the
returned text might be less than <var>n</var>."
      end

      operation 1136002 "getSelectedText"
	public explicit_return_type "CharSequence"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the selected text, if any.

<p>This method may fail if either the input connection has
become invalid (such as its process crashing) or the client is
taking too long to respond with the text (it is given a couple
of seconds to return). In either case, null is returned.</p>

<p>This method must not cause any changes in the editor's
state.</p>

<p>If {@link #GET_TEXT_WITH_STYLES} is supplied as flags, the
editor should return a {@link android.text.SpannableString}
with all the spans set on the text.</p>

<p><strong>IME authors:</strong> please consider this will
trigger an IPC round-trip that will take some time. Assume this
method consumes a lot of time.</p>

<p><strong>Editor authors:</strong> please be careful of race
conditions in implementing this call. An IME can make a change
to the text or change the selection position and use this
method right away; you need to make sure the returned value is
consistent with the results of the latest edits.</p>

@param flags Supplies additional options controlling how the text is
returned. May be either 0 or {@link #GET_TEXT_WITH_STYLES}.
@return the text that is currently selected, if any, or null if
no text is selected."
      end

      operation 1136130 "getCursorCapsMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "reqModes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current capitalization mode in effect at the
current cursor position in the text. See
{@link android.text.TextUtils#getCapsMode TextUtils.getCapsMode}
for more information.

<p>This method may fail either if the input connection has
become invalid (such as its process crashing) or the client is
taking too long to respond with the text (it is given a couple
seconds to return). In either case, 0 is returned.</p>

<p>This method does not affect the text in the editor in any
way, nor does it affect the selection or composing spans.</p>

<p><strong>Editor authors:</strong> please be careful of race
conditions in implementing this call. An IME can change the
cursor position and use this method right away; you need to make
sure the returned value is consistent with the results of the
latest edits and changes to the cursor position.</p>

@param reqModes The desired modes to retrieve, as defined by
{@link android.text.TextUtils#getCapsMode TextUtils.getCapsMode}. These
constants are defined so that you can simply pass the current
{@link EditorInfo#inputType TextBoxAttribute.contentType} value
directly in to here.
@return the caps mode flags that are in effect at the current
cursor position. See TYPE_TEXT_FLAG_CAPS_* in {@link android.text.InputType}."
      end

      operation 1136258 "getExtractedText"
	public return_type class_ref 240130 // ExtractedText
	nparams 2
	  param inout name "request" type class_ref 252290 // ExtractedTextRequest
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current text in the input connection's editor, and
monitor for any changes to it. This function returns with the
current text, and optionally the input connection can send
updates to the input method when its text changes.

<p>This method may fail either if the input connection has
become invalid (such as its process crashing) or the client is
taking too long to respond with the text (it is given a couple
seconds to return). In either case, null is returned.</p>

<p>Editor authors: as a general rule, try to comply with the
fields in <code>request</code> for how many chars to return,
but if performance or convenience dictates otherwise, please
feel free to do what is most appropriate for your case. Also,
if the
{@link #GET_EXTRACTED_TEXT_MONITOR} flag is set, you should be
calling
{@link InputMethodManager#updateExtractedText(View, int, ExtractedText)}
whenever you call
{@link InputMethodManager#updateSelection(View, int, int, int, int)}.</p>

@param request Description of how the text should be returned.
{@link android.view.inputmethod.ExtractedTextRequest}
@param flags Additional options to control the client, either 0 or
{@link #GET_EXTRACTED_TEXT_MONITOR}.

@return an {@link android.view.inputmethod.ExtractedText}
object describing the state of the text view and containing the
extracted text itself, or null if the input connection is no
longer valid of the editor can't comply with the request for
some reason."
      end

      operation 1136386 "deleteSurroundingText"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "beforeLength" explicit_type "int"
	  param in name "afterLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delete <var>beforeLength</var> characters of text before the
current cursor position, and delete <var>afterLength</var>
characters of text after the current cursor position, excluding
the selection. Before and after refer to the order of the
characters in the string, not to their visual representation:
this means you don't have to figure out the direction of the
text and can just use the indices as-is.

<p>The lengths are supplied in Java chars, not in code points
or in glyphs.</p>

<p>Since this method only operates on text before and after the
selection, it can't affect the contents of the selection. This
may affect the composing span if the span includes characters
that are to be deleted, but otherwise will not change it. If
some characters in the composing span are deleted, the
composing span will persist but get shortened by however many
chars inside it have been removed.</p>

<p><strong>IME authors:</strong> please be careful not to
delete only half of a surrogate pair. Also take care not to
delete more characters than are in the editor, as that may have
ill effects on the application. Calling this method will cause
the editor to call
{@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int, int, int)}
on your service after the batch input is over.</p>

<p><strong>Editor authors:</strong> please be careful of race
conditions in implementing this call. An IME can make a change
to the text or change the selection position and use this
method right away; you need to make sure the effects are
consistent with the results of the latest edits. Also, although
the IME should not send lengths bigger than the contents of the
string, you should check the values for overflows and trim the
indices to the size of the contents to avoid crashes. Since
this changes the contents of the editor, you need to make the
changes known to the input method by calling
{@link InputMethodManager#updateSelection(View, int, int, int, int)},
but be careful to wait until the batch edit is over if one is
in progress.</p>

@param beforeLength The number of characters to be deleted before the
       current cursor position.
@param afterLength The number of characters to be deleted after the
       current cursor position.
@return true on success, false if the input connection is no longer
valid."
      end

      operation 1136514 "setComposingText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace the currently composing text with the given text, and
set the new cursor position. Any composing text set previously
will be removed automatically.

<p>If there is any composing span currently active, all
characters that it comprises are removed. The passed text is
added in its place, and a composing span is added to this
text. If there is no composing span active, the passed text is
added at the cursor position (removing selected characters
first if any), and a composing span is added on the new text.
Finally, the cursor is moved to the location specified by
<code>newCursorPosition</code>.</p>

<p>This is usually called by IMEs to add or remove or change
characters in the composing span. Calling this method will
cause the editor to call
{@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int, int, int)}
on the current IME after the batch input is over.</p>

<p><strong>Editor authors:</strong> please keep in mind the
text may be very similar or completely different than what was
in the composing span at call time, or there may not be a
composing span at all. Please note that although it's not
typical use, the string may be empty. Treat this normally,
replacing the currently composing text with an empty string.
Also, be careful with the cursor position. IMEs rely on this
working exactly as described above. Since this changes the
contents of the editor, you need to make the changes known to
the input method by calling
{@link InputMethodManager#updateSelection(View, int, int, int, int)},
but be careful to wait until the batch edit is over if one is
in progress. Note that this method can set the cursor position
on either edge of the composing text or entirely outside it,
but the IME may also go on to move the cursor position to
within the composing text in a subsequent call so you should
make no assumption at all: the composing text and the selection
are entirely independent.</p>

@param text The composing text with styles if necessary. If no style
       object attached to the text, the default style for composing text
       is used. See {@link android.text.Spanned} for how to attach style
       object to the text. {@link android.text.SpannableString} and
       {@link android.text.SpannableStringBuilder} are two
       implementations of the interface {@link android.text.Spanned}.
@param newCursorPosition The new cursor position around the text. If
       > 0, this is relative to the end of the text - 1; if <= 0, this
       is relative to the start of the text. So a value of 1 will
       always advance you to the position after the full text being
       inserted. Note that this means you can't position the cursor
       within the text, because the editor can make modifications to
       the text you are providing so it is not possible to correctly
       specify locations there.
@return true on success, false if the input connection is no longer
valid."
      end

      operation 1136642 "setComposingRegion"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark a certain region of text as composing text. If there was a
composing region, the characters are left as they were and the
composing span removed, as if {@link #finishComposingText()}
has been called. The default style for composing text is used.

<p>The passed indices are clipped to the contents bounds. If
the resulting region is zero-sized, no region is marked and the
effect is the same as that of calling {@link #finishComposingText()}.
The order of start and end is not important. In effect, the
region from start to end and the region from end to start is
the same. Editor authors, be ready to accept a start that is
greater than end.</p>

<p>Since this does not change the contents of the text, editors should not call
{@link InputMethodManager#updateSelection(View, int, int, int, int)} and
IMEs should not receive
{@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int, int, int)}.
</p>

<p>This has no impact on the cursor/selection position. It may
result in the cursor being anywhere inside or outside the
composing region, including cases where the selection and the
composing region overlap partially or entirely.</p>

@param start the position in the text at which the composing region begins
@param end the position in the text at which the composing region ends
@return true on success, false if the input connection is no longer
valid."
      end

      operation 1136770 "finishComposingText"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Have the text editor finish whatever composing text is
currently active. This simply leaves the text as-is, removing
any special composing styling or other state that was around
it. The cursor position remains unchanged.

<p><strong>IME authors:</strong> be aware that this call may be
expensive with some editors.</p>

<p><strong>Editor authors:</strong> please note that the cursor
may be anywhere in the contents when this is called, including
in the middle of the composing span or in a completely
unrelated place. It must not move.</p>

@return true on success, false if the input connection
is no longer valid."
      end

      operation 1136898 "commitText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commit text to the text box and set the new cursor position.

<p>This method removes the contents of the currently composing
text and replaces it with the passed CharSequence, and then
moves the cursor according to {@code newCursorPosition}. If there
is no composing text when this method is called, the new text is
inserted at the cursor position, removing text inside the selection
if any. This behaves like calling
{@link #setComposingText(CharSequence, int) setComposingText(text, newCursorPosition)}
then {@link #finishComposingText()}.</p>

<p>Calling this method will cause the editor to call
{@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int, int, int)}
on the current IME after the batch input is over.
<strong>Editor authors</strong>, for this to happen you need to
make the changes known to the input method by calling
{@link InputMethodManager#updateSelection(View, int, int, int, int)},
but be careful to wait until the batch edit is over if one is
in progress.</p>

@param text The text to commit. This may include styles.
@param newCursorPosition The new cursor position around the text,
       in Java characters. If > 0, this is relative to the end
       of the text - 1; if <= 0, this is relative to the start
       of the text. So a value of 1 will always advance the cursor
       to the position after the full text being inserted. Note that
       this means you can't position the cursor within the text,
       because the editor can make modifications to the text
       you are providing so it is not possible to correctly specify
       locations there.
@return true on success, false if the input connection is no longer
valid."
      end

      operation 1137026 "commitCompletion"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "text" type class_ref 239234 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commit a completion the user has selected from the possible ones
previously reported to {@link InputMethodSession#displayCompletions
InputMethodSession#displayCompletions(CompletionInfo[])} or
{@link InputMethodManager#displayCompletions
InputMethodManager#displayCompletions(View, CompletionInfo[])}.
This will result in the same behavior as if the user had
selected the completion from the actual UI. In all other
respects, this behaves like {@link #commitText(CharSequence, int)}.

<p><strong>IME authors:</strong> please take care to send the
same object that you received through
{@link android.inputmethodservice.InputMethodService#onDisplayCompletions(CompletionInfo[])}.
</p>

<p><strong>Editor authors:</strong> if you never call
{@link InputMethodSession#displayCompletions(CompletionInfo[])} or
{@link InputMethodManager#displayCompletions(View, CompletionInfo[])} then
a well-behaved IME should never call this on your input
connection, but be ready to deal with misbehaving IMEs without
crashing.</p>

<p>Calling this method (with a valid {@link CompletionInfo} object)
will cause the editor to call
{@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int, int, int)}
on the current IME after the batch input is over.
<strong>Editor authors</strong>, for this to happen you need to
make the changes known to the input method by calling
{@link InputMethodManager#updateSelection(View, int, int, int, int)},
but be careful to wait until the batch edit is over if one is
in progress.</p>

@param text The committed completion.
@return true on success, false if the input connection is no longer
valid."
      end

      operation 1137154 "commitCorrection"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "correctionInfo" type class_ref 252418 // CorrectionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commit a correction automatically performed on the raw user's input. A
typical example would be to correct typos using a dictionary.

<p>Calling this method will cause the editor to call
{@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int, int, int)}
on the current IME after the batch input is over.
<strong>Editor authors</strong>, for this to happen you need to
make the changes known to the input method by calling
{@link InputMethodManager#updateSelection(View, int, int, int, int)},
but be careful to wait until the batch edit is over if one is
in progress.</p>

@param correctionInfo Detailed information about the correction.
@return true on success, false if the input connection is no longer valid."
      end

      operation 1137282 "setSelection"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the selection of the text editor. To set the cursor
position, start and end should have the same value.

<p>Since this moves the cursor, calling this method will cause
the editor to call
{@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int, int, int)}
on the current IME after the batch input is over.
<strong>Editor authors</strong>, for this to happen you need to
make the changes known to the input method by calling
{@link InputMethodManager#updateSelection(View, int, int, int, int)},
but be careful to wait until the batch edit is over if one is
in progress.</p>

<p>This has no effect on the composing region which must stay
unchanged. The order of start and end is not important. In
effect, the region from start to end and the region from end to
start is the same. Editor authors, be ready to accept a start
that is greater than end.</p>

@param start the character index where the selection should start.
@param end the character index where the selection should end.
@return true on success, false if the input connection is no longer
valid."
      end

      operation 1137410 "performEditorAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "editorAction" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Have the editor perform an action it has said it can do.

<p>This is typically used by IMEs when the user presses the key
associated with the action.</p>

@param editorAction This must be one of the action constants for
{@link EditorInfo#imeOptions EditorInfo.editorType}, such as
{@link EditorInfo#IME_ACTION_GO EditorInfo.EDITOR_ACTION_GO}.
@return true on success, false if the input connection is no longer
valid."
      end

      operation 1137538 "performContextMenuAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform a context menu action on the field. The given id may be one of:
{@link android.R.id#selectAll},
{@link android.R.id#startSelectingText}, {@link android.R.id#stopSelectingText},
{@link android.R.id#cut}, {@link android.R.id#copy},
{@link android.R.id#paste}, {@link android.R.id#copyUrl},
or {@link android.R.id#switchInputMethod}"
      end

      operation 1137666 "beginBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell the editor that you are starting a batch of editor
operations. The editor will try to avoid sending you updates
about its state until {@link #endBatchEdit} is called. Batch
edits nest.

<p><strong>IME authors:</strong> use this to avoid getting
calls to
{@link android.inputmethodservice.InputMethodService#onUpdateSelection(int, int, int, int, int, int)}
corresponding to intermediate state. Also, use this to avoid
flickers that may arise from displaying intermediate state. Be
sure to call {@link #endBatchEdit} for each call to this, or
you may block updates in the editor.</p>

<p><strong>Editor authors:</strong> while a batch edit is in
progress, take care not to send updates to the input method and
not to update the display. IMEs use this intensively to this
effect. Also please note that batch edits need to nest
correctly.</p>

@return true if a batch edit is now in progress, false otherwise. Since
this method starts a batch edit, that means it will always return true
unless the input connection is no longer valid."
      end

      operation 1137794 "endBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell the editor that you are done with a batch edit previously
initiated with {@link #beginBatchEdit}. This ends the latest
batch only.

<p><strong>IME authors:</strong> make sure you call this
exactly once for each call to {@link #beginBatchEdit}.</p>

<p><strong>Editor authors:</strong> please be careful about
batch edit nesting. Updates still to be held back until the end
of the last batch edit.</p>

@return true if there is still a batch edit in progress after closing
the latest one (in other words, if the nesting count is > 0), false
otherwise or if the input connection is no longer valid."
      end

      operation 1137922 "sendKeyEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 212866 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Send a key event to the process that is currently attached
through this input connection. The event will be dispatched
like a normal key event, to the currently focused view; this
generally is the view that is providing this InputConnection,
but due to the asynchronous nature of this protocol that can
not be guaranteed and the focus may have changed by the time
the event is received.

<p>This method can be used to send key events to the
application. For example, an on-screen keyboard may use this
method to simulate a hardware keyboard. There are three types
of standard keyboards, numeric (12-key), predictive (20-key)
and ALPHA (QWERTY). You can specify the keyboard type by
specify the device id of the key event.</p>

<p>You will usually want to set the flag
{@link KeyEvent#FLAG_SOFT_KEYBOARD KeyEvent.FLAG_SOFT_KEYBOARD}
on all key event objects you give to this API; the flag will
not be set for you.</p>

<p>Note that it's discouraged to send such key events in normal
operation; this is mainly for use with
{@link android.text.InputType#TYPE_NULL} type text fields. Use
the {@link #commitText} family of methods to send text to the
application instead.</p>

@param event The key event.
@return true on success, false if the input connection is no longer
valid.

@see KeyEvent
@see KeyCharacterMap#NUMERIC
@see KeyCharacterMap#PREDICTIVE
@see KeyCharacterMap#ALPHA"
      end

      operation 1138050 "clearMetaKeyStates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "states" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clear the given meta key pressed states in the given input
connection.

<p>This can be used by the IME to clear the meta key states set
by a hardware keyboard with latched meta keys, if the editor
keeps track of these.</p>

@param states The states to be cleared, may be one or more bits as
per {@link KeyEvent#getMetaState() KeyEvent.getMetaState()}.
@return true on success, false if the input connection is no longer
valid."
      end

      operation 1138178 "reportFullscreenMode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the IME to tell the client when it switches between
fullscreen and normal modes. This will normally be called for
you by the standard implementation of
{@link android.inputmethodservice.InputMethodService}.

@return true on success, false if the input connection is no longer
valid."
      end

      operation 1138306 "performPrivateCommand"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "action" explicit_type "String"
	  param inout name "data" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "API to send private commands from an input method to its
connected editor. This can be used to provide domain-specific
features that are only known between certain input methods and
their clients. Note that because the InputConnection protocol
is asynchronous, you have no way to get a result back or know
if the client understood the command; you can use the
information in {@link EditorInfo} to determine if a client
supports a particular command.

@param action Name of the command to be performed. This <em>must</em>
be a scoped name, i.e. prefixed with a package name you own, so that
different developers will not create conflicting commands.
@param data Any data to include with the command.
@return true if the command was sent (whether or not the
associated editor understood it), false if the input connection is no longer
valid."
      end

      attribute 784386 "CURSOR_UPDATE_IMMEDIATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The editor is requested to call
{@link InputMethodManager#updateCursorAnchorInfo(android.view.View, CursorAnchorInfo)} at
once, as soon as possible, regardless of cursor/anchor position changes. This flag can be
used together with {@link #CURSOR_UPDATE_MONITOR}.
"
      end

      attribute 784514 "CURSOR_UPDATE_MONITOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The editor is requested to call
{@link InputMethodManager#updateCursorAnchorInfo(android.view.View, CursorAnchorInfo)}
whenever cursor/anchor position is changed. To disable monitoring, call
{@link InputConnection#requestCursorUpdates(int)} again with this flag off.
<p>
This flag can be used together with {@link #CURSOR_UPDATE_IMMEDIATE}.
</p>
"
      end

      operation 1138434 "requestCursorUpdates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "cursorUpdateMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the input method to ask the editor for calling back
{@link InputMethodManager#updateCursorAnchorInfo(android.view.View, CursorAnchorInfo)} to
notify cursor/anchor locations.

@param cursorUpdateMode {@link #CURSOR_UPDATE_IMMEDIATE} and/or
{@link #CURSOR_UPDATE_MONITOR}. Pass {@code 0} to disable the effect of
{@link #CURSOR_UPDATE_MONITOR}.
@return {@code true} if the request is scheduled. {@code false} to indicate that when the
application will not call
{@link InputMethodManager#updateCursorAnchorInfo(android.view.View, CursorAnchorInfo)}."
      end
    end

    class 222338 "EditorInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An EditorInfo describes several attributes of a text editing object
that an input method is communicating with (typically an EditText), most
importantly the type of text content it contains and the current cursor position."
      classrelation 288386 // <realization>
	relation 287490 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 288386 // <realization>
	  b parent class_ref 252930 // InputType
      end

      classrelation 288514 // <realization>
	relation 287618 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 288514 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 789378 "inputType"
	public explicit_type "int"
	init_value " TYPE_NULL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The content type of the text box, whose bits are defined by
{@link InputType}.

@see InputType
@see #TYPE_MASK_CLASS
@see #TYPE_MASK_VARIATION
@see #TYPE_MASK_FLAGS
"
      end

      attribute 789506 "IME_MASK_ACTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x000000ff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set of bits in {@link #imeOptions} that provide alternative actions
associated with the \"enter\" key.  This both helps the IME provide
better feedback about what the enter key will do, and also allows it
to provide alternative mechanisms for providing that command.
"
      end

      attribute 789634 "IME_ACTION_UNSPECIFIED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: no specific action has been
associated with this editor, let the editor come up with its own if
it can.
"
      end

      attribute 789762 "IME_ACTION_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: there is no available action.
"
      end

      attribute 789890 "IME_ACTION_GO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"go\"
operation to take the user to the target of the text they typed.
Typically used, for example, when entering a URL.
"
      end

      attribute 790018 "IME_ACTION_SEARCH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000003"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"search\"
operation, taking the user to the results of searching for the text
they have typed (in whatever context is appropriate).
"
      end

      attribute 790146 "IME_ACTION_SEND"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000004"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"send\"
operation, delivering the text to its target.  This is typically used
when composing a message in IM or SMS where sending is immediate.
"
      end

      attribute 790274 "IME_ACTION_NEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000005"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"next\"
operation, taking the user to the next field that will accept text.
"
      end

      attribute 790402 "IME_ACTION_DONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000006"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"done\"
operation, typically meaning there is nothing more to input and the
IME will be closed.
"
      end

      attribute 790530 "IME_ACTION_PREVIOUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000007"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: like {@link #IME_ACTION_NEXT}, but
for moving to the previous field.  This will normally not be used to
specify an action (since it precludes {@link #IME_ACTION_NEXT}), but
can be returned to the app if it sets {@link #IME_FLAG_NAVIGATE_PREVIOUS}.
"
      end

      attribute 790658 "IME_FLAG_NO_FULLSCREEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used to request that the IME never go
into fullscreen mode.
By default, IMEs may go into full screen mode when they think
it's appropriate, for example on small screens in landscape
orientation where displaying a software keyboard may occlude
such a large portion of the screen that the remaining part is
too small to meaningfully display the application UI.
If this flag is set, compliant IMEs will never go into full screen mode,
and always leave some space to display the application UI.
Applications need to be aware that the flag is not a guarantee, and
some IMEs may ignore it.
"
      end

      attribute 790786 "IME_FLAG_NAVIGATE_PREVIOUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: like {@link #IME_FLAG_NAVIGATE_NEXT}, but
specifies there is something interesting that a backward navigation
can focus on.  If the user selects the IME's facility to backward
navigate, this will show up in the application as an {@link #IME_ACTION_PREVIOUS}
at {@link InputConnection#performEditorAction(int)
InputConnection.performEditorAction(int)}.
"
      end

      attribute 790914 "IME_FLAG_NAVIGATE_NEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used to specify that there is something
interesting that a forward navigation can focus on. This is like using
{@link #IME_ACTION_NEXT}, except allows the IME to be multiline (with
an enter key) as well as provide forward navigation.  Note that some
IMEs may not be able to do this, especially when running on a small
screen where there is little space.  In that case it does not need to
present a UI for this option.  Like {@link #IME_ACTION_NEXT}, if the
user selects the IME's facility to forward navigate, this will show up
in the application at {@link InputConnection#performEditorAction(int)
InputConnection.performEditorAction(int)}.
"
      end

      attribute 791042 "IME_FLAG_NO_EXTRACT_UI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used to specify that the IME does not need
to show its extracted text UI.  For input methods that may be fullscreen,
often when in landscape mode, this allows them to be smaller and let part
of the application be shown behind, through transparent UI parts in the
fullscreen IME. The part of the UI visible to the user may not be responsive
to touch because the IME will receive touch events, which may confuse the
user; use {@link #IME_FLAG_NO_FULLSCREEN} instead for a better experience.
Using this flag is discouraged and it may become deprecated in the future.
Its meaning is unclear in some situations and it may not work appropriately
on older versions of the platform.
"
      end

      attribute 791170 "IME_FLAG_NO_ACCESSORY_ACTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used in conjunction with one of the actions
masked by {@link #IME_MASK_ACTION}, this indicates that the action
should not be available as an accessory button on the right of the extracted
text when the input method is full-screen. Note that by setting this flag,
there can be cases where the action is simply never available to the
user. Setting this generally means that you think that in fullscreen mode,
where there is little space to show the text, it's not worth taking some
screen real estate to display the action and it should be used instead
to show more text.
"
      end

      attribute 791298 "IME_FLAG_NO_ENTER_ACTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x40000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used in conjunction with one of the actions
masked by {@link #IME_MASK_ACTION}. If this flag is not set, IMEs will
normally replace the \"enter\" key with the action supplied. This flag
indicates that the action should not be available in-line as a replacement
for the \"enter\" key. Typically this is because the action has such a
significant impact or is not recoverable enough that accidentally hitting
it should be avoided, such as sending a message. Note that
{@link android.widget.TextView} will automatically set this flag for you
on multi-line text views.
"
      end

      attribute 791426 "IME_FLAG_FORCE_ASCII"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used to request an IME that is capable of
inputting ASCII characters.  The intention of this flag is to ensure that
the user can type Roman alphabet characters in a {@link android.widget.TextView}.
It is typically used for an account ID or password input. A lot of the time,
IMEs are already able to input ASCII even without being told so (such IMEs
already respect this flag in a sense), but there are cases when this is not
the default. For instance, users of languages using a different script like
Arabic, Greek, Hebrew or Russian typically have a keyboard that can't
input ASCII characters by default. Applications need to be
aware that the flag is not a guarantee, and some IMEs may not respect it.
However, it is strongly recommended for IME authors to respect this flag
especially when their IME could end up with a state where only languages
using non-ASCII are enabled.
"
      end

      attribute 791554 "IME_NULL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Generic unspecified type for {@link #imeOptions}.
"
      end

      attribute 791682 "imeOptions"
	public explicit_type "int"
	init_value " IME_NULL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Extended type information for the editor, to help the IME better
integrate with it.
"
      end

      attribute 791810 "privateImeOptions"
	public explicit_type "String"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A string supplying additional information options that are
private to a particular IME implementation.  The string must be
scoped to a package owned by the implementation, to ensure there are
no conflicts between implementations, but other than that you can put
whatever you want in it to communicate with the IME.  For example,
you could have a string that supplies an argument like
<code>\"com.example.myapp.SpecialMode=3\"</code>.  This field is can be
filled in from the {@link android.R.attr#privateImeOptions}
attribute of a TextView.
"
      end

      attribute 791938 "actionLabel"
	public explicit_type "CharSequence"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "In some cases an IME may be able to display an arbitrary label for
a command the user can perform, which you can specify here. This is
typically used as the label for the action to use in-line as a replacement
for the \"enter\" key (see {@link #actionId}). Remember the key where
this will be displayed is typically very small, and there are significant
localization challenges to make this fit in all supported languages. Also
you can not count absolutely on this being used, as some IMEs may
ignore this.
"
      end

      attribute 792066 "actionId"
	public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If {@link #actionLabel} has been given, this is the id for that command
when the user presses its button that is delivered back with
{@link InputConnection#performEditorAction(int)
InputConnection.performEditorAction()}.
"
      end

      attribute 792194 "initialSelStart"
	public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The text offset of the start of the selection at the time editing
begins; -1 if not known. Keep in mind that, without knowing the cursor
position, many IMEs will not be able to offer their full feature set and
may even behave in unpredictable ways: pass the actual cursor position
here if possible at all.

<p>Also, this needs to be the cursor position <strong>right now</strong>,
not at some point in the past, even if input is starting in the same text field
as before. When the app is filling this object, input is about to start by
definition, and this value will override any value the app may have passed to
{@link InputMethodManager#updateSelection(android.view.View, int, int, int, int)}
before.</p>
"
      end

      attribute 792322 "initialSelEnd"
	public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<p>The text offset of the end of the selection at the time editing
begins; -1 if not known. Keep in mind that, without knowing the cursor
position, many IMEs will not be able to offer their full feature set and
may behave in unpredictable ways: pass the actual cursor position
here if possible at all.</p>

<p>Also, this needs to be the cursor position <strong>right now</strong>,
not at some point in the past, even if input is starting in the same text field
as before. When the app is filling this object, input is about to start by
definition, and this value will override any value the app may have passed to
{@link InputMethodManager#updateSelection(android.view.View, int, int, int, int)}
before.</p>
"
      end

      attribute 792450 "initialCapsMode"
	public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The capitalization mode of the first character being edited in the
text.  Values may be any combination of
{@link TextUtils#CAP_MODE_CHARACTERS TextUtils.CAP_MODE_CHARACTERS},
{@link TextUtils#CAP_MODE_WORDS TextUtils.CAP_MODE_WORDS}, and
{@link TextUtils#CAP_MODE_SENTENCES TextUtils.CAP_MODE_SENTENCES}, though
you should generally just take a non-zero value to mean \"start out in
caps mode\".
"
      end

      attribute 792578 "hintText"
	public explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The \"hint\" text of the text view, typically shown in-line when the
text is empty to tell the user what to enter.
"
      end

      attribute 792706 "label"
	public explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A label to show to the user describing the text they are writing.
"
      end

      attribute 792834 "packageName"
	public explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Name of the package that owns this editor.
"
      end

      attribute 792962 "fieldId"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Identifier for the editor's field.  This is optional, and may be
0.  By default it is filled in with the result of
{@link android.view.View#getId() View.getId()} on the View that
is being edited.
"
      end

      attribute 793090 "fieldName"
	public explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Additional name for the editor's field.  This can supply additional
name information for the field.  By default it is null.  The actual
contents have no meaning.
"
      end

      attribute 793218 "extras"
	public explicit_type "Bundle"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Any extra data to supply to the input method.  This is for extended
communication with specific input methods; the name fields in the
bundle should be scoped (such as \"com.mydomain.im.SOME_FIELD\") so
that they don't conflict with others.  This field can be
filled in from the {@link android.R.attr#editorExtras}
attribute of a TextView.
"
      end

      operation 1148674 "makeCompatible"
	public explicit_return_type "void"
	nparams 1
	  param in name "targetSdkVersion" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that the data in this EditorInfo is compatible with an application
that was developed against the given target API version.  This can
impact the following input types:
{@link InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS},
{@link InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD},
{@link InputType#TYPE_NUMBER_VARIATION_NORMAL},
{@link InputType#TYPE_NUMBER_VARIATION_PASSWORD}.

<p>This is called by the framework for input method implementations;
you should not generally need to call it yourself.

@param targetSdkVersion The API version number that the compatible
application was developed against."
      end

      operation 1148802 "dump"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pw" explicit_type "Printer"
	  param in name "prefix" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write debug output of this object."
      end

      operation 1148930 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 288642 // CREATOR (<unidirectional association>)
	relation 287746 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<EditorInfo>() {
                public EditorInfo createFromParcel(Parcel source) {
                    EditorInfo res = new EditorInfo();
                    res.inputType = source.readInt();
                    res.imeOptions = source.readInt();
                    res.privateImeOptions = source.readString();
                    res.actionLabel = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
                    res.actionId = source.readInt();
                    res.initialSelStart = source.readInt();
                    res.initialSelEnd = source.readInt();
                    res.initialCapsMode = source.readInt();
                    res.hintText = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
                    res.label = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
                    res.packageName = source.readString();
                    res.fieldId = source.readInt();
                    res.fieldName = source.readString();
                    res.extras = source.readBundle();
                    return res;
                }

                public EditorInfo[] newArray(int size) {
                    return new EditorInfo[size];
                }
            }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 288642 // CREATOR (<unidirectional association>)
	  b parent class_ref 222338 // EditorInfo
      end

      operation 1149058 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 238722 "InputMethodManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Central system API to the overall input method framework (IMF) architecture,
which arbitrates interaction between applications and the current input method.
You can retrieve an instance of this interface with
{@link Context#getSystemService(String) Context.getSystemService()}.

<p>Topics covered here:
<ol>
<li><a href=\"#ArchitectureOverview\">Architecture Overview</a>
<li><a href=\"#Applications\">Applications</a>
<li><a href=\"#InputMethods\">Input Methods</a>
<li><a href=\"#Security\">Security</a>
</ol>

<a name=\"ArchitectureOverview\"></a>
<h3>Architecture Overview</h3>

<p>There are three primary parties involved in the input method
framework (IMF) architecture:</p>

<ul>
<li> The <strong>input method manager</strong> as expressed by this class
is the central point of the system that manages interaction between all
other parts.  It is expressed as the client-side API here which exists
in each application context and communicates with a global system service
that manages the interaction across all processes.
<li> An <strong>input method (IME)</strong> implements a particular
interaction model allowing the user to generate text.  The system binds
to the current input method that is use, causing it to be created and run,
and tells it when to hide and show its UI.  Only one IME is running at a time.
<li> Multiple <strong>client applications</strong> arbitrate with the input
method manager for input focus and control over the state of the IME.  Only
one such client is ever active (working with the IME) at a time.
</ul>


<a name=\"Applications\"></a>
<h3>Applications</h3>

<p>In most cases, applications that are using the standard
{@link android.widget.TextView} or its subclasses will have little they need
to do to work well with soft input methods.  The main things you need to
be aware of are:</p>

<ul>
<li> Properly set the {@link android.R.attr#inputType} in your editable
text views, so that the input method will have enough context to help the
user in entering text into them.
<li> Deal well with losing screen space when the input method is
displayed.  Ideally an application should handle its window being resized
smaller, but it can rely on the system performing panning of the window
if needed.  You should set the {@link android.R.attr#windowSoftInputMode}
attribute on your activity or the corresponding values on windows you
create to help the system determine whether to pan or resize (it will
try to determine this automatically but may get it wrong).
<li> You can also control the preferred soft input state (open, closed, etc)
for your window using the same {@link android.R.attr#windowSoftInputMode}
attribute.
</ul>

<p>More finer-grained control is available through the APIs here to directly
interact with the IMF and its IME -- either showing or hiding the input
area, letting the user pick an input method, etc.</p>

<p>For the rare people amongst us writing their own text editors, you
will need to implement {@link android.view.View#onCreateInputConnection}
to return a new instance of your own {@link InputConnection} interface
allowing the IME to interact with your editor.</p>


<a name=\"InputMethods\"></a>
<h3>Input Methods</h3>

<p>An input method (IME) is implemented
as a {@link android.app.Service}, typically deriving from
{@link android.inputmethodservice.InputMethodService}.  It must provide
the core {@link InputMethod} interface, though this is normally handled by
{@link android.inputmethodservice.InputMethodService} and implementors will
only need to deal with the higher-level API there.</p>

See the {@link android.inputmethodservice.InputMethodService} class for
more information on implementing IMEs.


<a name=\"Security\"></a>
<h3>Security</h3>

<p>There are a lot of security issues associated with input methods,
since they essentially have freedom to completely drive the UI and monitor
everything the user enters.  The Android input method framework also allows
arbitrary third party IMEs, so care must be taken to restrict their
selection and interactions.</p>

<p>Here are some key points about the security architecture behind the
IMF:</p>

<ul>
<li> <p>Only the system is allowed to directly access an IME's
{@link InputMethod} interface, via the
{@link android.Manifest.permission#BIND_INPUT_METHOD} permission.  This is
enforced in the system by not binding to an input method service that does
not require this permission, so the system can guarantee no other untrusted
clients are accessing the current input method outside of its control.</p>

<li> <p>There may be many client processes of the IMF, but only one may
be active at a time.  The inactive clients can not interact with key
parts of the IMF through the mechanisms described below.</p>

<li> <p>Clients of an input method are only given access to its
{@link InputMethodSession} interface.  One instance of this interface is
created for each client, and only calls from the session associated with
the active client will be processed by the current IME.  This is enforced
by {@link android.inputmethodservice.AbstractInputMethodService} for normal
IMEs, but must be explicitly handled by an IME that is customizing the
raw {@link InputMethodSession} implementation.</p>

<li> <p>Only the active client's {@link InputConnection} will accept
operations.  The IMF tells each client process whether it is active, and
the framework enforces that in inactive processes calls on to the current
InputConnection will be ignored.  This ensures that the current IME can
only deliver events and text edits to the UI that the user sees as
being in focus.</p>

<li> <p>An IME can never interact with an {@link InputConnection} while
the screen is off.  This is enforced by making all clients inactive while
the screen is off, and prevents bad IMEs from driving the UI when the user
can not be aware of its behavior.</p>

<li> <p>A client application can ask that the system let the user pick a
new IME, but can not programmatically switch to one itself.  This avoids
malicious applications from switching the user to their own IME, which
remains running when the user navigates away to another application.  An
IME, on the other hand, <em>is</em> allowed to programmatically switch
the system to another IME, since it already has full control of user
input.</p>

<li> <p>The user must explicitly enable a new IME in settings before
they can switch to it, to confirm with the system that they know about it
and want to make it available for use.</p>
</ul>"
      class 238850 "FinishedInputEventCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 959106 "onFinishedInputEvent"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "token" explicit_type "Object"
	    param inout name "handled" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 676738 "DEBUG"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 676866 "TAG"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"InputMethodManager\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 676994 "PENDING_EVENT_COUNTER"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"aq:imm\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 258946 // sInstance (<unidirectional association>)
	relation 258050 --->
	  a role_name "sInstance" class_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 258946 // sInstance (<unidirectional association>)
	  b parent class_ref 238722 // InputMethodManager
      end

      attribute 677122 "CONTROL_WINDOW_VIEW_HAS_FOCUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide Flag for IInputMethodManager.windowGainedFocus: a view in
the window has input focus.
"
      end

      attribute 677250 "CONTROL_WINDOW_IS_TEXT_EDITOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide Flag for IInputMethodManager.windowGainedFocus: the focus
is a text editor.
"
      end

      attribute 677378 "CONTROL_WINDOW_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide Flag for IInputMethodManager.windowGainedFocus: this is the first
time the window has gotten focus.
"
      end

      attribute 677506 "CONTROL_START_INITIAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide Flag for IInputMethodManager.startInput: this is the first
time the window has gotten focus.
"
      end

      attribute 677634 "INPUT_METHOD_NOT_RESPONDING_TIMEOUT"
	class_attribute const_attribute package explicit_type "long"
	init_value " 2500"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Timeout in milliseconds for delivering a key to an IME.
"
      end

      attribute 677762 "DISPATCH_IN_PROGRESS"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " @hide "
      end

      attribute 677890 "DISPATCH_NOT_HANDLED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " @hide "
      end

      attribute 678018 "DISPATCH_HANDLED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " @hide "
      end

      attribute 678146 "mService"
	const_attribute package explicit_type "IInputMethodManager"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 678274 "mMainLooper"
	const_attribute package explicit_type "Looper"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 238978 "H"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 260738 // <generalisation>
	  relation 259842 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 260738 // <generalisation>
	    b parent class_ref 133378 // Handler
	end

	operation 948354 "H"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "looper" explicit_type "Looper"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 948482 "handleMessage"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "msg" explicit_type "Message"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 259074 // mH (<unidirectional association>)
	relation 258178 --->
	  a role_name "mH" const_relation package
	    comment " For scheduling work on the main thread.  This also serves as our
 global lock.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 259074 // mH (<unidirectional association>)
	  b parent class_ref 238978 // H
      end

      attribute 678402 "mIInputContext"
	const_attribute package explicit_type "IInputContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Our generic input connection if the current target does not have its own."
      end

      attribute 678530 "mActive"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if this input method client is active, initially false.
"
      end

      attribute 678658 "mHasBeenInactive"
	package explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set whenever this client becomes inactive, to know we need to reset
state with the IME the next time we receive focus.
"
      end

      attribute 678786 "mFullscreenMode"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "As reported by IME through InputConnection.
"
      end

      classrelation 259202 // mCurRootView (<unidirectional association>)
	relation 258306 --->
	  a role_name "mCurRootView" package
	    comment " -----------------------------------------------------------

This is the root view of the overall window that currently has input
method focus.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 259202 // mCurRootView (<unidirectional association>)
	  b parent class_ref 208898 // View
      end

      classrelation 259330 // mServedView (<unidirectional association>)
	relation 258434 --->
	  a role_name "mServedView" package
	    comment "
This is the view that should currently be served by an input method,
regardless of the state of setting that up.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 259330 // mServedView (<unidirectional association>)
	  b parent class_ref 208898 // View
      end

      classrelation 259458 // mNextServedView (<unidirectional association>)
	relation 258562 --->
	  a role_name "mNextServedView" package
	    comment "
This is then next view that will be served by the input method, when
we get around to updating things.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 259458 // mNextServedView (<unidirectional association>)
	  b parent class_ref 208898 // View
      end

      attribute 678914 "mServedConnecting"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is set when we are in the process of connecting, to determine
when we have actually finished.
"
      end

      classrelation 259586 // mCurrentTextBoxAttribute (<unidirectional association>)
	relation 258690 --->
	  a role_name "mCurrentTextBoxAttribute" package
	    comment "
This is non-null when we have connected the served view; it holds
the attributes that were last retrieved from the served view and given
to the input connection.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 259586 // mCurrentTextBoxAttribute (<unidirectional association>)
	  b parent class_ref 222338 // EditorInfo
      end

      classrelation 259714 // mServedInputConnection (<unidirectional association>)
	relation 258818 --->
	  a role_name "mServedInputConnection" package
	    comment "
The InputConnection that was last retrieved from the served view.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 259714 // mServedInputConnection (<unidirectional association>)
	  b parent class_ref 222210 // InputConnection
      end

      class 239106 "ControlledInputConnectionWrapper"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 260866 // <generalisation>
	  relation 259970 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 260866 // <generalisation>
	    b parent class_ref 239746 // IInputConnectionWrapper
	end

	classrelation 260994 // mParentInputMethodManager (<unidirectional association>)
	  relation 260098 --->
	    a role_name "mParentInputMethodManager" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 260994 // mParentInputMethodManager (<unidirectional association>)
	    b parent class_ref 238722 // InputMethodManager
	end

	attribute 682114 "mActive"
	  private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 948610 "ControlledInputConnectionWrapper"
	  public explicit_return_type ""
	  nparams 3
	    param in name "mainLooper" explicit_type "Looper"
	    param in name "conn" type class_ref 222210 // InputConnection
	    param in name "inputMethodManager" type class_ref 238722 // InputMethodManager
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 948738 "isActive"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 948866 "deactivate"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 259842 // mServedInputConnectionWrapper (<unidirectional association>)
	relation 258946 --->
	  a role_name "mServedInputConnectionWrapper" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 259842 // mServedInputConnectionWrapper (<unidirectional association>)
	  b parent class_ref 239106 // ControlledInputConnectionWrapper
      end

      classrelation 259970 // mCompletions (<unidirectional association>)
	relation 259074 --->
	  a role_name "mCompletions" multiplicity "[]" package
	    comment "
The completions that were last provided by the served view.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 259970 // mCompletions (<unidirectional association>)
	  b parent class_ref 239234 // CompletionInfo
      end

      attribute 679042 "mTmpCursorRect"
	package explicit_type "Rect"
	init_value " new Rect()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Cursor position on the screen."
      end

      attribute 679170 "mCursorRect"
	package explicit_type "Rect"
	init_value " new Rect()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 679298 "mCursorSelStart"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 679426 "mCursorSelEnd"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 679554 "mCursorCandStart"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 679682 "mCursorCandEnd"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 679810 "NOT_AN_ACTION_NOTIFICATION_SEQUENCE_NUMBER"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Represents an invalid action notification sequence number. {@link InputMethodManagerService}
always issues a positive integer for action notification sequence numbers. Thus -1 is
guaranteed to be different from any valid sequence number.
"
      end

      attribute 679938 "mNextUserActionNotificationSequenceNumber"
	private explicit_type "int"
	init_value "
            NOT_AN_ACTION_NOTIFICATION_SEQUENCE_NUMBER"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The next sequence number that is to be sent to {@link InputMethodManagerService} via
{@link IInputMethodManager#notifyUserAction(int)} at once when a user action is observed.
"
      end

      attribute 680066 "mLastSentUserActionNotificationSequenceNumber"
	private explicit_type "int"
	init_value "
            NOT_AN_ACTION_NOTIFICATION_SEQUENCE_NUMBER"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The last sequence number that is already sent to {@link InputMethodManagerService}.
"
      end

      classrelation 260098 // mCursorAnchorInfo (<unidirectional association>)
	relation 259202 --->
	  a role_name "mCursorAnchorInfo" init_value " null" private
	    comment "
The instance that has previously been sent to the input method.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 260098 // mCursorAnchorInfo (<unidirectional association>)
	  b parent class_ref 239362 // CursorAnchorInfo
      end

      attribute 680194 "mViewTopLeft"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer to retrieve the view location in screen coordinates in {@link #updateCursor}.
"
      end

      attribute 680322 "mViewToScreenMatrix"
	const_attribute private explicit_type "Matrix"
	init_value " new Matrix()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The matrix to convert the view location into screen coordinates in {@link #updateCursor}.
"
      end

      attribute 680450 "mBindSequence"
	package explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -----------------------------------------------------------

Sequence number of this binding, as returned by the server.
"
      end

      attribute 680578 "mCurId"
	package explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "ID of the method we are bound to.
"
      end

      attribute 680706 "mCurMethod"
	package explicit_type "IInputMethodSession"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The actual instance of the method to make calls on it.
"
      end

      classrelation 260226 // mCurChannel (<unidirectional association>)
	relation 259330 --->
	  a role_name "mCurChannel" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 260226 // mCurChannel (<unidirectional association>)
	  b parent class_ref 225538 // InputChannel
      end

      class 239490 "ImeInputEventSender"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 261250 // <generalisation>
	  relation 260354 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 261250 // <generalisation>
	    b parent class_ref 226178 // InputEventSender
	end

	operation 959234 "ImeInputEventSender"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "inputChannel" type class_ref 225538 // InputChannel
	    param inout name "looper" explicit_type "Looper"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 959362 "onInputEventFinished"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "seq" explicit_type "int"
	    param inout name "handled" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 260354 // mCurSender (<unidirectional association>)
	relation 259458 --->
	  a role_name "mCurSender" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 260354 // mCurSender (<unidirectional association>)
	  b parent class_ref 239490 // ImeInputEventSender
      end

      attribute 680834 "REQUEST_UPDATE_CURSOR_ANCHOR_INFO_NONE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 680962 "mRequestUpdateCursorAnchorInfoMonitorMode"
	private explicit_type "int"
	init_value " REQUEST_UPDATE_CURSOR_ANCHOR_INFO_NONE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The monitor mode for {@link #updateCursorAnchorInfo(View, CursorAnchorInfo)}.
"
      end

      class 239618 "PendingEvent"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 261378 // <realization>
	  relation 260482 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 261378 // <realization>
	    b parent class_ref 205826 // Runnable
	end

	classrelation 261506 // mEvent (<unidirectional association>)
	  relation 260610 --->
	    a role_name "mEvent" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 261506 // mEvent (<unidirectional association>)
	    b parent class_ref 216578 // InputEvent
	end

	attribute 683394 "mToken"
	  public explicit_type "Object"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 683522 "mInputMethodId"
	  public explicit_type "String"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 261634 // mCallback (<unidirectional association>)
	  relation 260738 --->
	    a role_name "mCallback" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 261634 // mCallback (<unidirectional association>)
	    b parent class_ref 238850 // FinishedInputEventCallback
	end

	attribute 683650 "mHandler"
	  public explicit_type "Handler"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 683778 "mHandled"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 959490 "recycle"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 959618 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 260482 // mPendingEventPool (<unidirectional association>)
	relation 259586 --->
	  stereotype "Pool"
	  a role_name "mPendingEventPool" init_value " new SimplePool<PendingEvent>(20)" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 260482 // mPendingEventPool (<unidirectional association>)
	  b parent class_ref 239618 // PendingEvent
      end

      classrelation 260610 // mPendingEvents (<unidirectional association>)
	relation 259714 --->
	  stereotype "SparseArray"
	  a role_name "mPendingEvents" init_value " new SparseArray<PendingEvent>(20)" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 260610 // mPendingEvents (<unidirectional association>)
	  b parent class_ref 239618 // PendingEvent
      end

      attribute 681090 "MSG_DUMP"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -----------------------------------------------------------"
      end

      attribute 681218 "MSG_BIND"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 681346 "MSG_UNBIND"
	class_attribute const_attribute package explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 681474 "MSG_SET_ACTIVE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 681602 "MSG_SEND_INPUT_EVENT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 681730 "MSG_TIMEOUT_INPUT_EVENT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 681858 "MSG_FLUSH_INPUT_EVENT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 681986 "MSG_SET_USER_ACTION_NOTIFICATION_SEQUENCE_NUMBER"
	class_attribute const_attribute package explicit_type "int"
	init_value " 9"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 682242 "mClient"
	const_attribute package explicit_type "IInputMethodClient.Stub"
	init_value " new IInputMethodClient.Stub() {
        @Override
        protected void dump(FileDescriptor fd, PrintWriter fout, String[] args) {
            // No need to check for dump permission, since we only give this
            // interface to the system.
            CountDownLatch latch = new CountDownLatch(1);
            SomeArgs sargs = SomeArgs.obtain();
            sargs.arg1 = fd;
            sargs.arg2 = fout;
            sargs.arg3 = args;
            sargs.arg4 = latch;
            mH.sendMessage(mH.obtainMessage(MSG_DUMP, sargs));
            try {
                if (!latch.await(5, TimeUnit.SECONDS)) {
                    fout.println(\"Timeout waiting for dump\");
                }
            } catch (InterruptedException e) {
                fout.println(\"Interrupted waiting for dump\");
            }
        }

        @Override
        public void setUsingInputMethod(boolean state) {
        }

        @Override
        public void onBindMethod(InputBindResult res) {
            mH.sendMessage(mH.obtainMessage(MSG_BIND, res));
        }

        @Override
        public void onUnbindMethod(int sequence) {
            mH.sendMessage(mH.obtainMessage(MSG_UNBIND, sequence, 0));
        }

        @Override
        public void setActive(boolean active) {
            mH.sendMessage(mH.obtainMessage(MSG_SET_ACTIVE, active ? 1 : 0, 0));
        }

        @Override
        public void setUserActionNotificationSequenceNumber(int sequenceNumber) {
            mH.sendMessage(mH.obtainMessage(MSG_SET_USER_ACTION_NOTIFICATION_SEQUENCE_NUMBER,
                    sequenceNumber, 0));
        }
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 261122 // mDummyInputConnection (<unidirectional association>)
	relation 260226 --->
	  a role_name "mDummyInputConnection" init_value " new BaseInputConnection(this, false)" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 261122 // mDummyInputConnection (<unidirectional association>)
	  b parent class_ref 222210 // InputConnection
      end

      operation 948994 "InputMethodManager"
	package explicit_return_type ""
	nparams 2
	  param inout name "service" explicit_type "IInputMethodManager"
	  param inout name "looper" explicit_type "Looper"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 949122 "getInstance"
	class_operation public return_type class_ref 238722 // InputMethodManager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the global InputMethodManager instance, creating it if it
doesn't already exist.
@hide"
      end

      operation 949250 "peekInstance"
	class_operation public return_type class_ref 238722 // InputMethodManager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private optimization: retrieve the global InputMethodManager instance,
if it exists.
@hide"
      end

      operation 949378 "getClient"
	public explicit_return_type "IInputMethodClient"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 949506 "getInputContext"
	public explicit_return_type "IInputContext"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 949634 "getInputMethodList"
	public return_type class_ref 239874 // InputMethodInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 949762 "getEnabledInputMethodList"
	public return_type class_ref 239874 // InputMethodInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 949890 "getEnabledInputMethodSubtypeList"
	public return_type class_ref 240002 // InputMethodSubtype
	nparams 2
	  param inout name "imi" type class_ref 239874 // InputMethodInfo
	  param inout name "allowsImplicitlySelectedSubtypes" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of enabled input method subtypes for the specified input method info.
@param imi An input method info whose subtypes list will be returned.
@param allowsImplicitlySelectedSubtypes A boolean flag to allow to return the implicitly
selected subtypes. If an input method info doesn't have enabled subtypes, the framework
will implicitly enable subtypes according to the current system language."
      end

      operation 950018 "showStatusIcon"
	public explicit_return_type "void"
	nparams 3
	  param inout name "imeToken" explicit_type "IBinder"
	  param in name "packageName" explicit_type "String"
	  param in name "iconId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 950146 "hideStatusIcon"
	public explicit_return_type "void"
	nparams 1
	  param inout name "imeToken" explicit_type "IBinder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 950274 "setImeWindowStatus"
	public explicit_return_type "void"
	nparams 3
	  param inout name "imeToken" explicit_type "IBinder"
	  param in name "vis" explicit_type "int"
	  param in name "backDisposition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 950402 "setFullscreenMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fullScreen" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 950530 "registerSuggestionSpansForNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "spans" explicit_type "SuggestionSpan"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 950658 "notifySuggestionPicked"
	public explicit_return_type "void"
	nparams 3
	  param inout name "span" explicit_type "SuggestionSpan"
	  param in name "originalString" explicit_type "String"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 950786 "isFullscreenMode"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows you to discover whether the attached input method is running
in fullscreen mode.  Return true if it is fullscreen, entirely covering
your UI, else returns false."
      end

      operation 950914 "isActive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "view" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the given view is the currently active view for the
input method."
      end

      operation 951042 "isActive"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if any view is currently active in the input method."
      end

      operation 951170 "isAcceptingText"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the currently served view is accepting full text edits.
If false, it has no input connection, so can only handle raw key events."
      end

      operation 951298 "clearBindingLocked"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset all of the state associated with being bound to an input method."
      end

      operation 951426 "setInputChannelLocked"
	package explicit_return_type "void"
	nparams 1
	  param inout name "channel" type class_ref 225538 // InputChannel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 951554 "clearConnectionLocked"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset all of the state associated with a served view being connected
to an input method"
      end

      operation 951682 "finishInputLocked"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disconnect any existing input connection, clearing the served view."
      end

      operation 951810 "notifyInputConnectionFinished"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the served view that the current InputConnection will no longer be used."
      end

      operation 951938 "reportFinishInputConnection"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 222210 // InputConnection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called from the FINISH_INPUT_CONNECTION message above.
@hide"
      end

      operation 952066 "displayCompletions"
	public explicit_return_type "void"
	nparams 2
	  param inout name "view" type class_ref 208898 // View
	  param inout name "completions" type class_ref 239234 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 952194 "updateExtractedText"
	public explicit_return_type "void"
	nparams 3
	  param inout name "view" type class_ref 208898 // View
	  param in name "token" explicit_type "int"
	  param inout name "text" type class_ref 240130 // ExtractedText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 682370 "SHOW_IMPLICIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #showSoftInput} to indicate that this is an implicit
request to show the input window, not as the result of a direct request
by the user.  The window may not be shown in this case.
"
      end

      attribute 682498 "SHOW_FORCED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #showSoftInput} to indicate that the user has forced
the input method open (such as by long-pressing menu) so it should
not be closed until they explicitly do so.
"
      end

      operation 952322 "showSoftInput"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "view" type class_ref 208898 // View
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synonym for {@link #showSoftInput(View, int, ResultReceiver)} without
a result receiver: explicitly request that the current input method's
soft input area be shown to the user, if needed.

@param view The currently focused view, which would like to receive
soft keyboard input.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #SHOW_IMPLICIT} bit set."
      end

      attribute 682626 "RESULT_UNCHANGED_SHOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for the {@link ResultReceiver} result code from
{@link #showSoftInput(View, int, ResultReceiver)} and
{@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
state of the soft input window was unchanged and remains shown.
"
      end

      attribute 682754 "RESULT_UNCHANGED_HIDDEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for the {@link ResultReceiver} result code from
{@link #showSoftInput(View, int, ResultReceiver)} and
{@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
state of the soft input window was unchanged and remains hidden.
"
      end

      attribute 682882 "RESULT_SHOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for the {@link ResultReceiver} result code from
{@link #showSoftInput(View, int, ResultReceiver)} and
{@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
state of the soft input window changed from hidden to shown.
"
      end

      attribute 683010 "RESULT_HIDDEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for the {@link ResultReceiver} result code from
{@link #showSoftInput(View, int, ResultReceiver)} and
{@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
state of the soft input window changed from shown to hidden.
"
      end

      operation 952450 "showSoftInput"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "view" type class_ref 208898 // View
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" explicit_type "ResultReceiver"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Explicitly request that the current input method's soft input area be
shown to the user, if needed.  Call this if the user interacts with
your view in such a way that they have expressed they would like to
start performing input into it.

@param view The currently focused view, which would like to receive
soft keyboard input.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #SHOW_IMPLICIT} bit set.
@param resultReceiver If non-null, this will be called by the IME when
it has processed your request to tell you what it has done.  The result
code you receive may be either {@link #RESULT_UNCHANGED_SHOWN},
{@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or
{@link #RESULT_HIDDEN}."
      end

      operation 952578 "showSoftInputUnchecked"
	public explicit_return_type "void"
	nparams 2
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" explicit_type "ResultReceiver"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      attribute 683138 "HIDE_IMPLICIT_ONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
input window should only be hidden if it was not explicitly shown
by the user.
"
      end

      attribute 683266 "HIDE_NOT_ALWAYS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
input window should normally be hidden, unless it was originally
shown with {@link #SHOW_FORCED}.
"
      end

      operation 952706 "hideSoftInputFromWindow"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "windowToken" explicit_type "IBinder"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synonym for {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}
without a result: request to hide the soft input window from the
context of the window that is currently accepting input.

@param windowToken The token of the window that is making the request,
as returned by {@link View#getWindowToken() View.getWindowToken()}.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set."
      end

      operation 952834 "hideSoftInputFromWindow"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "windowToken" explicit_type "IBinder"
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" explicit_type "ResultReceiver"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request to hide the soft input window from the context of the window
that is currently accepting input.  This should be called as a result
of the user doing some actually than fairly explicitly requests to
have the input window hidden.

@param windowToken The token of the window that is making the request,
as returned by {@link View#getWindowToken() View.getWindowToken()}.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set.
@param resultReceiver If non-null, this will be called by the IME when
it has processed your request to tell you what it has done.  The result
code you receive may be either {@link #RESULT_UNCHANGED_SHOWN},
{@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or
{@link #RESULT_HIDDEN}."
      end

      operation 952962 "toggleSoftInputFromWindow"
	public explicit_return_type "void"
	nparams 3
	  param inout name "windowToken" explicit_type "IBinder"
	  param in name "showFlags" explicit_type "int"
	  param in name "hideFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method toggles the input method window display.
If the input window is already displayed, it gets hidden. 
If not the input window will be displayed.
@param windowToken The token of the window that is making the request,
as returned by {@link View#getWindowToken() View.getWindowToken()}.
@param showFlags Provides additional operating flags.  May be
0 or have the {@link #SHOW_IMPLICIT},
{@link #SHOW_FORCED} bit set.
@param hideFlags Provides additional operating flags.  May be
0 or have the {@link #HIDE_IMPLICIT_ONLY},
{@link #HIDE_NOT_ALWAYS} bit set."
      end

      operation 953090 "toggleSoftInput"
	public explicit_return_type "void"
	nparams 2
	  param in name "showFlags" explicit_type "int"
	  param in name "hideFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method toggles the input method window display.
If the input window is already displayed, it gets hidden. 
If not the input window will be displayed.
@param showFlags Provides additional operating flags.  May be
0 or have the {@link #SHOW_IMPLICIT},
{@link #SHOW_FORCED} bit set.
@param hideFlags Provides additional operating flags.  May be
0 or have the {@link #HIDE_IMPLICIT_ONLY},
{@link #HIDE_NOT_ALWAYS} bit set.
@hide"
      end

      operation 953218 "restartInput"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the input method is currently connected to the given view,
restart it with its new contents.  You should call this when the text
within your view changes outside of the normal input method or key
input flow, such as when an application calls TextView.setText().

@param view The view whose text has changed."
      end

      operation 953346 "startInputInner"
	package explicit_return_type "boolean"
	nparams 4
	  param inout name "windowGainingFocus" explicit_type "IBinder"
	  param in name "controlFlags" explicit_type "int"
	  param in name "softInputMode" explicit_type "int"
	  param in name "windowFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 953474 "windowDismissed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "appWindowToken" explicit_type "IBinder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When the focused window is dismissed, this method is called to finish the
input method started before.
@hide"
      end

      operation 953602 "focusIn"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call this when a view receives focus.
@hide"
      end

      operation 953730 "focusInLocked"
	package explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 953858 "focusOut"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call this when a view loses focus.
@hide"
      end

      operation 953986 "scheduleCheckFocusLocked"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 954114 "checkFocus"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 954242 "checkFocusNoStartInput"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "forceNewFocus" explicit_type "boolean"
	  param inout name "finishComposingText" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 954370 "closeCurrentInput"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 954498 "onWindowFocus"
	public explicit_return_type "void"
	nparams 5
	  param inout name "rootView" type class_ref 208898 // View
	  param inout name "focusedView" type class_ref 208898 // View
	  param in name "softInputMode" explicit_type "int"
	  param inout name "first" explicit_type "boolean"
	  param in name "windowFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by ViewAncestor when its window gets input focus.
@hide"
      end

      operation 954626 "startGettingWindowFocus"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rootView" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 954754 "updateSelection"
	public explicit_return_type "void"
	nparams 5
	  param inout name "view" type class_ref 208898 // View
	  param in name "selStart" explicit_type "int"
	  param in name "selEnd" explicit_type "int"
	  param in name "candidatesStart" explicit_type "int"
	  param in name "candidatesEnd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the current selection range.

<p><strong>Editor authors</strong>, you need to call this method whenever
the cursor moves in your editor. Remember that in addition to doing this, your
editor needs to always supply current cursor values in
{@link EditorInfo#initialSelStart} and {@link EditorInfo#initialSelEnd} every
time {@link android.view.View#onCreateInputConnection(EditorInfo)} is
called, which happens whenever the keyboard shows up or the focus changes
to a text field, among other cases.</p>"
      end

      operation 954882 "viewClicked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notify the event when the user tapped or clicked the text view."
      end

      operation 955010 "isWatchingCursor"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "view" type class_ref 208898 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Return true if the current input method wants to watch the location
of the input editor's cursor in its window.

@deprecated Use {@link InputConnection#requestCursorUpdates(int)} instead."
      end

      operation 955138 "isCursorAnchorInfoEnabled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the current input method wants to be notified when cursor/anchor location
is changed.

@hide"
      end

      operation 955266 "setUpdateCursorAnchorInfoMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the requested mode for {@link #updateCursorAnchorInfo(View, CursorAnchorInfo)}.

@hide"
      end

      operation 955394 "updateCursor"
	public explicit_return_type "void"
	nparams 5
	  param inout name "view" type class_ref 208898 // View
	  param in name "left" explicit_type "int"
	  param in name "top" explicit_type "int"
	  param in name "right" explicit_type "int"
	  param in name "bottom" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Report the current cursor location in its window.

@deprecated Use {@link #updateCursorAnchorInfo(View, CursorAnchorInfo)} instead."
      end

      operation 955522 "updateCursorAnchorInfo"
	public explicit_return_type "void"
	nparams 2
	  param inout name "view" type class_ref 208898 // View
	  param in name "cursorAnchorInfo" type class_ref 239362 // CursorAnchorInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report positional change of the text insertion point and/or characters in the composition
string."
      end

      operation 955650 "sendAppPrivateCommand"
	public explicit_return_type "void"
	nparams 3
	  param inout name "view" type class_ref 208898 // View
	  param in name "action" explicit_type "String"
	  param inout name "data" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call {@link InputMethodSession#appPrivateCommand(String, Bundle)
InputMethodSession.appPrivateCommand()} on the current Input Method.
@param view Optional View that is sending the command, or null if
you want to send the command regardless of the view that is attached
to the input method.
@param action Name of the command to be performed.  This <em>must</em>
be a scoped name, i.e. prefixed with a package name you own, so that
different developers will not create conflicting commands.
@param data Any data to include with the command."
      end

      operation 955778 "setInputMethod"
	public explicit_return_type "void"
	nparams 2
	  param inout name "token" explicit_type "IBinder"
	  param in name "id" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force switch to a new input method component. This can only be called
from an application or a service which has a token of the currently active input method.
@param token Supplies the identifying token given to an input method
when it was started, which allows it to perform this operation on
itself.
@param id The unique identifier for the new input method to be switched to."
      end

      operation 955906 "setInputMethodAndSubtype"
	public explicit_return_type "void"
	nparams 3
	  param inout name "token" explicit_type "IBinder"
	  param in name "id" explicit_type "String"
	  param inout name "subtype" type class_ref 240002 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force switch to a new input method and subtype. This can only be called
from an application or a service which has a token of the currently active input method.
@param token Supplies the identifying token given to an input method
when it was started, which allows it to perform this operation on
itself.
@param id The unique identifier for the new input method to be switched to.
@param subtype The new subtype of the new input method to be switched to."
      end

      operation 956034 "hideSoftInputFromInputMethod"
	public explicit_return_type "void"
	nparams 2
	  param inout name "token" explicit_type "IBinder"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close/hide the input method's soft input area, so the user no longer
sees it or can interact with it.  This can only be called
from the currently active input method, as validated by the given token.

@param token Supplies the identifying token given to an input method
when it was started, which allows it to perform this operation on
itself.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #HIDE_IMPLICIT_ONLY},
{@link #HIDE_NOT_ALWAYS} bit set."
      end

      operation 956162 "showSoftInputFromInputMethod"
	public explicit_return_type "void"
	nparams 2
	  param inout name "token" explicit_type "IBinder"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Show the input method's soft input area, so the user 
sees the input method window and can interact with it.
This can only be called from the currently active input method,
as validated by the given token.

@param token Supplies the identifying token given to an input method
when it was started, which allows it to perform this operation on
itself.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #SHOW_IMPLICIT} or
{@link #SHOW_FORCED} bit set."
      end

      operation 956290 "dispatchInputEvent"
	public explicit_return_type "int"
	nparams 4
	  param inout name "event" type class_ref 216578 // InputEvent
	  param inout name "token" explicit_type "Object"
	  param inout name "callback" type class_ref 238850 // FinishedInputEventCallback
	  param inout name "handler" explicit_type "Handler"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dispatches an input event to the IME.

Returns {@link #DISPATCH_HANDLED} if the event was handled.
Returns {@link #DISPATCH_NOT_HANDLED} if the event was not handled.
Returns {@link #DISPATCH_IN_PROGRESS} if the event is in progress and the
callback will be invoked later.

@hide"
      end

      operation 956418 "sendInputEventAndReportResultOnMainLooper"
	package explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 239618 // PendingEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Must be called on the main looper"
      end

      operation 956546 "sendInputEventOnMainLooperLocked"
	package explicit_return_type "int"
	nparams 1
	  param inout name "p" type class_ref 239618 // PendingEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Must be called on the main looper"
      end

      operation 956674 "finishedInputEvent"
	package explicit_return_type "void"
	nparams 3
	  param in name "seq" explicit_type "int"
	  param inout name "handled" explicit_type "boolean"
	  param inout name "timeout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 956802 "invokeFinishedInputEventCallback"
	package explicit_return_type "void"
	nparams 2
	  param inout name "p" type class_ref 239618 // PendingEvent
	  param inout name "handled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Assumes the event has already been removed from the queue."
      end

      operation 956930 "flushPendingEventsLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 957058 "obtainPendingEventLocked"
	private return_type class_ref 239618 // PendingEvent
	nparams 5
	  param inout name "event" type class_ref 216578 // InputEvent
	  param inout name "token" explicit_type "Object"
	  param in name "inputMethodId" explicit_type "String"
	  param inout name "callback" type class_ref 238850 // FinishedInputEventCallback
	  param inout name "handler" explicit_type "Handler"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 957186 "recyclePendingEventLocked"
	private explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 239618 // PendingEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 957314 "showInputMethodPicker"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 957442 "showInputMethodPickerLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 957570 "showInputMethodAndSubtypeEnabler"
	public explicit_return_type "void"
	nparams 1
	  param in name "imiId" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Show the settings for enabling subtypes of the specified input method.
@param imiId An input method, whose subtypes settings will be shown. If imiId is null,
subtypes of all input methods will be shown."
      end

      operation 957698 "getCurrentInputMethodSubtype"
	public return_type class_ref 240002 // InputMethodSubtype
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current input method subtype. This subtype is one of the subtypes in
the current input method. This method returns null when the current input method doesn't
have any input method subtype."
      end

      operation 957826 "setCurrentInputMethodSubtype"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "subtype" type class_ref 240002 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Switch to a new input method subtype of the current input method.
@param subtype A new input method subtype to switch.
@return true if the current subtype was successfully switched. When the specified subtype is
null, this method returns false."
      end

      operation 957954 "notifyUserAction"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notify that a user took some action with this input method.
@hide"
      end

      operation 958082 "getShortcutInputMethodsAndSubtypes"
	public return_type class_ref 239874 // InputMethodInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Map<${type}, List<InputMethodSubtype>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map of all shortcut input method info and their subtypes."
      end

      operation 958210 "getInputMethodWindowVisibleHeight"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The current height of the input method window.
@hide"
      end

      operation 958338 "switchToLastInputMethod"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "imeToken" explicit_type "IBinder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force switch to the last used input method and subtype. If the last input method didn't have
any subtypes, the framework will simply switch to the last input method with no subtype
specified.
@param imeToken Supplies the identifying token given to an input method when it was started,
which allows it to perform this operation on itself.
@return true if the current input method and subtype was successfully switched to the last
used input method and subtype."
      end

      operation 958466 "switchToNextInputMethod"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "imeToken" explicit_type "IBinder"
	  param inout name "onlyCurrentIme" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force switch to the next input method and subtype. If there is no IME enabled except
current IME and subtype, do nothing.
@param imeToken Supplies the identifying token given to an input method when it was started,
which allows it to perform this operation on itself.
@param onlyCurrentIme if true, the framework will find the next subtype which
belongs to the current IME
@return true if the current input method and subtype was successfully switched to the next
input method and subtype."
      end

      operation 958594 "shouldOfferSwitchingToNextInputMethod"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "imeToken" explicit_type "IBinder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the current IME needs to offer the users ways to switch to a next input
method (e.g. a globe key.).
When an IME sets supportsSwitchingToNextInputMethod and this method returns true,
the IME has to offer ways to to invoke {@link #switchToNextInputMethod} accordingly.
<p> Note that the system determines the most appropriate next input method
and subtype in order to provide the consistent user experience in switching
between IMEs and subtypes.
@param imeToken Supplies the identifying token given to an input method when it was started,
which allows it to perform this operation on itself."
      end

      operation 958722 "setAdditionalInputMethodSubtypes"
	public explicit_return_type "void"
	nparams 2
	  param in name "imiId" explicit_type "String"
	  param inout name "subtypes" type class_ref 240002 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set additional input method subtypes. Only a process which shares the same uid with the IME
can add additional input method subtypes to the IME.
Please note that a subtype's status is stored in the system.
For example, enabled subtypes are remembered by the framework even after they are removed
by using this method. If you re-add the same subtypes again,
they will just get enabled. If you want to avoid such conflicts, for instance, you may
want to create a \"different\" new subtype even with the same locale and mode,
by changing its extra value. The different subtype won't get affected by the stored past
status. (You may want to take a look at {@link InputMethodSubtype#hashCode()} to refer
to the current implementation.)
@param imiId Id of InputMethodInfo which additional input method subtypes will be added to.
@param subtypes subtypes will be added as additional subtypes of the current input method."
      end

      operation 958850 "getLastInputMethodSubtype"
	public return_type class_ref 240002 // InputMethodSubtype
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 958978 "doDump"
	package explicit_return_type "void"
	nparams 3
	  param inout name "fd" explicit_type "FileDescriptor"
	  param inout name "fout" explicit_type "PrintWriter"
	  param inout name "args" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 239234 "CompletionInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Information about a single text completion that an editor has reported to
an input method.

<p>This class encapsulates a completion offered by an application
that wants it to be presented to the user by the IME. Usually, apps
present their completions directly in a scrolling list for example
(UI developers will usually use or extend
{@see android.widget.AutoCompleteTextView} to implement this).
However, in some cases, the editor may not be visible, as in the
case in extract mode where the IME has taken over the full
screen. In this case, the editor can choose to send their
completions to the IME for display.

<p>Most applications who want to send completions to an IME should use
{@link android.widget.AutoCompleteTextView} as this class makes this
process easy. In this case, the application would not have to deal directly
with this class.

<p>An application who implements its own editor and wants direct control
over this would create an array of CompletionInfo objects, and send it to the IME using
{@link InputMethodManager#displayCompletions(View, CompletionInfo[])}.
The IME would present the completions however they see fit, and
call back to the editor through
{@link InputConnection#commitCompletion(CompletionInfo)}.
The application can then pick up the commit event by overriding
{@link android.widget.TextView#onCommitCompletion(CompletionInfo)}."
      classrelation 287362 // <realization>
	relation 286466 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 287362 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 785410 "mId"
	const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 785538 "mPosition"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 785666 "mText"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 785794 "mLabel"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1142914 "CompletionInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "id" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param inout name "text" explicit_type "CharSequence"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a simple completion with just text, no label.

@param id An id that get passed as is (to the editor's discretion)
@param index An index that get passed as is. Typically this is the
index in the list of completions inside the editor.
@param text The text that should be inserted into the editor when
this completion is chosen."
      end

      operation 1143042 "CompletionInfo"
	public explicit_return_type ""
	nparams 4
	  param in name "id" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param inout name "text" explicit_type "CharSequence"
	  param inout name "label" explicit_type "CharSequence"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a full completion with both text and label. The text is
what will get inserted into the editor, while the label is what
the IME should display. If they are the same, use the version
of the constructor without a `label' argument.

@param id An id that get passed as is (to the editor's discretion)
@param index An index that get passed as is. Typically this is the
index in the list of completions inside the editor.
@param text The text that should be inserted into the editor when
this completion is chosen.
@param label The text that the IME should be showing among the
completions list."
      end

      operation 1143170 "CompletionInfo"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1143298 "getId"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the abstract identifier for this completion, typically
corresponding to the id associated with it in the original adapter."
      end

      operation 1143426 "getPosition"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the original position of this completion, typically
corresponding to its position in the original adapter."
      end

      operation 1143554 "getText"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the actual text associated with this completion.  This is the
real text that will be inserted into the editor if the user selects it."
      end

      operation 1143682 "getLabel"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the user-visible label for the completion, or null if the plain
text should be shown.  If non-null, this will be what the user sees as
the completion option instead of the actual text."
      end

      operation 1143810 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1143938 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 287490 // CREATOR (<unidirectional association>)
	relation 286594 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value " new Parcelable.Creator<CompletionInfo>() {
        public CompletionInfo createFromParcel(Parcel source) {
            return new CompletionInfo(source);
        }

        public CompletionInfo[] newArray(int size) {
            return new CompletionInfo[size];
        }
    }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 287490 // CREATOR (<unidirectional association>)
	  b parent class_ref 239234 // CompletionInfo
      end

      operation 1144066 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 239362 "CursorAnchorInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Positional information about the text insertion point and characters in the composition string.

<p>This class encapsulates locations of the text insertion point and the composition string in
the screen coordinates so that IMEs can render their UI components near where the text is
actually inserted.</p>"
      classrelation 287874 // <realization>
	relation 286978 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 287874 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 786306 "mSelectionStart"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the first character of the selected text (inclusive). {@code -1} when there is
no text selection.
"
      end

      attribute 786434 "mSelectionEnd"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the first character of the selected text (exclusive). {@code -1} when there is
no text selection.
"
      end

      attribute 786562 "mComposingTextStart"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the first character of the composing text (inclusive). {@code -1} when there is
no composing text.
"
      end

      attribute 786690 "mComposingText"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The text, tracked as a composing region.
"
      end

      attribute 786818 "mInsertionMarkerFlags"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flags of the insertion marker. See {@link #FLAG_HAS_VISIBLE_REGION} for example.
"
      end

      attribute 786946 "mInsertionMarkerHorizontal"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Horizontal position of the insertion marker, in the local coordinates that will be
transformed with the transformation matrix when rendered on the screen. This should be
calculated or compatible with {@link Layout#getPrimaryHorizontal(int)}. This can be
{@code java.lang.Float.NaN} when no value is specified.
"
      end

      attribute 787074 "mInsertionMarkerTop"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Vertical position of the insertion marker, in the local coordinates that will be
transformed with the transformation matrix when rendered on the screen. This should be
calculated or compatible with {@link Layout#getLineTop(int)}. This can be
{@code java.lang.Float.NaN} when no value is specified.
"
      end

      attribute 787202 "mInsertionMarkerBaseline"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Vertical position of the insertion marker, in the local coordinates that will be
transformed with the transformation matrix when rendered on the screen. This should be
calculated or compatible with {@link Layout#getLineBaseline(int)}. This can be
{@code java.lang.Float.NaN} when no value is specified.
"
      end

      attribute 787330 "mInsertionMarkerBottom"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Vertical position of the insertion marker, in the local coordinates that will be
transformed with the transformation matrix when rendered on the screen. This should be
calculated or compatible with {@link Layout#getLineBottom(int)}. This can be
{@code java.lang.Float.NaN} when no value is specified.
"
      end

      classrelation 288002 // mCharacterBoundsArray (<unidirectional association>)
	relation 287106 --->
	  a role_name "mCharacterBoundsArray" const_relation private
	    comment "
Container of rectangular position of characters, keyed with character index in a unit of
Java chars, in the local coordinates that will be transformed with the transformation matrix
when rendered on the screen.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 288002 // mCharacterBoundsArray (<unidirectional association>)
	  b parent class_ref 252546 // SparseRectFArray
      end

      attribute 787458 "mMatrix"
	const_attribute private explicit_type "Matrix"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Transformation matrix that is applied to any positional information of this class to
transform local coordinates into screen coordinates.
"
      end

      attribute 787586 "FLAG_HAS_VISIBLE_REGION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #getInsertionMarkerFlags()} and {@link #getCharacterBoundsFlags(int)}: the
insertion marker or character bounds have at least one visible region.
"
      end

      attribute 787714 "FLAG_HAS_INVISIBLE_REGION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #getInsertionMarkerFlags()} and {@link #getCharacterBoundsFlags(int)}: the
insertion marker or character bounds have at least one invisible (clipped) region.
"
      end

      attribute 787842 "FLAG_IS_RTL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #getInsertionMarkerFlags()} and {@link #getCharacterBoundsFlags(int)}: the
insertion marker or character bounds is placed at right-to-left (RTL) character.
"
      end

      operation 1145218 "CursorAnchorInfo"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1145346 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      operation 1145474 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1145602 "areSameFloatImpl"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "b" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two float values. Returns {@code true} if {@code a} and {@code b} are
{@link Float#NaN} at the same time."
      end

      operation 1145730 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1145858 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 252674 "Builder"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 787970 "mSelectionStart"
	  private explicit_type "int"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 788098 "mSelectionEnd"
	  private explicit_type "int"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 788226 "mComposingTextStart"
	  private explicit_type "int"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 788354 "mComposingText"
	  private explicit_type "CharSequence"
	  init_value " null"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 788482 "mInsertionMarkerHorizontal"
	  private explicit_type "float"
	  init_value " Float.NaN"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 788610 "mInsertionMarkerTop"
	  private explicit_type "float"
	  init_value " Float.NaN"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 788738 "mInsertionMarkerBaseline"
	  private explicit_type "float"
	  init_value " Float.NaN"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 788866 "mInsertionMarkerBottom"
	  private explicit_type "float"
	  init_value " Float.NaN"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 788994 "mInsertionMarkerFlags"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 288130 // mCharacterBoundsArrayBuilder (<unidirectional association>)
	  relation 287234 --->
	    a role_name "mCharacterBoundsArrayBuilder" init_value " null" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 288130 // mCharacterBoundsArrayBuilder (<unidirectional association>)
	    b parent class_ref 252802 // SparseRectFArrayBuilder
	end

	attribute 789122 "mMatrix"
	  const_attribute private explicit_type "Matrix"
	  init_value " new Matrix(Matrix.IDENTITY_MATRIX)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 789250 "mMatrixInitialized"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1145986 "setSelectionRange"
	  public return_type class_ref 252674 // Builder
	  nparams 2
	    param in name "newStart" explicit_type "int"
	    param in name "newEnd" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the text range of the selection. Calling this can be skipped if there is no
selection."
	end

	operation 1146114 "setComposingText"
	  public return_type class_ref 252674 // Builder
	  nparams 2
	    param in name "composingTextStart" explicit_type "int"
	    param in name "composingText" explicit_type "CharSequence"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the text range of the composing text. Calling this can be skipped if there is
no composing text.
@param composingTextStart index where the composing text starts.
@param composingText the entire composing text."
	end

	operation 1146242 "setInsertionMarkerLocation"
	  public return_type class_ref 252674 // Builder
	  nparams 5
	    param in name "horizontalPosition" explicit_type "float"
	    param in name "lineTop" explicit_type "float"
	    param in name "lineBaseline" explicit_type "float"
	    param in name "lineBottom" explicit_type "float"
	    param in name "flags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}, final ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the location of the text insertion point (zero width cursor) as a rectangle in
local coordinates. Calling this can be skipped when there is no text insertion point;
however if there is an insertion point, editors must call this method.
@param horizontalPosition horizontal position of the insertion marker, in the local
coordinates that will be transformed with the transformation matrix when rendered on the
screen. This should be calculated or compatible with
{@link Layout#getPrimaryHorizontal(int)}.
@param lineTop vertical position of the insertion marker, in the local coordinates that
will be transformed with the transformation matrix when rendered on the screen. This
should be calculated or compatible with {@link Layout#getLineTop(int)}.
@param lineBaseline vertical position of the insertion marker, in the local coordinates
that will be transformed with the transformation matrix when rendered on the screen. This
should be calculated or compatible with {@link Layout#getLineBaseline(int)}.
@param lineBottom vertical position of the insertion marker, in the local coordinates
that will be transformed with the transformation matrix when rendered on the screen. This
should be calculated or compatible with {@link Layout#getLineBottom(int)}.
@param flags flags of the insertion marker. See {@link #FLAG_HAS_VISIBLE_REGION} for
example."
	end

	operation 1146370 "addCharacterBounds"
	  public return_type class_ref 252674 // Builder
	  nparams 6
	    param in name "index" explicit_type "int"
	    param in name "left" explicit_type "float"
	    param in name "top" explicit_type "float"
	    param in name "right" explicit_type "float"
	    param in name "bottom" explicit_type "float"
	    param in name "flags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}, final ${t4} ${p4}, final ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds the bounding box of the character specified with the index.

@param index index of the character in Java chars units. Must be specified in
ascending order across successive calls.
@param left x coordinate of the left edge of the character in local coordinates.
@param top y coordinate of the top edge of the character in local coordinates.
@param right x coordinate of the right edge of the character in local coordinates.
@param bottom y coordinate of the bottom edge of the character in local coordinates.
@param flags flags for this character bounds. See {@link #FLAG_HAS_VISIBLE_REGION},
{@link #FLAG_HAS_INVISIBLE_REGION} and {@link #FLAG_IS_RTL}. These flags must be
specified when necessary.
@throws IllegalArgumentException If the index is a negative value, or not greater than
all of the previously called indices."
	end

	operation 1146498 "setMatrix"
	  public return_type class_ref 252674 // Builder
	  nparams 1
	    param in name "matrix" explicit_type "Matrix"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the matrix that transforms local coordinates into screen coordinates.
@param matrix transformation matrix from local coordinates into screen coordinates. null
is interpreted as an identity matrix."
	end

	operation 1146626 "build"
	  public return_type class_ref 239362 // CursorAnchorInfo
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return {@link CursorAnchorInfo} using parameters in this {@link Builder}.
@throws IllegalArgumentException if one or more positional parameters are specified but
the coordinate transformation matrix is not provided via {@link #setMatrix(Matrix)}."
	end

	operation 1146754 "reset"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets the internal state so that this instance can be reused to build another
instance of {@link CursorAnchorInfo}."
	end
      end

      operation 1146882 "CursorAnchorInfo"
	private explicit_return_type ""
	nparams 1
	  param in name "builder" type class_ref 252674 // Builder
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1147010 "getSelectionStart"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index where the selection starts.
@return {@code -1} if there is no selection."
      end

      operation 1147138 "getSelectionEnd"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index where the selection ends.
@return {@code -1} if there is no selection."
      end

      operation 1147266 "getComposingTextStart"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index where the composing text starts.
@return {@code -1} if there is no composing text."
      end

      operation 1147394 "getComposingText"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the entire composing text.
@return {@code null} if there is no composition."
      end

      operation 1147522 "getInsertionMarkerFlags"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flag of the insertion marker.
@return the flag of the insertion marker. {@code 0} if no flag is specified."
      end

      operation 1147650 "getInsertionMarkerHorizontal"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the horizontal start of the insertion marker, in the local coordinates that will
be transformed with {@link #getMatrix()} when rendered on the screen.
@return x coordinate that is compatible with {@link Layout#getPrimaryHorizontal(int)}.
Pay special care to RTL/LTR handling.
{@code java.lang.Float.NaN} if not specified.
@see Layout#getPrimaryHorizontal(int)"
      end

      operation 1147778 "getInsertionMarkerTop"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vertical top position of the insertion marker, in the local coordinates that
will be transformed with {@link #getMatrix()} when rendered on the screen.
@return y coordinate that is compatible with {@link Layout#getLineTop(int)}.
{@code java.lang.Float.NaN} if not specified."
      end

      operation 1147906 "getInsertionMarkerBaseline"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vertical baseline position of the insertion marker, in the local coordinates
that will be transformed with {@link #getMatrix()} when rendered on the screen.
@return y coordinate that is compatible with {@link Layout#getLineBaseline(int)}.
{@code java.lang.Float.NaN} if not specified."
      end

      operation 1148034 "getInsertionMarkerBottom"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vertical bottom position of the insertion marker, in the local coordinates
that will be transformed with {@link #getMatrix()} when rendered on the screen.
@return y coordinate that is compatible with {@link Layout#getLineBottom(int)}.
{@code java.lang.Float.NaN} if not specified."
      end

      operation 1148162 "getCharacterBounds"
	public explicit_return_type "RectF"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@link RectF} that indicates the location of the character
specified with the index.
@param index index of the character in a Java chars.
@return the character bounds in local coordinates as a new instance of {@link RectF}."
      end

      operation 1148290 "getCharacterBoundsFlags"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flags associated with the character bounds specified with the index.
@param index index of the character in a Java chars.
@return {@code 0} if no flag is specified."
      end

      operation 1148418 "getMatrix"
	public explicit_return_type "Matrix"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@link android.graphics.Matrix} that indicates the transformation
matrix that is to be applied other positional data in this class.
@return a new instance (copy) of the transformation matrix."
      end

      classrelation 288258 // CREATOR (<unidirectional association>)
	relation 287362 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value " new Parcelable.Creator<CursorAnchorInfo>() {
        @Override
        public CursorAnchorInfo createFromParcel(Parcel source) {
            return new CursorAnchorInfo(source);
        }

        @Override
        public CursorAnchorInfo[] newArray(int size) {
            return new CursorAnchorInfo[size];
        }
    }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 288258 // CREATOR (<unidirectional association>)
	  b parent class_ref 239362 // CursorAnchorInfo
      end

      operation 1148546 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 239874 "InputMethodInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used to specify meta information of an input method.

<p>It should be defined in an XML resource file with an {@code &lt;input-method>} element.
For more information, see the guide to
<a href=\"{@docRoot}guide/topics/text/creating-input-method.html\">
Creating an Input Method</a>.</p>

@see InputMethodSubtype

@attr ref android.R.styleable#InputMethod_settingsActivity
@attr ref android.R.styleable#InputMethod_isDefault
@attr ref android.R.styleable#InputMethod_supportsSwitchingToNextInputMethod"
      classrelation 289922 // <realization>
	relation 289026 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 289922 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 796162 "TAG"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"InputMethodInfo\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 796290 "mService"
	const_attribute package explicit_type "ResolveInfo"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The Service that implements this input method component.
"
      end

      attribute 796418 "mId"
	const_attribute package explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The unique string Id to identify the input method.  This is generated
from the input method component.
"
      end

      attribute 796546 "mSettingsActivityName"
	const_attribute package explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The input method setting activity's name, used by the system settings to
launch the setting activity of this input method.
"
      end

      attribute 796674 "mIsDefaultResId"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The resource in the input method's .apk that holds a boolean indicating
whether it should be considered the default input method for this
system.  This is a resource ID instead of the final value so that it
can change based on the configuration (in particular locale).
"
      end

      classrelation 290050 // mSubtypes (<unidirectional association>)
	relation 289154 --->
	  a role_name "mSubtypes" const_relation private
	    comment "
An array-like container of the subtypes.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 290050 // mSubtypes (<unidirectional association>)
	  b parent class_ref 253698 // InputMethodSubtypeArray
      end

      attribute 796802 "mIsAuxIme"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 796930 "mForceDefault"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Caveat: mForceDefault must be false for production. This flag is only for test.
"
      end

      attribute 797058 "mSupportsSwitchingToNextInputMethod"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The flag whether this IME supports ways to switch to a next input method (e.g. globe key.)
"
      end

      operation 1155586 "InputMethodInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param inout name "service" explicit_type "ResolveInfo"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param context The Context in which we are parsing the input method.
@param service The ResolveInfo returned from the package manager about
this input method's component."
      end

      operation 1155714 "InputMethodInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "context" explicit_type "Context"
	  param inout name "service" explicit_type "ResolveInfo"
	  param inout name "additionalSubtypesMap" explicit_type "Map<String, List<InputMethodSubtype>>"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param context The Context in which we are parsing the input method.
@param service The ResolveInfo returned from the package manager about
this input method's component.
@param additionalSubtypes additional subtypes being added to this InputMethodInfo
@hide"
      end

      operation 1155842 "InputMethodInfo"
	package explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1155970 "InputMethodInfo"
	public explicit_return_type ""
	nparams 4
	  param in name "packageName" explicit_type "String"
	  param in name "className" explicit_type "String"
	  param inout name "label" explicit_type "CharSequence"
	  param in name "settingsActivity" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Temporary API for creating a built-in input method for test."
      end

      operation 1156098 "InputMethodInfo"
	public explicit_return_type ""
	nparams 6
	  param inout name "ri" explicit_type "ResolveInfo"
	  param inout name "isAuxIme" explicit_type "boolean"
	  param in name "settingsActivity" explicit_type "String"
	  param inout name "subtypes" explicit_type "List<InputMethodSubtype>"
	  param in name "isDefaultResId" explicit_type "int"
	  param inout name "forceDefault" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Temporary API for creating a built-in input method for test.
@hide"
      end

      operation 1156226 "InputMethodInfo"
	public explicit_return_type ""
	nparams 7
	  param inout name "ri" explicit_type "ResolveInfo"
	  param inout name "isAuxIme" explicit_type "boolean"
	  param in name "settingsActivity" explicit_type "String"
	  param inout name "subtypes" explicit_type "List<InputMethodSubtype>"
	  param in name "isDefaultResId" explicit_type "int"
	  param inout name "forceDefault" explicit_type "boolean"
	  param inout name "supportsSwitchingToNextInputMethod" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Temporary API for creating a built-in input method for test.
@hide"
      end

      operation 1156354 "buildDummyResolveInfo"
	class_operation private explicit_return_type "ResolveInfo"
	nparams 3
	  param in name "packageName" explicit_type "String"
	  param in name "className" explicit_type "String"
	  param inout name "label" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1156482 "getId"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a unique ID for this input method.  The ID is generated from
the package and class name implementing the method."
      end

      operation 1156610 "getPackageName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the .apk package that implements this input method."
      end

      operation 1156738 "getServiceName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the class name of the service component that implements
this input method."
      end

      operation 1156866 "getServiceInfo"
	public explicit_return_type "ServiceInfo"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the raw information about the Service implementing this
input method.  Do not modify the returned object."
      end

      operation 1156994 "getComponent"
	public explicit_return_type "ComponentName"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the component of the service that implements this input
method."
      end

      operation 1157122 "loadLabel"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "pm" explicit_type "PackageManager"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the user-displayed label for this input method.

@param pm Supply a PackageManager used to load the input method's
resources."
      end

      operation 1157250 "loadIcon"
	public explicit_return_type "Drawable"
	nparams 1
	  param inout name "pm" explicit_type "PackageManager"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the user-displayed icon for this input method.

@param pm Supply a PackageManager used to load the input method's
resources."
      end

      operation 1157378 "getSettingsActivity"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the class name of an activity that provides a settings UI for
the input method.  You can launch this activity be starting it with
an {@link android.content.Intent} whose action is MAIN and with an
explicit {@link android.content.ComponentName}
composed of {@link #getPackageName} and the class name returned here.

<p>A null will be returned if there is no settings activity associated
with the input method.</p>"
      end

      operation 1157506 "getSubtypeCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the count of the subtypes of Input Method."
      end

      operation 1157634 "getSubtypeAt"
	public return_type class_ref 240002 // InputMethodSubtype
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Input Method's subtype at the specified index.

@param index the index of the subtype to return."
      end

      operation 1157762 "getIsDefaultResourceId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the resource identifier of a resource inside of this input
method's .apk that determines whether it should be considered a
default input method for the system."
      end

      operation 1157890 "isDefault"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "context" explicit_type "Context"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return whether or not this ime is a default ime or not.
@hide"
      end

      operation 1158018 "dump"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pw" explicit_type "Printer"
	  param in name "prefix" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1158146 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1158274 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Used to test whether the given parameter object is an
{@link InputMethodInfo} and its Id is the same to this one.

@return true if the given parameter object is an
        {@link InputMethodInfo} and its Id is the same to this one."
      end

      operation 1158402 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1158530 "isAuxiliaryIme"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1158658 "supportsSwitchingToNextInputMethod"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if this input method supports ways to switch to a next input method.
@hide"
      end

      operation 1158786 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 290178 // CREATOR (<unidirectional association>)
	relation 289282 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value " new Parcelable.Creator<InputMethodInfo>() {
        @Override
        public InputMethodInfo createFromParcel(Parcel source) {
            return new InputMethodInfo(source);
        }

        @Override
        public InputMethodInfo[] newArray(int size) {
            return new InputMethodInfo[size];
        }
    }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 290178 // CREATOR (<unidirectional association>)
	  b parent class_ref 239874 // InputMethodInfo
      end

      operation 1158914 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 240002 "InputMethodSubtype"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used to specify meta information of a subtype contained in an input method editor
(IME). Subtype can describe locale (e.g. en_US, fr_FR...) and mode (e.g. voice, keyboard...),
and is used for IME switch and settings. The input method subtype allows the system to bring up
the specified subtype of the designated IME directly.

<p>It should be defined in an XML resource file of the input method with the
<code>&lt;subtype&gt;</code> element, which resides within an {@code &lt;input-method>} element.
For more information, see the guide to
<a href=\"{@docRoot}guide/topics/text/creating-input-method.html\">
Creating an Input Method</a>.</p>

@see InputMethodInfo

@attr ref android.R.styleable#InputMethod_Subtype_label
@attr ref android.R.styleable#InputMethod_Subtype_icon
@attr ref android.R.styleable#InputMethod_Subtype_imeSubtypeLocale
@attr ref android.R.styleable#InputMethod_Subtype_imeSubtypeMode
@attr ref android.R.styleable#InputMethod_Subtype_imeSubtypeExtraValue
@attr ref android.R.styleable#InputMethod_Subtype_isAuxiliary
@attr ref android.R.styleable#InputMethod_Subtype_overridesImplicitlyEnabledSubtype
@attr ref android.R.styleable#InputMethod_Subtype_subtypeId
@attr ref android.R.styleable#InputMethod_Subtype_isAsciiCapable"
      classrelation 290306 // <realization>
	relation 289410 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 290306 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 797186 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " InputMethodSubtype.class.getSimpleName()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 797314 "EXTRA_VALUE_PAIR_SEPARATOR"
	class_attribute const_attribute private explicit_type "String"
	init_value " \",\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 797442 "EXTRA_VALUE_KEY_VALUE_SEPARATOR"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"=\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 797570 "EXTRA_KEY_UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME"
	class_attribute const_attribute private explicit_type "String"
	init_value "
            \"UntranslatableReplacementStringInSubtypeName\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " TODO: remove this"
      end

      attribute 797698 "mIsAuxiliary"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 797826 "mOverridesImplicitlyEnabledSubtype"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 797954 "mIsAsciiCapable"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 798082 "mSubtypeHashCode"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 798210 "mSubtypeIconResId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 798338 "mSubtypeNameResId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 798466 "mSubtypeId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 798594 "mSubtypeLocale"
	const_attribute private explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 798722 "mSubtypeMode"
	const_attribute private explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 798850 "mSubtypeExtraValue"
	const_attribute private explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 798978 "mExtraValueHashMapCache"
	volatile private explicit_type "String, String"
	stereotype "HashMap"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 253954 "InputMethodSubtypeBuilder"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1160706 "setIsAuxiliary"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param inout name "isAuxiliary" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param isAuxiliary should true when this subtype is auxiliary, false otherwise.
An auxiliary subtype has the following differences with a regular subtype:
- An auxiliary subtype cannot be chosen as the default IME in Settings.
- The framework will never switch to this subtype through
  {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
Note that the subtype will still be available in the IME switcher.
The intent is to allow for IMEs to specify they are meant to be invoked temporarily
in a one-shot way, and to return to the previous IME once finished (e.g. voice input)."
	end

	attribute 799106 "mIsAuxiliary"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1160834 "setOverridesImplicitlyEnabledSubtype"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param inout name "overridesImplicitlyEnabledSubtype" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param overridesImplicitlyEnabledSubtype should be true if this subtype should be
enabled by default if no other subtypes in the IME are enabled explicitly. Note that a
subtype with this parameter set will not be shown in the list of subtypes in each IME's
subtype enabler. A canonical use of this would be for an IME to supply an \"automatic\"
subtype that adapts to the current system language."
	end

	attribute 799234 "mOverridesImplicitlyEnabledSubtype"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1160962 "setIsAsciiCapable"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param inout name "isAsciiCapable" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param isAsciiCapable should be true if this subtype is ASCII capable. If the subtype
is ASCII capable, it should guarantee that the user can input ASCII characters with
this subtype. This is important because many password fields only allow
ASCII-characters."
	end

	attribute 799362 "mIsAsciiCapable"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1161090 "setSubtypeIconResId"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param in name "subtypeIconResId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param subtypeIconResId is a resource ID of the subtype icon drawable."
	end

	attribute 799490 "mSubtypeIconResId"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1161218 "setSubtypeNameResId"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param in name "subtypeNameResId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param subtypeNameResId is the resource ID of the subtype name string.
The string resource may have exactly one %s in it. If present,
the %s part will be replaced with the locale's display name by
the formatter. Please refer to {@link #getDisplayName} for details."
	end

	attribute 799618 "mSubtypeNameResId"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1161346 "setSubtypeId"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param in name "subtypeId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param subtypeId is the unique ID for this subtype. The input method framework keeps
track of enabled subtypes by ID. When the IME package gets upgraded, enabled IDs will
stay enabled even if other attributes are different. If the ID is unspecified or 0,
Arrays.hashCode(new Object[] {locale, mode, extraValue,
isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead."
	end

	attribute 799746 "mSubtypeId"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1161474 "setSubtypeLocale"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param in name "subtypeLocale" explicit_type "String"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param subtypeLocale is the locale supported by this subtype."
	end

	attribute 799874 "mSubtypeLocale"
	  private explicit_type "String"
	  init_value " \"\""
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1161602 "setSubtypeMode"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param in name "subtypeMode" explicit_type "String"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param subtypeMode is the mode supported by this subtype."
	end

	attribute 800002 "mSubtypeMode"
	  private explicit_type "String"
	  init_value " \"\""
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1161730 "setSubtypeExtraValue"
	  public return_type class_ref 253954 // InputMethodSubtypeBuilder
	  nparams 1
	    param in name "subtypeExtraValue" explicit_type "String"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param subtypeExtraValue is the extra value of the subtype. This string is free-form,
but the API supplies tools to deal with a key-value comma-separated list; see
{@link #containsExtraValueKey} and {@link #getExtraValueOf}."
	end

	attribute 800130 "mSubtypeExtraValue"
	  private explicit_type "String"
	  init_value " \"\""
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1161858 "build"
	  public return_type class_ref 240002 // InputMethodSubtype
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return InputMethodSubtype using parameters in this InputMethodSubtypeBuilder."
	end
      end

      operation 1161986 "getBuilder"
	class_operation private return_type class_ref 253954 // InputMethodSubtypeBuilder
	nparams 9
	  param in name "nameId" explicit_type "int"
	  param in name "iconId" explicit_type "int"
	  param in name "locale" explicit_type "String"
	  param in name "mode" explicit_type "String"
	  param in name "extraValue" explicit_type "String"
	  param inout name "isAuxiliary" explicit_type "boolean"
	  param inout name "overridesImplicitlyEnabledSubtype" explicit_type "boolean"
	  param in name "id" explicit_type "int"
	  param inout name "isAsciiCapable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1162114 "InputMethodSubtype"
	public explicit_return_type ""
	nparams 7
	  param in name "nameId" explicit_type "int"
	  param in name "iconId" explicit_type "int"
	  param in name "locale" explicit_type "String"
	  param in name "mode" explicit_type "String"
	  param in name "extraValue" explicit_type "String"
	  param inout name "isAuxiliary" explicit_type "boolean"
	  param inout name "overridesImplicitlyEnabledSubtype" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with no subtype ID specified.
@deprecated use {@link InputMethodSubtypeBuilder} instead.
Arguments for this constructor have the same meanings as
{@link InputMethodSubtype#InputMethodSubtype(int, int, String, String, String, boolean,
boolean, int)} except \"id\"."
      end

      operation 1162242 "InputMethodSubtype"
	public explicit_return_type ""
	nparams 8
	  param in name "nameId" explicit_type "int"
	  param in name "iconId" explicit_type "int"
	  param in name "locale" explicit_type "String"
	  param in name "mode" explicit_type "String"
	  param in name "extraValue" explicit_type "String"
	  param inout name "isAuxiliary" explicit_type "boolean"
	  param inout name "overridesImplicitlyEnabledSubtype" explicit_type "boolean"
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.
@deprecated use {@link InputMethodSubtypeBuilder} instead.
\"isAsciiCapable\" is \"false\" in this constructor.
@param nameId Resource ID of the subtype name string. The string resource may have exactly
one %s in it. If there is, the %s part will be replaced with the locale's display name by
the formatter. Please refer to {@link #getDisplayName} for details.
@param iconId Resource ID of the subtype icon drawable.
@param locale The locale supported by the subtype
@param mode The mode supported by the subtype
@param extraValue The extra value of the subtype. This string is free-form, but the API
supplies tools to deal with a key-value comma-separated list; see
{@link #containsExtraValueKey} and {@link #getExtraValueOf}.
@param isAuxiliary true when this subtype is auxiliary, false otherwise. An auxiliary
subtype will not be shown in the list of enabled IMEs for choosing the current IME in
the Settings even when this subtype is enabled. Please note that this subtype will still
be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch
to this subtype while an IME is shown. The framework will never switch the current IME to
this subtype by {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
@param overridesImplicitlyEnabledSubtype true when this subtype should be enabled by default
if no other subtypes in the IME are enabled explicitly. Note that a subtype with this
parameter being true will not be shown in the list of subtypes in each IME's subtype enabler.
Having an \"automatic\" subtype is an example use of this flag.
@param id The unique ID for the subtype. The input method framework keeps track of enabled
subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even if
other attributes are different. If the ID is unspecified or 0,
Arrays.hashCode(new Object[] {locale, mode, extraValue,
isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead."
      end

      operation 1162370 "InputMethodSubtype"
	private explicit_return_type ""
	nparams 1
	  param inout name "builder" type class_ref 253954 // InputMethodSubtypeBuilder
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.
@param builder Builder for InputMethodSubtype"
      end

      operation 1162498 "InputMethodSubtype"
	package explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1162626 "getNameResId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Resource ID of the subtype name string."
      end

      operation 1162754 "getIconResId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Resource ID of the subtype icon drawable."
      end

      operation 1162882 "getLocale"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The locale of the subtype. This method returns the \"locale\" string parameter passed
to the constructor."
      end

      operation 1163010 "getMode"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The mode of the subtype."
      end

      operation 1163138 "getExtraValue"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The extra value of the subtype."
      end

      operation 1163266 "isAuxiliary"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if this subtype is auxiliary, false otherwise. An auxiliary subtype will not be
shown in the list of enabled IMEs for choosing the current IME in the Settings even when this
subtype is enabled. Please note that this subtype will still be shown in the list of IMEs in
the IME switcher to allow the user to tentatively switch to this subtype while an IME is
shown. The framework will never switch the current IME to this subtype by
{@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input)."
      end

      operation 1163394 "overridesImplicitlyEnabledSubtype"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true when this subtype will be enabled by default if no other subtypes in the IME
are enabled explicitly, false otherwise. Note that a subtype with this method returning true
will not be shown in the list of subtypes in each IME's subtype enabler. Having an
\"automatic\" subtype is an example use of this flag."
      end

      operation 1163522 "isAsciiCapable"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if this subtype is Ascii capable, false otherwise. If the subtype is ASCII
capable, it should guarantee that the user can input ASCII characters with this subtype.
This is important because many password fields only allow ASCII-characters."
      end

      operation 1163650 "getDisplayName"
	public explicit_return_type "CharSequence"
	nparams 3
	  param inout name "context" explicit_type "Context"
	  param in name "packageName" explicit_type "String"
	  param inout name "appInfo" explicit_type "ApplicationInfo"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param context Context will be used for getting Locale and PackageManager.
@param packageName The package name of the IME
@param appInfo The application info of the IME
@return a display name for this subtype. The string resource of the label (mSubtypeNameResId)
may have exactly one %s in it. If there is, the %s part will be replaced with the locale's
display name by the formatter. If there is not, this method returns the string specified by
mSubtypeNameResId. If mSubtypeNameResId is not specified (== 0), it's up to the framework to
generate an appropriate display name."
      end

      operation 1163778 "getExtraValueHashMap"
	private explicit_return_type "HashMap<String, String>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1163906 "containsExtraValueKey"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The string of ExtraValue in subtype should be defined as follows:
example: key0,key1=value1,key2,key3,key4=value4
@param key The key of extra value
@return The subtype contains specified the extra value"
      end

      operation 1164034 "getExtraValueOf"
	public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The string of ExtraValue in subtype should be defined as follows:
example: key0,key1=value1,key2,key3,key4=value4
@param key The key of extra value
@return The value of the specified key"
      end

      operation 1164162 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1164290 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1164418 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1164546 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "parcelableFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 290434 // CREATOR (<unidirectional association>)
	relation 289538 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value " new Parcelable.Creator<InputMethodSubtype>() {
        @Override
        public InputMethodSubtype createFromParcel(Parcel source) {
            return new InputMethodSubtype(source);
        }

        @Override
        public InputMethodSubtype[] newArray(int size) {
            return new InputMethodSubtype[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 290434 // CREATOR (<unidirectional association>)
	  b parent class_ref 240002 // InputMethodSubtype
      end

      operation 1164674 "constructLocaleFromString"
	class_operation private explicit_return_type "Locale"
	nparams 1
	  param in name "localeStr" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1164802 "hashCodeInternal"
	class_operation private explicit_return_type "int"
	nparams 6
	  param in name "locale" explicit_type "String"
	  param in name "mode" explicit_type "String"
	  param in name "extraValue" explicit_type "String"
	  param inout name "isAuxiliary" explicit_type "boolean"
	  param inout name "overridesImplicitlyEnabledSubtype" explicit_type "boolean"
	  param inout name "isAsciiCapable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1164930 "sort"
	class_operation public return_type class_ref 240002 // InputMethodSubtype
	nparams 4
	  param inout name "context" explicit_type "Context"
	  param in name "flags" explicit_type "int"
	  param inout name "imi" type class_ref 239874 // InputMethodInfo
	  param inout name "subtypeList" explicit_type "List<InputMethodSubtype>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sort the list of InputMethodSubtype
@param context Context will be used for getting localized strings from IME
@param flags Flags for the sort order
@param imi InputMethodInfo of which subtypes are subject to be sorted
@param subtypeList List of InputMethodSubtype which will be sorted
@return Sorted list of subtypes
@hide"
      end
    end

    class 240130 "ExtractedText"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Information about text that has been extracted for use by an input method.

This contains information about a portion of the currently edited text,
that the IME should display into its own interface while in extracted mode."
      classrelation 288770 // <realization>
	relation 287874 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 288770 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 793346 "text"
	public explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The text that has been extracted.
"
      end

      attribute 793474 "startOffset"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The offset in the overall text at which the extracted text starts.
"
      end

      attribute 793602 "partialStartOffset"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If the content is a report of a partial text change, this is the
offset where the change starts and it runs until
{@link #partialEndOffset}.  If the content is the full text, this
field is -1.
"
      end

      attribute 793730 "partialEndOffset"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If the content is a report of a partial text change, this is the offset
where the change ends.  Note that the actual text may be larger or
smaller than the difference between this and {@link #partialStartOffset},
meaning a reduction or increase, respectively, in the total text.
"
      end

      attribute 793858 "selectionStart"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The offset where the selection currently starts within the extracted
text.  The real selection start position is at
<var>startOffset</var>+<var>selectionStart</var>.
"
      end

      attribute 793986 "selectionEnd"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The offset where the selection currently ends within the extracted
text.  The real selection end position is at
<var>startOffset</var>+<var>selectionEnd</var>.
"
      end

      attribute 794114 "FLAG_SINGLE_LINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit for {@link #flags}: set if the text being edited can only be on
a single line.
"
      end

      attribute 794242 "FLAG_SELECTING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit for {@link #flags}: set if the editor is currently in selection mode.

This happens when a hardware keyboard with latched keys is attached and
the shift key is currently latched.
"
      end

      attribute 794370 "flags"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Additional bit flags of information about the edited text.
"
      end

      operation 1149186 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 288898 // CREATOR (<unidirectional association>)
	relation 288002 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value " new Parcelable.Creator<ExtractedText>() {
        public ExtractedText createFromParcel(Parcel source) {
            ExtractedText res = new ExtractedText();
            res.text = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
            res.startOffset = source.readInt();
            res.partialStartOffset = source.readInt();
            res.partialEndOffset = source.readInt();
            res.selectionStart = source.readInt();
            res.selectionEnd = source.readInt();
            res.flags = source.readInt();
            return res;
        }

        public ExtractedText[] newArray(int size) {
            return new ExtractedText[size];
        }
    }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 288898 // CREATOR (<unidirectional association>)
	  b parent class_ref 240130 // ExtractedText
      end

      operation 1149314 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 251906 "ComposingText"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 286722 // <realization>
	relation 285826 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 286722 // <realization>
	  b parent class_ref 252034 // NoCopySpan
      end
    end

    class 252162 "BaseInputConnection"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class for implementors of the InputConnection interface, taking care
of most of the common behavior for providing a connection to an Editable.
Implementors of this class will want to be sure to implement
{@link #getEditable} to provide access to their own editable object, and
to refer to the documentation in {@link InputConnection}."
      classrelation 286850 // <realization>
	relation 285954 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 286850 // <realization>
	  b parent class_ref 222210 // InputConnection
      end

      attribute 784642 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 784770 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"BaseInputConnection\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 784898 "COMPOSING"
	class_attribute const_attribute package explicit_type "Object"
	init_value " new ComposingText()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 286978 // mIMM (<unidirectional association>)
	relation 286082 --->
	  a role_name "mIMM" const_relation protected
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 286978 // mIMM (<unidirectional association>)
	  b parent class_ref 238722 // InputMethodManager
      end

      classrelation 287106 // mTargetView (<unidirectional association>)
	relation 286210 --->
	  a role_name "mTargetView" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 287106 // mTargetView (<unidirectional association>)
	  b parent class_ref 208898 // View
      end

      attribute 785026 "mDummyMode"
	const_attribute package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 785154 "mDefaultComposingSpans"
	private explicit_type "Object"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 785282 "mEditable"
	package explicit_type "Editable"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 287234 // mKeyCharacterMap (<unidirectional association>)
	relation 286338 --->
	  a role_name "mKeyCharacterMap" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 287234 // mKeyCharacterMap (<unidirectional association>)
	  b parent class_ref 216834 // KeyCharacterMap
      end

      operation 1138562 "BaseInputConnection"
	package explicit_return_type ""
	nparams 2
	  param inout name "mgr" type class_ref 238722 // InputMethodManager
	  param inout name "fullEditor" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1138690 "BaseInputConnection"
	public explicit_return_type ""
	nparams 2
	  param inout name "targetView" type class_ref 208898 // View
	  param inout name "fullEditor" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1138818 "removeComposingSpans"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "text" explicit_type "Spannable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1138946 "setComposingSpans"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "text" explicit_type "Spannable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1139074 "setComposingSpans"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "text" explicit_type "Spannable"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 1139202 "getComposingSpanStart"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "text" explicit_type "Spannable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1139330 "getComposingSpanEnd"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "text" explicit_type "Spannable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1139458 "getEditable"
	public explicit_return_type "Editable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the target of edit operations.  The default implementation
returns its own fake editable that is just used for composing text;
subclasses that are real text editors should override this and
supply their own."
      end

      operation 1139586 "beginBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation does nothing."
      end

      operation 1139714 "endBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation does nothing."
      end

      operation 1139842 "reportFinish"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when this InputConnection is no longer used by the InputMethodManager.

@hide"
      end

      operation 1139970 "clearMetaKeyStates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "states" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation uses
{@link MetaKeyKeyListener#clearMetaKeyState(long, int)
MetaKeyKeyListener.clearMetaKeyState(long, int)} to clear the state."
      end

      operation 1140098 "commitCompletion"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "text" type class_ref 239234 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation does nothing and returns false."
      end

      operation 1140226 "commitCorrection"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "correctionInfo" type class_ref 252418 // CorrectionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation does nothing and returns false."
      end

      operation 1140354 "commitText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation replaces any existing composing text with
the given text.  In addition, only if dummy mode, a key event is
sent for the new text and the current editable buffer cleared."
      end

      operation 1140482 "deleteSurroundingText"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "beforeLength" explicit_type "int"
	  param in name "afterLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation performs the deletion around the current
selection position of the editable text.
@param beforeLength
@param afterLength"
      end

      operation 1140610 "finishComposingText"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation removes the composing state from the
current editable text.  In addition, only if dummy mode, a key event is
sent for the new text and the current editable buffer cleared."
      end

      operation 1140738 "getCursorCapsMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "reqModes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation uses TextUtils.getCapsMode to get the
cursor caps mode for the current selection position in the editable
text, unless in dummy mode in which case 0 is always returned."
      end

      operation 1140866 "getExtractedText"
	public return_type class_ref 240130 // ExtractedText
	nparams 2
	  param inout name "request" type class_ref 252290 // ExtractedTextRequest
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation always returns null."
      end

      operation 1140994 "getTextBeforeCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "length" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation returns the given amount of text from the
current cursor position in the buffer."
      end

      operation 1141122 "getSelectedText"
	public explicit_return_type "CharSequence"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation returns the text currently selected, or null if none is
selected."
      end

      operation 1141250 "getTextAfterCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "length" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation returns the given amount of text from the
current cursor position in the buffer."
      end

      operation 1141378 "performEditorAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "actionCode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation turns this into the enter key."
      end

      operation 1141506 "performContextMenuAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation does nothing."
      end

      operation 1141634 "performPrivateCommand"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "action" explicit_type "String"
	  param inout name "data" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation does nothing."
      end

      operation 1141762 "requestCursorUpdates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "cursorUpdateMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation does nothing."
      end

      operation 1141890 "setComposingText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation places the given text into the editable,
replacing any existing composing text.  The new text is marked as
in a composing state with the composing style."
      end

      operation 1142018 "setComposingRegion"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1142146 "setSelection"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation changes the selection position in the
current editable text."
      end

      operation 1142274 "sendKeyEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 212866 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides standard implementation for sending a key event to the window
attached to the input connection's view."
      end

      operation 1142402 "reportFullscreenMode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates InputMethodManager with the current fullscreen mode."
      end

      operation 1142530 "sendCurrentText"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1142658 "ensureDefaultComposingSpans"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1142786 "replaceText"
	private explicit_return_type "void"
	nparams 3
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	  param inout name "composing" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 252290 "ExtractedTextRequest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Description of what an input method would like from an application when
extract text from its input editor."
      classrelation 289026 // <realization>
	relation 288130 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 289026 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 794498 "token"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Arbitrary integer that can be supplied in the request, which will be
delivered back when reporting updates.
"
      end

      attribute 794626 "flags"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Additional request flags, having the same possible values as the
flags parameter of {@link InputConnection#getTextBeforeCursor
InputConnection.getTextBeforeCursor()}.
"
      end

      attribute 794754 "hintMaxLines"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Hint for the maximum number of lines to return.
"
      end

      attribute 794882 "hintMaxChars"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Hint for the maximum number of characters to return.
"
      end

      operation 1149442 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 289154 // CREATOR (<unidirectional association>)
	relation 288258 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value " new Parcelable.Creator<ExtractedTextRequest>() {
        public ExtractedTextRequest createFromParcel(Parcel source) {
            ExtractedTextRequest res = new ExtractedTextRequest();
            res.token = source.readInt();
            res.flags = source.readInt();
            res.hintMaxLines = source.readInt();
            res.hintMaxChars = source.readInt();
            return res;
        }

        public ExtractedTextRequest[] newArray(int size) {
            return new ExtractedTextRequest[size];
        }
    }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 289154 // CREATOR (<unidirectional association>)
	  b parent class_ref 252290 // ExtractedTextRequest
      end

      operation 1149570 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 252418 "CorrectionInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Information about a single text correction that an editor has reported to
an input method."
      classrelation 287618 // <realization>
	relation 286722 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 287618 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 785922 "mOffset"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 786050 "mOldText"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 786178 "mNewText"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1144194 "CorrectionInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "offset" explicit_type "int"
	  param inout name "oldText" explicit_type "CharSequence"
	  param inout name "newText" explicit_type "CharSequence"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param offset The offset in the edited text where the old and new text start.
@param oldText The old text that has been replaced.
@param newText The replacement text."
      end

      operation 1144322 "CorrectionInfo"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1144450 "getOffset"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the offset position of this correction in the text. Both the {@link #getOldText()} and
{@link #getNewText()} start at this offset."
      end

      operation 1144578 "getOldText"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the text that has actually been typed by the user, and which has been corrected."
      end

      operation 1144706 "getNewText"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the new text that corrects what was typed by the user."
      end

      operation 1144834 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1144962 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 287746 // CREATOR (<unidirectional association>)
	relation 286850 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<CorrectionInfo>() {
                public CorrectionInfo createFromParcel(Parcel source) {
                    return new CorrectionInfo(source);
                }
                public CorrectionInfo[] newArray(int size) {
                    return new CorrectionInfo[size];
                }
            }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 287746 // CREATOR (<unidirectional association>)
	  b parent class_ref 252418 // CorrectionInfo
      end

      operation 1145090 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 252546 "SparseRectFArray"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An implementation of SparseArray specialized for {@link android.graphics.RectF}.
<p>
As this is a sparse array, it represents an array of {@link RectF} most of which are null. This
class could be in some other packages like android.graphics or android.util but currently
belong to android.view.inputmethod because this class is hidden and used only in input method
framework.
</p>
@hide"
      class 252802 "SparseRectFArrayBuilder"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1166850 "checkIndex"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "key" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Throws {@link IllegalArgumentException} to make sure that this class is correctly used.
@param key key to be checked."
	end

	operation 1166978 "ensureBufferSize"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Extends the internal array if necessary."
	end

	operation 1167106 "append"
	  public return_type class_ref 252802 // SparseRectFArrayBuilder
	  nparams 6
	    param in name "key" explicit_type "int"
	    param in name "left" explicit_type "float"
	    param in name "top" explicit_type "float"
	    param in name "right" explicit_type "float"
	    param in name "bottom" explicit_type "float"
	    param in name "flags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}, final ${t4} ${p4}, final ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the rectangle with an integer key.
@param key the key to be associated with the rectangle. It must be greater than all
existing keys that have been previously specified.
@param left left of the rectangle.
@param top top of the rectangle.
@param right right of the rectangle.
@param bottom bottom of the rectangle.
@param flags an arbitrary integer value to be associated with this rectangle.
@return the receiver object itself for chaining method calls.
@throws IllegalArgumentException If the index is not greater than all of existing keys."
	end

	attribute 801282 "mCount"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 801410 "mKeys"
	  private explicit_type "int"
	  multiplicity "[]"
	  init_value " null"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 801538 "mCoordinates"
	  private explicit_type "float"
	  multiplicity "[]"
	  init_value " null"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 801666 "mFlagsArray"
	  private explicit_type "int"
	  multiplicity "[]"
	  init_value " null"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 801794 "INITIAL_SIZE"
	  class_attribute private explicit_type "int"
	  init_value " 16"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1167234 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1167362 "build"
	  public return_type class_ref 252546 // SparseRectFArray
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return {@link SparseRectFArray} using parameters in this {@link SparseRectFArray}."
	end

	operation 1167490 "reset"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 290690 // <realization>
	relation 289794 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 290690 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 800898 "mKeys"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The keys, in ascending order, of those {@link RectF} that are not null. For example,
{@code [null, null, null, Rect1, null, Rect2]} would be represented by {@code [3,5]}.
@see #mCoordinates
"
      end

      attribute 801026 "mCoordinates"
	const_attribute private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Stores coordinates of the rectangles, in the order of
{@code rects[mKeys[0]].left}, {@code rects[mKeys[0]].top},
{@code rects[mKeys[0]].right}, {@code rects[mKeys[0]].bottom},
{@code rects[mKeys[1]].left}, {@code rects[mKeys[1]].top},
{@code rects[mKeys[1]].right}, {@code rects[mKeys[1]].bottom},
{@code rects[mKeys[2]].left}, {@code rects[mKeys[2]].top}, ....
"
      end

      attribute 801154 "mFlagsArray"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Stores visibility information.
"
      end

      operation 1166210 "SparseRectFArray"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1166338 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      operation 1166466 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1166594 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1166722 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1167618 "SparseRectFArray"
	private explicit_return_type ""
	nparams 1
	  param in name "builder" type class_ref 252802 // SparseRectFArrayBuilder
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1167746 "get"
	public explicit_return_type "RectF"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1167874 "getFlags"
	public explicit_return_type "int"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "valueIfKeyNotFound" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 290818 // CREATOR (<unidirectional association>)
	relation 289922 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<SparseRectFArray>() {
                @Override
                public SparseRectFArray createFromParcel(Parcel source) {
                    return new SparseRectFArray(source);
                }
                @Override
                public SparseRectFArray[] newArray(int size) {
                    return new SparseRectFArray[size];
                }
            }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 290818 // CREATOR (<unidirectional association>)
	  b parent class_ref 252546 // SparseRectFArray
      end

      operation 1168002 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 253058 "InputBinding"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Information given to an {@link InputMethod} about a client connecting
to it."
      classrelation 289282 // <realization>
	relation 288386 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 289282 // <realization>
	  b parent class_ref 203266 // Parcelable
      end

      attribute 795010 "TAG"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"InputBinding\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 289410 // mConnection (<unidirectional association>)
	relation 288514 --->
	  a role_name "mConnection" const_relation package
	    comment "
The connection back to the client.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 289410 // mConnection (<unidirectional association>)
	  b parent class_ref 222210 // InputConnection
      end

      attribute 795138 "mConnectionToken"
	const_attribute package explicit_type "IBinder"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A remotable token for the connection back to the client.
"
      end

      attribute 795266 "mUid"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The UID where this binding came from.
"
      end

      attribute 795394 "mPid"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The PID where this binding came from.
"
      end

      operation 1149698 "InputBinding"
	public explicit_return_type ""
	nparams 4
	  param inout name "conn" type class_ref 222210 // InputConnection
	  param inout name "connToken" explicit_type "IBinder"
	  param in name "uid" explicit_type "int"
	  param in name "pid" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param conn The interface for communicating back with the application.
@param connToken A remoteable token for communicating across processes.
@param uid The user id of the client of this binding.
@param pid The process id of where the binding came from."
      end

      operation 1149826 "InputBinding"
	public explicit_return_type ""
	nparams 2
	  param inout name "conn" type class_ref 222210 // InputConnection
	  param inout name "binding" type class_ref 253058 // InputBinding
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor from an existing InputBinding taking a new local input
connection interface.

@param conn The new connection interface.
@param binding Existing binding to copy."
      end

      operation 1149954 "InputBinding"
	package explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1150082 "getConnection"
	public return_type class_ref 222210 // InputConnection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the connection for interacting back with the application."
      end

      operation 1150210 "getConnectionToken"
	public explicit_return_type "IBinder"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the token for the connection back to the application.  You can
not use this directly, it must be converted to a {@link InputConnection}
for you."
      end

      operation 1150338 "getUid"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the user id of the client associated with this binding."
      end

      operation 1150466 "getPid"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the process id where this binding came from."
      end

      operation 1150594 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1150722 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" explicit_type "Parcel"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 289538 // CREATOR (<unidirectional association>)
	relation 288642 --->
	  stereotype "Parcelable.Creator"
	  a role_name "CREATOR" init_value " new Parcelable.Creator<InputBinding>() {
        public InputBinding createFromParcel(Parcel source) {
            return new InputBinding(source);
        }

        public InputBinding[] newArray(int size) {
            return new InputBinding[size];
        }
    }" class_relation const_relation public
	    comment "Used to make this class parcelable.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 289538 // CREATOR (<unidirectional association>)
	  b parent class_ref 253058 // InputBinding
      end

      operation 1150850 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 253186 "InputConnectionWrapper"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Wrapper class for proxying calls to another InputConnection.  Subclass
and have fun!"
      classrelation 289666 // <realization>
	relation 288770 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 289666 // <realization>
	  b parent class_ref 222210 // InputConnection
      end

      classrelation 289794 // mTarget (<unidirectional association>)
	relation 288898 --->
	  a role_name "mTarget" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 289794 // mTarget (<unidirectional association>)
	  b parent class_ref 222210 // InputConnection
      end

      attribute 795522 "mMutable"
	const_attribute package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1150978 "InputConnectionWrapper"
	public explicit_return_type ""
	nparams 2
	  param inout name "target" type class_ref 222210 // InputConnection
	  param inout name "mutable" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151106 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 222210 // InputConnection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change the target of the input connection."
      end

      operation 1151234 "getTextBeforeCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151362 "getTextAfterCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151490 "getSelectedText"
	public explicit_return_type "CharSequence"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151618 "getCursorCapsMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "reqModes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151746 "getExtractedText"
	public return_type class_ref 240130 // ExtractedText
	nparams 2
	  param inout name "request" type class_ref 252290 // ExtractedTextRequest
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151874 "deleteSurroundingText"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "beforeLength" explicit_type "int"
	  param in name "afterLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152002 "setComposingText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152130 "setComposingRegion"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152258 "finishComposingText"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152386 "commitText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152514 "commitCompletion"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "text" type class_ref 239234 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152642 "commitCorrection"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "correctionInfo" type class_ref 252418 // CorrectionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152770 "setSelection"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152898 "performEditorAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "editorAction" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1153026 "performContextMenuAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1153154 "beginBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1153282 "endBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1153410 "sendKeyEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 212866 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1153538 "clearMetaKeyStates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "states" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1153666 "reportFullscreenMode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1153794 "performPrivateCommand"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "action" explicit_type "String"
	  param inout name "data" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1153922 "requestCursorUpdates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "cursorUpdateMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 253314 "InputMethod"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The InputMethod interface represents an input method which can generate key
events and text, such as digital, email addresses, CJK characters, other
language characters, and etc., while handling various input events, and send
the text back to the application that requests text input.  See
{@link InputMethodManager} for more general information about the
architecture.

<p>Applications will not normally use this interface themselves, instead
relying on the standard interaction provided by
{@link android.widget.TextView} and {@link android.widget.EditText}.

<p>Those implementing input methods should normally do so by deriving from
{@link InputMethodService} or one of its subclasses.  When implementing
an input method, the service component containing it must also supply
a {@link #SERVICE_META_DATA} meta-data field, referencing an XML resource
providing details about the input method.  All input methods also must
require that clients hold the
{@link android.Manifest.permission#BIND_INPUT_METHOD} in order to interact
with the service; if this is not required, the system will not use that
input method, because it can not trust that it is not compromised.

<p>The InputMethod interface is actually split into two parts: the interface
here is the top-level interface to the input method, providing all
access to it, which only the system can access (due to the BIND_INPUT_METHOD
permission requirement).  In addition its method
{@link #createSession(android.view.inputmethod.InputMethod.SessionCallback)}
can be called to instantate a secondary {@link InputMethodSession} interface
which is what clients use to communicate with the input method."
      attribute 795650 "SERVICE_INTERFACE"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.view.InputMethod\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.SERVICE_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the interface name that a service implementing an input
method should say that it supports -- that is, this is the action it
uses for its intent filter.
To be supported, the service must also require the
{@link android.Manifest.permission#BIND_INPUT_METHOD} permission so
that other applications can not abuse it.
"
      end

      attribute 795778 "SERVICE_META_DATA"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.view.im\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Name under which an InputMethod service component publishes information
about itself.  This meta-data must reference an XML resource containing
an
<code>&lt;{@link android.R.styleable#InputMethod input-method}&gt;</code>
tag.
"
      end

      class 253442 "SessionCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1154050 "sessionCreated"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "session" type class_ref 253570 // InputMethodSession
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1154178 "attachToken"
	public explicit_return_type "void"
	nparams 1
	  param inout name "token" explicit_type "IBinder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called first thing after an input method is created, this supplies a
unique token for the session it has with the system service.  It is
needed to identify itself with the service to validate its operations.
This token <strong>must not</strong> be passed to applications, since
it grants special priviledges that should not be given to applications.

<p>Note: to protect yourself from malicious clients, you should only
accept the first token given to you.  Any after that may come from the
client."
      end

      operation 1154306 "bindInput"
	public explicit_return_type "void"
	nparams 1
	  param inout name "binding" type class_ref 253058 // InputBinding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bind a new application environment in to the input method, so that it
can later start and stop input processing.
Typically this method is called when this input method is enabled in an
application for the first time.

@param binding Information about the application window that is binding
to the input method.

@see InputBinding
@see #unbindInput()"
      end

      operation 1154434 "unbindInput"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unbind an application environment, called when the information previously
set by {@link #bindInput} is no longer valid for this input method.

<p>
Typically this method is called when the application changes to be
non-foreground."
      end

      operation 1154562 "startInput"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inputConnection" type class_ref 222210 // InputConnection
	  param inout name "info" type class_ref 222338 // EditorInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the application starts to receive text and it
is ready for this input method to process received events and send result
text back to the application.

@param inputConnection Optional specific input connection for
communicating with the text box; if null, you should use the generic
bound input connection.
@param info Information about the text box (typically, an EditText)
       that requests input.

@see EditorInfo"
      end

      operation 1154690 "restartInput"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inputConnection" type class_ref 222210 // InputConnection
	  param inout name "attribute" type class_ref 222338 // EditorInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the state of this input method needs to be
reset.

<p>
Typically, this method is called when the input focus is moved from one
text box to another.

@param inputConnection Optional specific input connection for
communicating with the text box; if null, you should use the generic
bound input connection.
@param attribute The attribute of the text box (typically, a EditText)
       that requests input.

@see EditorInfo"
      end

      operation 1154818 "createSession"
	public explicit_return_type "void"
	nparams 1
	  param inout name "callback" type class_ref 253442 // SessionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link InputMethodSession} that can be handed to client
applications for interacting with the input method.  You can later
use {@link #revokeSession(InputMethodSession)} to destroy the session
so that it can no longer be used by any clients.

@param callback Interface that is called with the newly created session."
      end

      operation 1154946 "setSessionEnabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "session" type class_ref 253570 // InputMethodSession
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Control whether a particular input method session is active.

@param session The {@link InputMethodSession} previously provided through
SessionCallback.sessionCreated() that is to be changed."
      end

      operation 1155074 "revokeSession"
	public explicit_return_type "void"
	nparams 1
	  param inout name "session" type class_ref 253570 // InputMethodSession
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disable and destroy a session that was previously created with
{@link #createSession(android.view.inputmethod.InputMethod.SessionCallback)}.
After this call, the given session interface is no longer active and
calls on it will fail.

@param session The {@link InputMethodSession} previously provided through
SessionCallback.sessionCreated() that is to be revoked."
      end

      attribute 795906 "SHOW_EXPLICIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #showSoftInput}: this show has been explicitly
requested by the user.  If not set, the system has decided it may be
a good idea to show the input method based on a navigation operation
in the UI.
"
      end

      attribute 796034 "SHOW_FORCED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #showSoftInput}: this show has been forced to
happen by the user.  If set, the input method should remain visible
until deliberated dismissed by the user in its UI.
"
      end

      operation 1155202 "showSoftInput"
	public explicit_return_type "void"
	nparams 2
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" explicit_type "ResultReceiver"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request that any soft input part of the input method be shown to the user.

@param flags Provides additional information about the show request.
Currently may be 0 or have the bit {@link #SHOW_EXPLICIT} set.
@param resultReceiver The client requesting the show may wish to
be told the impact of their request, which should be supplied here.
The result code should be
{@link InputMethodManager#RESULT_UNCHANGED_SHOWN InputMethodManager.RESULT_UNCHANGED_SHOWN},
{@link InputMethodManager#RESULT_UNCHANGED_HIDDEN InputMethodManager.RESULT_UNCHANGED_HIDDEN},
{@link InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or
{@link InputMethodManager#RESULT_HIDDEN InputMethodManager.RESULT_HIDDEN}."
      end

      operation 1155330 "hideSoftInput"
	public explicit_return_type "void"
	nparams 2
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" explicit_type "ResultReceiver"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request that any soft input part of the input method be hidden from the user.
@param flags Provides additional information about the show request.
Currently always 0.
@param resultReceiver The client requesting the show may wish to
be told the impact of their request, which should be supplied here.
The result code should be
{@link InputMethodManager#RESULT_UNCHANGED_SHOWN InputMethodManager.RESULT_UNCHANGED_SHOWN},
{@link InputMethodManager#RESULT_UNCHANGED_HIDDEN InputMethodManager.RESULT_UNCHANGED_HIDDEN},
{@link InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or
{@link InputMethodManager#RESULT_HIDDEN InputMethodManager.RESULT_HIDDEN}."
      end

      operation 1155458 "changeInputMethodSubtype"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subtype" type class_ref 240002 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notify that the input method subtype is being changed in the same input method.
@param subtype New subtype of the notified input method"
      end
    end

    class 253570 "InputMethodSession"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The InputMethodSession interface provides the per-client functionality
of {@link InputMethod} that is safe to expose to applications.

<p>Applications will not normally use this interface themselves, instead
relying on the standard interaction provided by
{@link android.widget.TextView} and {@link android.widget.EditText}."
      class 253826 "EventCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1159042 "finishedEvent"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "seq" explicit_type "int"
	    param inout name "handled" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1159170 "finishInput"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the application would like to stop
receiving text input."
      end

      operation 1159298 "updateSelection"
	public explicit_return_type "void"
	nparams 6
	  param in name "oldSelStart" explicit_type "int"
	  param in name "oldSelEnd" explicit_type "int"
	  param in name "newSelStart" explicit_type "int"
	  param in name "newSelEnd" explicit_type "int"
	  param in name "candidatesStart" explicit_type "int"
	  param in name "candidatesEnd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the selection or cursor in the current
target input field has changed.

@param oldSelStart The previous text offset of the cursor selection
start position.
@param oldSelEnd The previous text offset of the cursor selection
end position.
@param newSelStart The new text offset of the cursor selection
start position.
@param newSelEnd The new text offset of the cursor selection
end position.
@param candidatesStart The text offset of the current candidate
text start position.
@param candidatesEnd The text offset of the current candidate
text end position."
      end

      operation 1159426 "viewClicked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "focusChanged" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the user tapped a text view.
IMEs can't rely on this method being called because this was not part of the original IME
protocol, so applications with custom text editing written before this method appeared will
not call to inform the IME of this interaction.
@param focusChanged true if the user changed the focused view by this click."
      end

      operation 1159554 "updateCursor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newCursor" explicit_type "Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when cursor location of the target input field
has changed within its window.  This is not normally called, but will
only be reported if requested by the input method.

@param newCursor The rectangle of the cursor currently being shown in
the input field's window coordinates."
      end

      operation 1159682 "displayCompletions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "completions" type class_ref 239234 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a text editor that performs auto completion, to tell the
input method about the completions it has available.  This can be used
by the input method to display them to the user to select the text to
be inserted.

@param completions Array of text completions that are available, starting with
the best.  If this array is null, any existing completions will be
removed."
      end

      operation 1159810 "updateExtractedText"
	public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "int"
	  param inout name "text" type class_ref 240130 // ExtractedText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a text editor to report its new extracted text when its
contents change.  This will only be called if the input method
calls {@link InputConnection#getExtractedText(ExtractedTextRequest, int)
InputConnection.getExtractedText()} with the option to report updates.

@param token The input method supplied token for identifying its request.
@param text The new extracted text."
      end

      operation 1159938 "dispatchKeyEvent"
	public explicit_return_type "void"
	nparams 3
	  param in name "seq" explicit_type "int"
	  param inout name "event" type class_ref 212866 // KeyEvent
	  param inout name "callback" type class_ref 253826 // EventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when a key is pressed.  When done with the event,
the implementation must call back on <var>callback</var> with its
result.

<p>
If the input method wants to handle this event, return true, otherwise
return false and the caller (i.e. the application) will handle the event.

@param event The key event.

@return Whether the input method wants to handle this event.

@see #dispatchKeyUp
@see android.view.KeyEvent"
      end

      operation 1160066 "dispatchTrackballEvent"
	public explicit_return_type "void"
	nparams 3
	  param in name "seq" explicit_type "int"
	  param inout name "event" type class_ref 215426 // MotionEvent
	  param inout name "callback" type class_ref 253826 // EventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when there is a track ball event.

<p>
If the input method wants to handle this event, return true, otherwise
return false and the caller (i.e. the application) will handle the event.

@param event The motion event.

@return Whether the input method wants to handle this event.

@see android.view.MotionEvent"
      end

      operation 1160194 "dispatchGenericMotionEvent"
	public explicit_return_type "void"
	nparams 3
	  param in name "seq" explicit_type "int"
	  param inout name "event" type class_ref 215426 // MotionEvent
	  param inout name "callback" type class_ref 253826 // EventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when there is a generic motion event.

<p>
If the input method wants to handle this event, return true, otherwise
return false and the caller (i.e. the application) will handle the event.

@param event The motion event.

@return Whether the input method wants to handle this event.

@see android.view.MotionEvent"
      end

      operation 1160322 "appPrivateCommand"
	public explicit_return_type "void"
	nparams 2
	  param in name "action" explicit_type "String"
	  param inout name "data" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Process a private command sent from the application to the input method.
This can be used to provide domain-specific features that are
only known between certain input methods and their clients.

@param action Name of the command to be performed.  This <em>must</em>
be a scoped name, i.e. prefixed with a package name you own, so that
different developers will not create conflicting commands.
@param data Any data to include with the command."
      end

      operation 1160450 "toggleSoftInput"
	public explicit_return_type "void"
	nparams 2
	  param in name "showFlags" explicit_type "int"
	  param in name "hideFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Toggle the soft input window.
Applications can toggle the state of the soft input window.
@param showFlags Provides additional operating flags.  May be
0 or have the {@link InputMethodManager#SHOW_IMPLICIT},
{@link InputMethodManager#SHOW_FORCED} bit set.
@param hideFlags Provides additional operating flags.  May be
0 or have the {@link  InputMethodManager#HIDE_IMPLICIT_ONLY},
{@link  InputMethodManager#HIDE_NOT_ALWAYS} bit set."
      end

      operation 1160578 "updateCursorAnchorInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cursorAnchorInfo" type class_ref 239362 // CursorAnchorInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the cursor and/or the character position relevant to text input
is changed on the screen.  This is not called by default.  It will only be reported if
requested by the input method.

@param cursorAnchorInfo Positional information relevant to text input, such as text
insertion point and composition string."
      end
    end

    class 253698 "InputMethodSubtypeArray"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An array-like container that stores multiple instances of {@link InputMethodSubtype}.

<p>This container is designed to reduce the risk of {@link TransactionTooLargeException}
when one or more instancess of {@link InputMethodInfo} are transferred through IPC.
Basically this class does following three tasks.</p>
<ul>
<li>Applying compression for the marshalled data</li>
<li>Lazily unmarshalling objects</li>
<li>Caching the marshalled data when appropriate</li>
</ul>

@hide"
      attribute 800258 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"InputMethodSubtypeArray\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1165058 "InputMethodSubtypeArray"
	public explicit_return_type ""
	nparams 1
	  param in name "subtypes" explicit_type "List<InputMethodSubtype>"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of {@link InputMethodSubtypeArray} from an existing list of
{@link InputMethodSubtype}.

@param subtypes A list of {@link InputMethodSubtype} from which
{@link InputMethodSubtypeArray} will be created."
      end

      operation 1165186 "InputMethodSubtypeArray"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshall an instance of {@link InputMethodSubtypeArray} from a given {@link Parcel}
object.

@param source A {@link Parcel} object from which {@link InputMethodSubtypeArray} will be
unmarshalled."
      end

      operation 1165314 "writeToParcel"
	public explicit_return_type "void"
	nparams 1
	  param in name "dest" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshall the instance into a given {@link Parcel} object.

<p>This methods may take a bit additional time to compress data lazily when called
first time.</p>

@param source A {@link Parcel} object to which {@link InputMethodSubtypeArray} will be
marshalled."
      end

      operation 1165442 "get"
	public return_type class_ref 240002 // InputMethodSubtype
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@link InputMethodSubtype} specified with the given index.

<p>This methods may take a bit additional time to decompress data lazily when called
first time.</p>

@param index The index of {@link InputMethodSubtype}."
      end

      operation 1165570 "getCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of {@link InputMethodSubtype} objects."
      end

      attribute 800386 "mLockObject"
	const_attribute private explicit_type "Object"
	init_value " new Object()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 800514 "mCount"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 290562 // mInstance (<unidirectional association>)
	relation 289666 --->
	  a role_name "mInstance" multiplicity "[]" volatile private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 290562 // mInstance (<unidirectional association>)
	  b parent class_ref 240002 // InputMethodSubtype
      end

      attribute 800642 "mCompressedData"
	volatile private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 800770 "mDecompressedSize"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1165698 "marshall"
	class_operation private explicit_return_type "byte"
	nparams 1
	  param in name "array" type class_ref 240002 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}final ${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1165826 "unmarshall"
	class_operation private return_type class_ref 240002 // InputMethodSubtype
	nparams 1
	  param in name "data" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}final ${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1165954 "compress"
	class_operation private explicit_return_type "byte"
	nparams 1
	  param in name "data" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}final ${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1166082 "decompress"
	class_operation private explicit_return_type "byte"
	nparams 2
	  param in name "data" explicit_type "byte"
	  param in name "expectedSize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}final ${t0}[] ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 142850 "inputmethod"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 167426 "InputMethodManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.internal.os.SomeArgs;
import com.android.internal.view.IInputConnectionWrapper;
import com.android.internal.view.IInputContext;
import com.android.internal.view.IInputMethodClient;
import com.android.internal.view.IInputMethodManager;
import com.android.internal.view.IInputMethodSession;
import com.android.internal.view.InputBindResult;
import android.content.Context;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.RectF;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.Trace;
import android.text.style.SuggestionSpan;
import android.util.Log;
import android.util.Pools.Pool;
import android.util.Pools.SimplePool;
import android.util.PrintWriterPrinter;
import android.util.Printer;
import android.util.SparseArray;
import android.view.InputChannel;
import android.view.InputEvent;
import android.view.InputEventSender;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewRootImpl;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 238722 // InputMethodManager
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 173314 "BaseInputConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.content.res.TypedArray;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Editable;
import android.text.NoCopySpan;
import android.text.Selection;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.method.MetaKeyKeyListener;
import android.util.Log;
import android.util.LogPrinter;
import android.view.KeyCharacterMap;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewRootImpl;
${definition}"
      associated_classes
	class_ref 251906 // ComposingText
	class_ref 252162 // BaseInputConnection
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 173442 "InputConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Bundle;
import android.view.KeyCharacterMap;
import android.view.KeyEvent;
${definition}"
      associated_classes
	class_ref 222210 // InputConnection
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 173570 "CompletionInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
${definition}"
      associated_classes
	class_ref 239234 // CompletionInfo
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 173698 "CorrectionInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
${definition}"
      associated_classes
	class_ref 252418 // CorrectionInfo
      end
      comment "Copyright (C) 2007-2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 173826 "CursorAnchorInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Matrix;
import android.graphics.RectF;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.Layout;
import android.text.SpannedString;
import android.text.TextUtils;
import android.view.inputmethod.SparseRectFArray.SparseRectFArrayBuilder;
import java.util.Objects;
${definition}"
      associated_classes
	class_ref 239362 // CursorAnchorInfo
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 173954 "EditorInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.InputType;
import android.text.TextUtils;
import android.util.Printer;
${definition}"
      associated_classes
	class_ref 222338 // EditorInfo
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 174082 "ExtractedText"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
${definition}"
      associated_classes
	class_ref 240130 // ExtractedText
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 174210 "ExtractedTextRequest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
${definition}"
      associated_classes
	class_ref 252290 // ExtractedTextRequest
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 174338 "InputBinding"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.IBinder;
import android.os.Parcel;
import android.os.Parcelable;
${definition}"
      associated_classes
	class_ref 253058 // InputBinding
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 174466 "InputConnectionWrapper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Bundle;
import android.view.KeyEvent;
${definition}"
      associated_classes
	class_ref 253186 // InputConnectionWrapper
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 174594 "InputMethod"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.SdkConstant;
import android.annotation.SdkConstant.SdkConstantType;
import android.inputmethodservice.InputMethodService;
import android.os.IBinder;
import android.os.ResultReceiver;
${definition}"
      associated_classes
	class_ref 253314 // InputMethod
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 174722 "InputMethodInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.drawable.Drawable;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.AttributeSet;
import android.util.Printer;
import android.util.Slog;
import android.util.Xml;
import android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder;
import android.view.inputmethod.InputMethodSubtypeArray;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 239874 // InputMethodInfo
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 174850 "InputMethodSession"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Rect;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.MotionEvent;
${definition}"
      associated_classes
	class_ref 253570 // InputMethodSession
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 174978 "InputMethodSubtype"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
import android.util.Slog;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatException;
import java.util.List;
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 240002 // InputMethodSubtype
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 175106 "InputMethodSubtypeArray"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.util.AndroidRuntimeException;
import android.util.Slog;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
${definition}"
      associated_classes
	class_ref 253698 // InputMethodSubtypeArray
      end
      comment "Copyright (C) 2007-2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 175234 "SparseRectFArray"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.RectF;
import android.os.Parcel;
import android.os.Parcelable;
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 252546 // SparseRectFArray
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end
  end
end
