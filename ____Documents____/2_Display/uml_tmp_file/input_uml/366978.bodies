class WeekView
!!!2146818.java!!!	WeekView(inout context : Context)
                super(context);

                // Sets up any standard paints that will be used
                initilaizePaints();
!!!2146946.java!!!	init(in weekNumber : int, in selectedWeekDay : int, in focusedMonth : int) : void
                mSelectedDay = selectedWeekDay;
                mHasSelectedDay = mSelectedDay != -1;
                mNumCells = mShowWeekNumber ? mDaysPerWeek + 1 : mDaysPerWeek;
                mWeek = weekNumber;
                mTempDate.setTimeInMillis(mMinDate.getTimeInMillis());

                mTempDate.add(Calendar.WEEK_OF_YEAR, mWeek);
                mTempDate.setFirstDayOfWeek(mFirstDayOfWeek);

                // Allocate space for caching the day numbers and focus values
                mDayNumbers = new String[mNumCells];
                mFocusDay = new boolean[mNumCells];

                // If we're showing the week number calculate it based on Monday
                int i = 0;
                if (mShowWeekNumber) {
                    mDayNumbers[0] = String.format(Locale.getDefault(), "%d",
                            mTempDate.get(Calendar.WEEK_OF_YEAR));
                    i++;
                }

                // Now adjust our starting day based on the start day of the week
                int diff = mFirstDayOfWeek - mTempDate.get(Calendar.DAY_OF_WEEK);
                mTempDate.add(Calendar.DAY_OF_MONTH, diff);

                mFirstDay = (Calendar) mTempDate.clone();
                mMonthOfFirstWeekDay = mTempDate.get(Calendar.MONTH);

                mHasUnfocusedDay = true;
                for (; i < mNumCells; i++) {
                    final boolean isFocusedDay = (mTempDate.get(Calendar.MONTH) == focusedMonth);
                    mFocusDay[i] = isFocusedDay;
                    mHasFocusedDay |= isFocusedDay;
                    mHasUnfocusedDay &= !isFocusedDay;
                    // do not draw dates outside the valid range to avoid user confusion
                    if (mTempDate.before(mMinDate) || mTempDate.after(mMaxDate)) {
                        mDayNumbers[i] = "";
                    } else {
                        mDayNumbers[i] = String.format(Locale.getDefault(), "%d",
                                mTempDate.get(Calendar.DAY_OF_MONTH));
                    }
                    mTempDate.add(Calendar.DAY_OF_MONTH, 1);
                }
                // We do one extra add at the end of the loop, if that pushed us to
                // new month undo it
                if (mTempDate.get(Calendar.DAY_OF_MONTH) == 1) {
                    mTempDate.add(Calendar.DAY_OF_MONTH, -1);
                }
                mLastWeekDayMonth = mTempDate.get(Calendar.MONTH);

                updateSelectionPositions();
!!!2147074.java!!!	initilaizePaints() : void
                mDrawPaint.setFakeBoldText(false);
                mDrawPaint.setAntiAlias(true);
                mDrawPaint.setStyle(Style.FILL);

                mMonthNumDrawPaint.setFakeBoldText(true);
                mMonthNumDrawPaint.setAntiAlias(true);
                mMonthNumDrawPaint.setStyle(Style.FILL);
                mMonthNumDrawPaint.setTextAlign(Align.CENTER);
                mMonthNumDrawPaint.setTextSize(mDateTextSize);
!!!2147202.java!!!	getMonthOfFirstWeekDay() : int
                return mMonthOfFirstWeekDay;
!!!2147330.java!!!	getMonthOfLastWeekDay() : int
                return mLastWeekDayMonth;
!!!2147458.java!!!	getFirstDay() : Calendar
                return mFirstDay;
!!!2147586.java!!!	getDayFromLocation(in x : float, inout outCalendar : Calendar) : boolean
                final boolean isLayoutRtl = isLayoutRtl();

                int start;
                int end;

                if (isLayoutRtl) {
                    start = 0;
                    end = mShowWeekNumber ? mWidth - mWidth / mNumCells : mWidth;
                } else {
                    start = mShowWeekNumber ? mWidth / mNumCells : 0;
                    end = mWidth;
                }

                if (x < start || x > end) {
                    outCalendar.clear();
                    return false;
                }

                // Selection is (x - start) / (pixels/day) which is (x - start) * day / pixels
                int dayPosition = (int) ((x - start) * mDaysPerWeek / (end - start));

                if (isLayoutRtl) {
                    dayPosition = mDaysPerWeek - 1 - dayPosition;
                }

                outCalendar.setTimeInMillis(mFirstDay.getTimeInMillis());
                outCalendar.add(Calendar.DAY_OF_MONTH, dayPosition);

                return true;
!!!2147714.java!!!	onDraw(inout canvas : Canvas) : void
                drawBackground(canvas);
                drawWeekNumbersAndDates(canvas);
                drawWeekSeparators(canvas);
                drawSelectedDateVerticalBars(canvas);
!!!2147842.java!!!	drawBackground(inout canvas : Canvas) : void
                if (!mHasSelectedDay) {
                    return;
                }
                mDrawPaint.setColor(mSelectedWeekBackgroundColor);

                mTempRect.top = mWeekSeperatorLineWidth;
                mTempRect.bottom = mHeight;

                final boolean isLayoutRtl = isLayoutRtl();

                if (isLayoutRtl) {
                    mTempRect.left = 0;
                    mTempRect.right = mSelectedLeft - 2;
                } else {
                    mTempRect.left = mShowWeekNumber ? mWidth / mNumCells : 0;
                    mTempRect.right = mSelectedLeft - 2;
                }
                canvas.drawRect(mTempRect, mDrawPaint);

                if (isLayoutRtl) {
                    mTempRect.left = mSelectedRight + 3;
                    mTempRect.right = mShowWeekNumber ? mWidth - mWidth / mNumCells : mWidth;
                } else {
                    mTempRect.left = mSelectedRight + 3;
                    mTempRect.right = mWidth;
                }
                canvas.drawRect(mTempRect, mDrawPaint);
!!!2147970.java!!!	drawWeekNumbersAndDates(inout canvas : Canvas) : void
                final float textHeight = mDrawPaint.getTextSize();
                final int y = (int) ((mHeight + textHeight) / 2) - mWeekSeperatorLineWidth;
                final int nDays = mNumCells;
                final int divisor = 2 * nDays;

                mDrawPaint.setTextAlign(Align.CENTER);
                mDrawPaint.setTextSize(mDateTextSize);

                int i = 0;

                if (isLayoutRtl()) {
                    for (; i < nDays - 1; i++) {
                        mMonthNumDrawPaint.setColor(mFocusDay[i] ? mFocusedMonthDateColor
                                : mUnfocusedMonthDateColor);
                        int x = (2 * i + 1) * mWidth / divisor;
                        canvas.drawText(mDayNumbers[nDays - 1 - i], x, y, mMonthNumDrawPaint);
                    }
                    if (mShowWeekNumber) {
                        mDrawPaint.setColor(mWeekNumberColor);
                        int x = mWidth - mWidth / divisor;
                        canvas.drawText(mDayNumbers[0], x, y, mDrawPaint);
                    }
                } else {
                    if (mShowWeekNumber) {
                        mDrawPaint.setColor(mWeekNumberColor);
                        int x = mWidth / divisor;
                        canvas.drawText(mDayNumbers[0], x, y, mDrawPaint);
                        i++;
                    }
                    for (; i < nDays; i++) {
                        mMonthNumDrawPaint.setColor(mFocusDay[i] ? mFocusedMonthDateColor
                                : mUnfocusedMonthDateColor);
                        int x = (2 * i + 1) * mWidth / divisor;
                        canvas.drawText(mDayNumbers[i], x, y, mMonthNumDrawPaint);
                    }
                }
!!!2148098.java!!!	drawWeekSeparators(inout canvas : Canvas) : void
                // If it is the topmost fully visible child do not draw separator line
                int firstFullyVisiblePosition = mListView.getFirstVisiblePosition();
                if (mListView.getChildAt(0).getTop() < 0) {
                    firstFullyVisiblePosition++;
                }
                if (firstFullyVisiblePosition == mWeek) {
                    return;
                }
                mDrawPaint.setColor(mWeekSeparatorLineColor);
                mDrawPaint.setStrokeWidth(mWeekSeperatorLineWidth);
                float startX;
                float stopX;
                if (isLayoutRtl()) {
                    startX = 0;
                    stopX = mShowWeekNumber ? mWidth - mWidth / mNumCells : mWidth;
                } else {
                    startX = mShowWeekNumber ? mWidth / mNumCells : 0;
                    stopX = mWidth;
                }
                canvas.drawLine(startX, 0, stopX, 0, mDrawPaint);
!!!2148226.java!!!	drawSelectedDateVerticalBars(inout canvas : Canvas) : void
                if (!mHasSelectedDay) {
                    return;
                }
                mSelectedDateVerticalBar.setBounds(
                        mSelectedLeft - mSelectedDateVerticalBarWidth / 2,
                        mWeekSeperatorLineWidth,
                        mSelectedLeft + mSelectedDateVerticalBarWidth / 2,
                        mHeight);
                mSelectedDateVerticalBar.draw(canvas);
                mSelectedDateVerticalBar.setBounds(
                        mSelectedRight - mSelectedDateVerticalBarWidth / 2,
                        mWeekSeperatorLineWidth,
                        mSelectedRight + mSelectedDateVerticalBarWidth / 2,
                        mHeight);
                mSelectedDateVerticalBar.draw(canvas);
!!!2148354.java!!!	onSizeChanged(in w : int, in h : int, in oldw : int, in oldh : int) : void
                mWidth = w;
                updateSelectionPositions();
!!!2148482.java!!!	updateSelectionPositions() : void
                if (mHasSelectedDay) {
                    final boolean isLayoutRtl = isLayoutRtl();
                    int selectedPosition = mSelectedDay - mFirstDayOfWeek;
                    if (selectedPosition < 0) {
                        selectedPosition += 7;
                    }
                    if (mShowWeekNumber && !isLayoutRtl) {
                        selectedPosition++;
                    }
                    if (isLayoutRtl) {
                        mSelectedLeft = (mDaysPerWeek - 1 - selectedPosition) * mWidth / mNumCells;

                    } else {
                        mSelectedLeft = selectedPosition * mWidth / mNumCells;
                    }
                    mSelectedRight = mSelectedLeft + mWidth / mNumCells;
                }
!!!2148610.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
                mHeight = (mListView.getHeight() - mListView.getPaddingTop() - mListView
                        .getPaddingBottom()) / mShownWeekCount;
                setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), mHeight);
