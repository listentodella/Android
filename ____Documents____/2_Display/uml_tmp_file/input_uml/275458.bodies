class ActivityOptions
!!!1415938.java!!!	makeCustomAnimation(inout context : Context, in enterResId : int, in exitResId : int) : ActivityOptions
        return makeCustomAnimation(context, enterResId, exitResId, null, null);
!!!1416066.java!!!	makeCustomAnimation(inout context : Context, in enterResId : int, in exitResId : int, inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = context.getPackageName();
        opts.mAnimationType = ANIM_CUSTOM;
        opts.mCustomEnterResId = enterResId;
        opts.mCustomExitResId = exitResId;
        opts.setOnAnimationStartedListener(handler, listener);
        return opts;
!!!1416194.java!!!	setOnAnimationStartedListener(inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener) : void
        if (listener != null) {
            final Handler h = handler;
            final OnAnimationStartedListener finalListener = listener;
            mAnimationStartedListener = new IRemoteCallback.Stub() {
                @Override public void sendResult(Bundle data) throws RemoteException {
                    h.post(new Runnable() {
                        @Override public void run() {
                            finalListener.onAnimationStarted();
                        }
                    });
                }
            };
        }
!!!1416450.java!!!	makeScaleUpAnimation(inout source : View, in startX : int, in startY : int, in width : int, in height : int) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = ANIM_SCALE_UP;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mWidth = width;
        opts.mHeight = height;
        return opts;
!!!1416578.java!!!	makeThumbnailScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int) : ActivityOptions
        return makeThumbnailScaleUpAnimation(source, thumbnail, startX, startY, null);
!!!1416706.java!!!	makeThumbnailScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeThumbnailAnimation(source, thumbnail, startX, startY, listener, true);
!!!1416834.java!!!	makeThumbnailScaleDownAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeThumbnailAnimation(source, thumbnail, startX, startY, listener, false);
!!!1416962.java!!!	makeThumbnailAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : ActivityOptions::OnAnimationStartedListener, inout scaleUp : boolean) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = scaleUp ? ANIM_THUMBNAIL_SCALE_UP : ANIM_THUMBNAIL_SCALE_DOWN;
        opts.mThumbnail = thumbnail;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.setOnAnimationStartedListener(source.getHandler(), listener);
        return opts;
!!!1417090.java!!!	makeThumbnailAspectScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, in targetWidth : int, in targetHeight : int, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeAspectScaledThumbnailAnimation(source, thumbnail, startX, startY,
                targetWidth, targetHeight, listener, true);
!!!1417218.java!!!	makeThumbnailAspectScaleDownAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, in targetWidth : int, in targetHeight : int, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeAspectScaledThumbnailAnimation(source, thumbnail, startX, startY,
                targetWidth, targetHeight, listener, false);
!!!1417346.java!!!	makeAspectScaledThumbnailAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, in targetWidth : int, in targetHeight : int, inout listener : ActivityOptions::OnAnimationStartedListener, inout scaleUp : boolean) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP :
                ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
        opts.mThumbnail = thumbnail;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mWidth = targetWidth;
        opts.mHeight = targetHeight;
        opts.setOnAnimationStartedListener(source.getHandler(), listener);
        return opts;
!!!1417474.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout sharedElement : View, in sharedElementName : String) : ActivityOptions
        return makeSceneTransitionAnimation(activity, Pair.create(sharedElement, sharedElementName));
!!!1417602.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout sharedElements : Pair<View, String>...) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        if (!activity.getWindow().hasFeature(Window.FEATURE_ACTIVITY_TRANSITIONS)) {
            opts.mAnimationType = ANIM_DEFAULT;
            return opts;
        }
        opts.mAnimationType = ANIM_SCENE_TRANSITION;

        ArrayList<String> names = new ArrayList<String>();
        ArrayList<View> views = new ArrayList<View>();

        if (sharedElements != null) {
            for (int i = 0; i < sharedElements.length; i++) {
                Pair<View, String> sharedElement = sharedElements[i];
                String sharedElementName = sharedElement.second;
                if (sharedElementName == null) {
                    throw new IllegalArgumentException("Shared element name must not be null");
                }
                names.add(sharedElementName);
                View view = sharedElement.first;
                if (view == null) {
                    throw new IllegalArgumentException("Shared element must not be null");
                }
                views.add(sharedElement.first);
            }
        }

        ExitTransitionCoordinator exit = new ExitTransitionCoordinator(activity, names, names,
                views, false);
        opts.mTransitionReceiver = exit;
        opts.mSharedElementNames = names;
        opts.mIsReturning = false;
        opts.mExitCoordinatorIndex =
                activity.mActivityTransitionState.addExitTransitionCoordinator(exit);
        return opts;
!!!1417730.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout exitCoordinator : ExitTransitionCoordinator, inout sharedElementNames : ArrayList<String>, in resultCode : int, inout resultData : Intent) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mAnimationType = ANIM_SCENE_TRANSITION;
        opts.mSharedElementNames = sharedElementNames;
        opts.mTransitionReceiver = exitCoordinator;
        opts.mIsReturning = true;
        opts.mResultCode = resultCode;
        opts.mResultData = resultData;
        opts.mExitCoordinatorIndex =
                activity.mActivityTransitionState.addExitTransitionCoordinator(exitCoordinator);
        return opts;
!!!1417858.java!!!	makeTaskLaunchBehind() : ActivityOptions
        final ActivityOptions opts = new ActivityOptions();
        opts.mAnimationType = ANIM_LAUNCH_TASK_BEHIND;
        return opts;
!!!1417986.java!!!	getLaunchTaskBehind() : boolean
        return mAnimationType == ANIM_LAUNCH_TASK_BEHIND;
!!!1418242.java!!!	ActivityOptions(inout opts : Bundle)
        mPackageName = opts.getString(KEY_PACKAGE_NAME);
        mAnimationType = opts.getInt(KEY_ANIM_TYPE);
        switch (mAnimationType) {
            case ANIM_CUSTOM:
                mCustomEnterResId = opts.getInt(KEY_ANIM_ENTER_RES_ID, 0);
                mCustomExitResId = opts.getInt(KEY_ANIM_EXIT_RES_ID, 0);
                mAnimationStartedListener = IRemoteCallback.Stub.asInterface(
                        opts.getBinder(KEY_ANIM_START_LISTENER));
                break;

            case ANIM_SCALE_UP:
                mStartX = opts.getInt(KEY_ANIM_START_X, 0);
                mStartY = opts.getInt(KEY_ANIM_START_Y, 0);
                mWidth = opts.getInt(KEY_ANIM_WIDTH, 0);
                mHeight = opts.getInt(KEY_ANIM_HEIGHT, 0);
                break;

            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                mThumbnail = (Bitmap) opts.getParcelable(KEY_ANIM_THUMBNAIL);
                mStartX = opts.getInt(KEY_ANIM_START_X, 0);
                mStartY = opts.getInt(KEY_ANIM_START_Y, 0);
                mWidth = opts.getInt(KEY_ANIM_WIDTH, 0);
                mHeight = opts.getInt(KEY_ANIM_HEIGHT, 0);
                mAnimationStartedListener = IRemoteCallback.Stub.asInterface(
                        opts.getBinder(KEY_ANIM_START_LISTENER));
                break;

            case ANIM_SCENE_TRANSITION:
                mTransitionReceiver = opts.getParcelable(KEY_TRANSITION_COMPLETE_LISTENER);
                mIsReturning = opts.getBoolean(KEY_TRANSITION_IS_RETURNING, false);
                mSharedElementNames = opts.getStringArrayList(KEY_TRANSITION_SHARED_ELEMENTS);
                mResultData = opts.getParcelable(KEY_RESULT_DATA);
                mResultCode = opts.getInt(KEY_RESULT_CODE);
                mExitCoordinatorIndex = opts.getInt(KEY_EXIT_COORDINATOR_INDEX);
                break;
        }
!!!1418370.java!!!	getPackageName() : String
        return mPackageName;
!!!1418498.java!!!	getAnimationType() : int
        return mAnimationType;
!!!1418626.java!!!	getCustomEnterResId() : int
        return mCustomEnterResId;
!!!1418754.java!!!	getCustomExitResId() : int
        return mCustomExitResId;
!!!1418882.java!!!	getThumbnail() : Bitmap
        return mThumbnail;
!!!1419010.java!!!	getStartX() : int
        return mStartX;
!!!1419138.java!!!	getStartY() : int
        return mStartY;
!!!1419266.java!!!	getWidth() : int
        return mWidth;
!!!1419394.java!!!	getHeight() : int
        return mHeight;
!!!1419522.java!!!	getOnAnimationStartListener() : IRemoteCallback
        return mAnimationStartedListener;
!!!1419650.java!!!	getExitCoordinatorKey() : int
 return mExitCoordinatorIndex;
!!!1419778.java!!!	abort() : void
        if (mAnimationStartedListener != null) {
            try {
                mAnimationStartedListener.sendResult(null);
            } catch (RemoteException e) {
            }
        }
!!!1419906.java!!!	isReturning() : boolean
        return mIsReturning;
!!!1420034.java!!!	getSharedElementNames() : ArrayList<String>
        return mSharedElementNames;
!!!1420162.java!!!	getResultReceiver() : ResultReceiver
 return mTransitionReceiver;
!!!1420290.java!!!	getResultCode() : int
 return mResultCode;
!!!1420418.java!!!	getResultData() : Intent
 return mResultData;
!!!1420546.java!!!	abort(inout options : Bundle) : void
        if (options != null) {
            (new ActivityOptions(options)).abort();
        }
!!!1420674.java!!!	update(inout otherOptions : ActivityOptions) : void
        if (otherOptions.mPackageName != null) {
            mPackageName = otherOptions.mPackageName;
        }
        mTransitionReceiver = null;
        mSharedElementNames = null;
        mIsReturning = false;
        mResultData = null;
        mResultCode = 0;
        mExitCoordinatorIndex = 0;
        mAnimationType = otherOptions.mAnimationType;
        switch (otherOptions.mAnimationType) {
            case ANIM_CUSTOM:
                mCustomEnterResId = otherOptions.mCustomEnterResId;
                mCustomExitResId = otherOptions.mCustomExitResId;
                mThumbnail = null;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = otherOptions.mAnimationStartedListener;
                break;
            case ANIM_SCALE_UP:
                mStartX = otherOptions.mStartX;
                mStartY = otherOptions.mStartY;
                mWidth = otherOptions.mWidth;
                mHeight = otherOptions.mHeight;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = null;
                break;
            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                mThumbnail = otherOptions.mThumbnail;
                mStartX = otherOptions.mStartX;
                mStartY = otherOptions.mStartY;
                mWidth = otherOptions.mWidth;
                mHeight = otherOptions.mHeight;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = otherOptions.mAnimationStartedListener;
                break;
            case ANIM_SCENE_TRANSITION:
                mTransitionReceiver = otherOptions.mTransitionReceiver;
                mSharedElementNames = otherOptions.mSharedElementNames;
                mIsReturning = otherOptions.mIsReturning;
                mThumbnail = null;
                mAnimationStartedListener = null;
                mResultData = otherOptions.mResultData;
                mResultCode = otherOptions.mResultCode;
                mExitCoordinatorIndex = otherOptions.mExitCoordinatorIndex;
                break;
        }
!!!1420802.java!!!	toBundle() : Bundle
        if (mAnimationType == ANIM_DEFAULT) {
            return null;
        }
        Bundle b = new Bundle();
        if (mPackageName != null) {
            b.putString(KEY_PACKAGE_NAME, mPackageName);
        }
        b.putInt(KEY_ANIM_TYPE, mAnimationType);
        switch (mAnimationType) {
            case ANIM_CUSTOM:
                b.putInt(KEY_ANIM_ENTER_RES_ID, mCustomEnterResId);
                b.putInt(KEY_ANIM_EXIT_RES_ID, mCustomExitResId);
                b.putBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener
                        != null ? mAnimationStartedListener.asBinder() : null);
                break;
            case ANIM_SCALE_UP:
                b.putInt(KEY_ANIM_START_X, mStartX);
                b.putInt(KEY_ANIM_START_Y, mStartY);
                b.putInt(KEY_ANIM_WIDTH, mWidth);
                b.putInt(KEY_ANIM_HEIGHT, mHeight);
                break;
            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                b.putParcelable(KEY_ANIM_THUMBNAIL, mThumbnail);
                b.putInt(KEY_ANIM_START_X, mStartX);
                b.putInt(KEY_ANIM_START_Y, mStartY);
                b.putInt(KEY_ANIM_WIDTH, mWidth);
                b.putInt(KEY_ANIM_HEIGHT, mHeight);
                b.putBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener
                        != null ? mAnimationStartedListener.asBinder() : null);
                break;
            case ANIM_SCENE_TRANSITION:
                if (mTransitionReceiver != null) {
                    b.putParcelable(KEY_TRANSITION_COMPLETE_LISTENER, mTransitionReceiver);
                }
                b.putBoolean(KEY_TRANSITION_IS_RETURNING, mIsReturning);
                b.putStringArrayList(KEY_TRANSITION_SHARED_ELEMENTS, mSharedElementNames);
                b.putParcelable(KEY_RESULT_DATA, mResultData);
                b.putInt(KEY_RESULT_CODE, mResultCode);
                b.putInt(KEY_EXIT_COORDINATOR_INDEX, mExitCoordinatorIndex);
                break;
        }

        return b;
!!!1420930.java!!!	forTargetActivity() : ActivityOptions
        if (mAnimationType == ANIM_SCENE_TRANSITION) {
            final ActivityOptions result = new ActivityOptions();
            result.update(this);
            return result;
        }

        return null;
