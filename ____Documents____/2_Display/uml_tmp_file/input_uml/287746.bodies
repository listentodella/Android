class ApplicationPackageManager
!!!1508226.java!!!	getUserManager() : UserManager
        synchronized (mLock) {
            if (mUserManager == null) {
                mUserManager = UserManager.get(mContext);
            }
            return mUserManager;
        }
!!!1508354.java!!!	getPackageInfo(in packageName : String, in flags : int) : PackageInfo
        try {
            PackageInfo pi = mPM.getPackageInfo(packageName, flags, mContext.getUserId());
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(packageName);
!!!1508482.java!!!	currentToCanonicalPackageNames(inout names : String) : String
        try {
            return mPM.currentToCanonicalPackageNames(names);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1508610.java!!!	canonicalToCurrentPackageNames(inout names : String) : String
        try {
            return mPM.canonicalToCurrentPackageNames(names);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1508738.java!!!	getLaunchIntentForPackage(in packageName : String) : Intent
        // First see if the package has an INFO activity; the existence of
        // such an activity is implied to be the desired front-door for the
        // overall package (such as if it has multiple launcher entries).
        Intent intentToResolve = new Intent(Intent.ACTION_MAIN);
        intentToResolve.addCategory(Intent.CATEGORY_INFO);
        intentToResolve.setPackage(packageName);
        List<ResolveInfo> ris = queryIntentActivities(intentToResolve, 0);

        // Otherwise, try to find a main launcher activity.
        if (ris == null || ris.size() <= 0) {
            // reuse the intent instance
            intentToResolve.removeCategory(Intent.CATEGORY_INFO);
            intentToResolve.addCategory(Intent.CATEGORY_LAUNCHER);
            intentToResolve.setPackage(packageName);
            ris = queryIntentActivities(intentToResolve, 0);
        }
        if (ris == null || ris.size() <= 0) {
            return null;
        }
        Intent intent = new Intent(intentToResolve);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setClassName(ris.get(0).activityInfo.packageName,
                ris.get(0).activityInfo.name);
        return intent;
!!!1508866.java!!!	getLeanbackLaunchIntentForPackage(in packageName : String) : Intent
        // Try to find a main leanback_launcher activity.
        Intent intentToResolve = new Intent(Intent.ACTION_MAIN);
        intentToResolve.addCategory(Intent.CATEGORY_LEANBACK_LAUNCHER);
        intentToResolve.setPackage(packageName);
        List<ResolveInfo> ris = queryIntentActivities(intentToResolve, 0);

        if (ris == null || ris.size() <= 0) {
            return null;
        }
        Intent intent = new Intent(intentToResolve);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setClassName(ris.get(0).activityInfo.packageName,
                ris.get(0).activityInfo.name);
        return intent;
!!!1508994.java!!!	getPackageGids(in packageName : String) : int
        try {
            int[] gids = mPM.getPackageGids(packageName);
            if (gids == null || gids.length > 0) {
                return gids;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(packageName);
!!!1509122.java!!!	getPackageUid(in packageName : String, in userHandle : int) : int
        try {
            int uid = mPM.getPackageUid(packageName, userHandle);
            if (uid >= 0) {
                return uid;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(packageName);
!!!1509250.java!!!	getPermissionInfo(in name : String, in flags : int) : PermissionInfo
        try {
            PermissionInfo pi = mPM.getPermissionInfo(name, flags);
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(name);
!!!1509378.java!!!	queryPermissionsByGroup(in group : String, in flags : int) : List<PermissionInfo>
        try {
            List<PermissionInfo> pi = mPM.queryPermissionsByGroup(group, flags);
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(group);
!!!1509506.java!!!	getPermissionGroupInfo(in name : String, in flags : int) : PermissionGroupInfo
        try {
            PermissionGroupInfo pgi = mPM.getPermissionGroupInfo(name, flags);
            if (pgi != null) {
                return pgi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(name);
!!!1509634.java!!!	getAllPermissionGroups(in flags : int) : List<PermissionGroupInfo>
        try {
            return mPM.getAllPermissionGroups(flags);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1509762.java!!!	getApplicationInfo(in packageName : String, in flags : int) : ApplicationInfo
        try {
            ApplicationInfo ai = mPM.getApplicationInfo(packageName, flags, mContext.getUserId());
            if (ai != null) {
                // This is a temporary hack. Callers must use
                // createPackageContext(packageName).getApplicationInfo() to
                // get the right paths.
                maybeAdjustApplicationInfo(ai);
                return ai;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(packageName);
!!!1509890.java!!!	maybeAdjustApplicationInfo(inout info : ApplicationInfo) : void
        // If we're dealing with a multi-arch application that has both
        // 32 and 64 bit shared libraries, we might need to choose the secondary
        // depending on what the current runtime's instruction set is.
        if (info.primaryCpuAbi != null && info.secondaryCpuAbi != null) {
            final String runtimeIsa = VMRuntime.getRuntime().vmInstructionSet();
            final String secondaryIsa = VMRuntime.getInstructionSet(info.secondaryCpuAbi);

            // If the runtimeIsa is the same as the primary isa, then we do nothing.
            // Everything will be set up correctly because info.nativeLibraryDir will
            // correspond to the right ISA.
            if (runtimeIsa.equals(secondaryIsa)) {
                info.nativeLibraryDir = info.secondaryNativeLibraryDir;
            }
        }
!!!1510018.java!!!	getActivityInfo(inout className : ComponentName, in flags : int) : ActivityInfo
        try {
            ActivityInfo ai = mPM.getActivityInfo(className, flags, mContext.getUserId());
            if (ai != null) {
                return ai;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!1510146.java!!!	getReceiverInfo(inout className : ComponentName, in flags : int) : ActivityInfo
        try {
            ActivityInfo ai = mPM.getReceiverInfo(className, flags, mContext.getUserId());
            if (ai != null) {
                return ai;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!1510274.java!!!	getServiceInfo(inout className : ComponentName, in flags : int) : ServiceInfo
        try {
            ServiceInfo si = mPM.getServiceInfo(className, flags, mContext.getUserId());
            if (si != null) {
                return si;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!1510402.java!!!	getProviderInfo(inout className : ComponentName, in flags : int) : ProviderInfo
        try {
            ProviderInfo pi = mPM.getProviderInfo(className, flags, mContext.getUserId());
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!1510530.java!!!	getSystemSharedLibraryNames() : String
        try {
            return mPM.getSystemSharedLibraryNames();
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1510658.java!!!	getSystemAvailableFeatures() : FeatureInfo
        try {
            return mPM.getSystemAvailableFeatures();
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1510786.java!!!	hasSystemFeature(in name : String) : boolean
        try {
            return mPM.hasSystemFeature(name);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1510914.java!!!	checkPermission(in permName : String, in pkgName : String) : int
        try {
            return mPM.checkPermission(permName, pkgName);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1511042.java!!!	addPermission(inout info : PermissionInfo) : boolean
        try {
            return mPM.addPermission(info);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1511170.java!!!	addPermissionAsync(inout info : PermissionInfo) : boolean
        try {
            return mPM.addPermissionAsync(info);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1511298.java!!!	removePermission(in name : String) : void
        try {
            mPM.removePermission(name);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1511426.java!!!	grantPermission(in packageName : String, in permissionName : String) : void
        try {
            mPM.grantPermission(packageName, permissionName);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1511554.java!!!	revokePermission(in packageName : String, in permissionName : String) : void
        try {
            mPM.revokePermission(packageName, permissionName);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1511682.java!!!	checkSignatures(in pkg1 : String, in pkg2 : String) : int
        try {
            return mPM.checkSignatures(pkg1, pkg2);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1511810.java!!!	checkSignatures(in uid1 : int, in uid2 : int) : int
        try {
            return mPM.checkUidSignatures(uid1, uid2);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1511938.java!!!	getPackagesForUid(in uid : int) : String
        try {
            return mPM.getPackagesForUid(uid);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1512066.java!!!	getNameForUid(in uid : int) : String
        try {
            return mPM.getNameForUid(uid);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1512194.java!!!	getUidForSharedUser(in sharedUserName : String) : int
        try {
            int uid = mPM.getUidForSharedUser(sharedUserName);
            if(uid != -1) {
                return uid;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
        throw new NameNotFoundException("No shared userid for user:"+sharedUserName);
!!!1512322.java!!!	getInstalledPackages(in flags : int) : List<PackageInfo>
        return getInstalledPackages(flags, mContext.getUserId());
!!!1512450.java!!!	getInstalledPackages(in flags : int, in userId : int) : List<PackageInfo>
        try {
            ParceledListSlice<PackageInfo> slice = mPM.getInstalledPackages(flags, userId);
            return slice.getList();
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1512578.java!!!	getPackagesHoldingPermissions(inout permissions : String, in flags : int) : List<PackageInfo>
        final int userId = mContext.getUserId();
        try {
            ParceledListSlice<PackageInfo> slice = mPM.getPackagesHoldingPermissions(
                    permissions, flags, userId);
            return slice.getList();
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1512706.java!!!	getInstalledApplications(in flags : int) : List<ApplicationInfo>
        final int userId = mContext.getUserId();
        try {
            ParceledListSlice<ApplicationInfo> slice = mPM.getInstalledApplications(flags, userId);
            return slice.getList();
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1512834.java!!!	resolveActivity(inout intent : Intent, in flags : int) : ResolveInfo
        return resolveActivityAsUser(intent, flags, mContext.getUserId());
!!!1512962.java!!!	resolveActivityAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            return mPM.resolveIntent(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1513090.java!!!	queryIntentActivities(inout intent : Intent, in flags : int) : List<ResolveInfo>
        return queryIntentActivitiesAsUser(intent, flags, mContext.getUserId());
!!!1513218.java!!!	queryIntentActivitiesAsUser(inout intent : Intent, in flags : int, in userId : int) : List<ResolveInfo>
        try {
            return mPM.queryIntentActivities(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1513346.java!!!	queryIntentActivityOptions(inout caller : ComponentName, inout specifics : Intent, inout intent : Intent, in flags : int) : List<ResolveInfo>
        final ContentResolver resolver = mContext.getContentResolver();

        String[] specificTypes = null;
        if (specifics != null) {
            final int N = specifics.length;
            for (int i=0; i<N; i++) {
                Intent sp = specifics[i];
                if (sp != null) {
                    String t = sp.resolveTypeIfNeeded(resolver);
                    if (t != null) {
                        if (specificTypes == null) {
                            specificTypes = new String[N];
                        }
                        specificTypes[i] = t;
                    }
                }
            }
        }

        try {
            return mPM.queryIntentActivityOptions(caller, specifics,
                                                  specificTypes, intent, intent.resolveTypeIfNeeded(resolver),
                                                  flags, mContext.getUserId());
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1513474.java!!!	queryBroadcastReceivers(inout intent : Intent, in flags : int, in userId : int) : List<ResolveInfo>
        try {
            return mPM.queryIntentReceivers(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1513602.java!!!	queryBroadcastReceivers(inout intent : Intent, in flags : int) : List<ResolveInfo>
        return queryBroadcastReceivers(intent, flags, mContext.getUserId());
!!!1513730.java!!!	resolveService(inout intent : Intent, in flags : int) : ResolveInfo
        try {
            return mPM.resolveService(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                mContext.getUserId());
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1513858.java!!!	queryIntentServicesAsUser(inout intent : Intent, in flags : int, in userId : int) : List<ResolveInfo>
        try {
            return mPM.queryIntentServices(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1513986.java!!!	queryIntentServices(inout intent : Intent, in flags : int) : List<ResolveInfo>
        return queryIntentServicesAsUser(intent, flags, mContext.getUserId());
!!!1514114.java!!!	queryIntentContentProvidersAsUser(inout intent : Intent, in flags : int, in userId : int) : List<ResolveInfo>
        try {
            return mPM.queryIntentContentProviders(intent,
                    intent.resolveTypeIfNeeded(mContext.getContentResolver()), flags, userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1514242.java!!!	queryIntentContentProviders(inout intent : Intent, in flags : int) : List<ResolveInfo>
        return queryIntentContentProvidersAsUser(intent, flags, mContext.getUserId());
!!!1514370.java!!!	resolveContentProvider(in name : String, in flags : int) : ProviderInfo
        return resolveContentProviderAsUser(name, flags, mContext.getUserId());
!!!1514498.java!!!	resolveContentProviderAsUser(in name : String, in flags : int, in userId : int) : ProviderInfo
        try {
            return mPM.resolveContentProvider(name, flags, userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1514626.java!!!	queryContentProviders(in processName : String, in uid : int, in flags : int) : List<ProviderInfo>
        try {
            return mPM.queryContentProviders(processName, uid, flags);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1514754.java!!!	getInstrumentationInfo(inout className : ComponentName, in flags : int) : InstrumentationInfo
        try {
            InstrumentationInfo ii = mPM.getInstrumentationInfo(
                className, flags);
            if (ii != null) {
                return ii;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!1514882.java!!!	queryInstrumentation(in targetPackage : String, in flags : int) : List<InstrumentationInfo>
        try {
            return mPM.queryInstrumentation(targetPackage, flags);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1515010.java!!!	getDrawable(in packageName : String, in resid : int, inout appInfo : ApplicationInfo) : Drawable
        ResourceName name = new ResourceName(packageName, resid);
        Drawable dr = getCachedIcon(name);
        if (dr != null) {
            return dr;
        }
        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, sDefaultFlags);
            } catch (NameNotFoundException e) {
                return null;
            }
        }
        try {
            Resources r = getResourcesForApplication(appInfo);
            dr = r.getDrawable(resid);
            if (false) {
                RuntimeException e = new RuntimeException("here");
                e.fillInStackTrace();
                Log.w(TAG, "Getting drawable 0x" + Integer.toHexString(resid)
                      + " from package " + packageName
                      + ": app scale=" + r.getCompatibilityInfo().applicationScale
                      + ", caller scale=" + mContext.getResources().getCompatibilityInfo().applicationScale,
                      e);
            }
            if (DEBUG_ICONS) Log.v(TAG, "Getting drawable 0x"
                                   + Integer.toHexString(resid) + " from " + r
                                   + ": " + dr);
            putCachedIcon(name, dr);
            return dr;
        } catch (NameNotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for "
                  + appInfo.packageName);
        } catch (Resources.NotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for "
                  + appInfo.packageName + ": " + e.getMessage());
        } catch (RuntimeException e) {
            // If an exception was thrown, fall through to return
            // default icon.
            Log.w("PackageManager", "Failure retrieving icon 0x"
                  + Integer.toHexString(resid) + " in package "
                  + packageName, e);
        }
        return null;
!!!1515138.java!!!	getActivityIcon(inout activityName : ComponentName) : Drawable
        return getActivityInfo(activityName, sDefaultFlags).loadIcon(this);
!!!1515266.java!!!	getActivityIcon(inout intent : Intent) : Drawable
        if (intent.getComponent() != null) {
            return getActivityIcon(intent.getComponent());
        }

        ResolveInfo info = resolveActivity(
            intent, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return info.activityInfo.loadIcon(this);
        }

        throw new NameNotFoundException(intent.toUri(0));
!!!1515394.java!!!	getDefaultActivityIcon() : Drawable
        return Resources.getSystem().getDrawable(
            com.android.internal.R.drawable.sym_def_app_icon);
!!!1515522.java!!!	getApplicationIcon(inout info : ApplicationInfo) : Drawable
        return info.loadIcon(this);
!!!1515650.java!!!	getApplicationIcon(in packageName : String) : Drawable
        return getApplicationIcon(getApplicationInfo(packageName, sDefaultFlags));
!!!1515778.java!!!	getActivityBanner(inout activityName : ComponentName) : Drawable
        return getActivityInfo(activityName, sDefaultFlags).loadBanner(this);
!!!1515906.java!!!	getActivityBanner(inout intent : Intent) : Drawable
        if (intent.getComponent() != null) {
            return getActivityBanner(intent.getComponent());
        }

        ResolveInfo info = resolveActivity(
                intent, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return info.activityInfo.loadBanner(this);
        }

        throw new NameNotFoundException(intent.toUri(0));
!!!1516034.java!!!	getApplicationBanner(inout info : ApplicationInfo) : Drawable
        return info.loadBanner(this);
!!!1516162.java!!!	getApplicationBanner(in packageName : String) : Drawable
        return getApplicationBanner(getApplicationInfo(packageName, sDefaultFlags));
!!!1516290.java!!!	getActivityLogo(inout activityName : ComponentName) : Drawable
        return getActivityInfo(activityName, sDefaultFlags).loadLogo(this);
!!!1516418.java!!!	getActivityLogo(inout intent : Intent) : Drawable
        if (intent.getComponent() != null) {
            return getActivityLogo(intent.getComponent());
        }

        ResolveInfo info = resolveActivity(
            intent, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return info.activityInfo.loadLogo(this);
        }

        throw new NameNotFoundException(intent.toUri(0));
!!!1516546.java!!!	getApplicationLogo(inout info : ApplicationInfo) : Drawable
        return info.loadLogo(this);
!!!1516674.java!!!	getApplicationLogo(in packageName : String) : Drawable
        return getApplicationLogo(getApplicationInfo(packageName, sDefaultFlags));
!!!1516802.java!!!	getUserBadgedIcon(inout icon : Drawable, inout user : UserHandle) : Drawable
        final int badgeResId = getBadgeResIdForUser(user.getIdentifier());
        if (badgeResId == 0) {
            return icon;
        }
        Drawable badgeIcon = getDrawable("system", badgeResId, null);
        return getBadgedDrawable(icon, badgeIcon, null, true);
!!!1516930.java!!!	getUserBadgedDrawableForDensity(inout drawable : Drawable, inout user : UserHandle, inout badgeLocation : Rect, in badgeDensity : int) : Drawable
        Drawable badgeDrawable = getUserBadgeForDensity(user, badgeDensity);
        if (badgeDrawable == null) {
            return drawable;
        }
        return getBadgedDrawable(drawable, badgeDrawable, badgeLocation, true);
!!!1517058.java!!!	getUserBadgeForDensity(inout user : UserHandle, in density : int) : Drawable
        UserInfo userInfo = getUserIfProfile(user.getIdentifier());
        if (userInfo != null && userInfo.isManagedProfile()) {
            if (density <= 0) {
                density = mContext.getResources().getDisplayMetrics().densityDpi;
            }
            return Resources.getSystem().getDrawableForDensity(
                    com.android.internal.R.drawable.ic_corp_badge, density);
        }
        return null;
!!!1517186.java!!!	getUserBadgedLabel(inout label : CharSequence, inout user : UserHandle) : CharSequence
        UserInfo userInfo = getUserIfProfile(user.getIdentifier());
        if (userInfo != null && userInfo.isManagedProfile()) {
            return Resources.getSystem().getString(
                    com.android.internal.R.string.managed_profile_label_badge, label);
        }
        return label;
!!!1517314.java!!!	getResourcesForActivity(inout activityName : ComponentName) : Resources
        return getResourcesForApplication(
            getActivityInfo(activityName, sDefaultFlags).applicationInfo);
!!!1517442.java!!!	getResourcesForApplication(inout app : ApplicationInfo) : Resources
        if (app.packageName.equals("system")) {
            return mContext.mMainThread.getSystemContext().getResources();
        }
        final boolean sameUid = (app.uid == Process.myUid());
        Resources r = mContext.mMainThread.getTopLevelResources(
                sameUid ? app.sourceDir : app.publicSourceDir,
                sameUid ? app.splitSourceDirs : app.splitPublicSourceDirs,
                app.resourceDirs, app.sharedLibraryFiles, Display.DEFAULT_DISPLAY,
                null, mContext.mPackageInfo);
        if (r != null) {
            return r;
        }
        throw new NameNotFoundException("Unable to open " + app.publicSourceDir);
!!!1517570.java!!!	getResourcesForApplication(in appPackageName : String) : Resources
        return getResourcesForApplication(
            getApplicationInfo(appPackageName, sDefaultFlags));
!!!1517698.java!!!	getResourcesForApplicationAsUser(in appPackageName : String, in userId : int) : Resources
        if (userId < 0) {
            throw new IllegalArgumentException(
                    "Call does not support special user #" + userId);
        }
        if ("system".equals(appPackageName)) {
            return mContext.mMainThread.getSystemContext().getResources();
        }
        try {
            ApplicationInfo ai = mPM.getApplicationInfo(appPackageName, sDefaultFlags, userId);
            if (ai != null) {
                return getResourcesForApplication(ai);
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
        throw new NameNotFoundException("Package " + appPackageName + " doesn't exist");
!!!1517826.java!!!	isSafeMode() : boolean
        try {
            if (mCachedSafeMode < 0) {
                mCachedSafeMode = mPM.isSafeMode() ? 1 : 0;
            }
            return mCachedSafeMode != 0;
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!1517954.java!!!	configurationChanged() : void
        synchronized (sSync) {
            sIconCache.clear();
            sStringCache.clear();
        }
!!!1518082.java!!!	ApplicationPackageManager(inout context : ContextImpl, inout pm : IPackageManager)
        mContext = context;
        mPM = pm;
!!!1518210.java!!!	getCachedIcon(inout name : ApplicationPackageManager::ResourceName) : Drawable
        synchronized (sSync) {
            WeakReference<Drawable.ConstantState> wr = sIconCache.get(name);
            if (DEBUG_ICONS) Log.v(TAG, "Get cached weak drawable ref for "
                                   + name + ": " + wr);
            if (wr != null) {   // we have the activity
                Drawable.ConstantState state = wr.get();
                if (state != null) {
                    if (DEBUG_ICONS) {
                        Log.v(TAG, "Get cached drawable state for " + name + ": " + state);
                    }
                    // Note: It's okay here to not use the newDrawable(Resources) variant
                    //       of the API. The ConstantState comes from a drawable that was
                    //       originally created by passing the proper app Resources instance
                    //       which means the state should already contain the proper
                    //       resources specific information (like density.) See
                    //       BitmapDrawable.BitmapState for instance.
                    return state.newDrawable();
                }
                // our entry has been purged
                sIconCache.remove(name);
            }
        }
        return null;
!!!1518338.java!!!	putCachedIcon(inout name : ApplicationPackageManager::ResourceName, inout dr : Drawable) : void
        synchronized (sSync) {
            sIconCache.put(name, new WeakReference<Drawable.ConstantState>(dr.getConstantState()));
            if (DEBUG_ICONS) Log.v(TAG, "Added cached drawable state for " + name + ": " + dr);
        }
!!!1518466.java!!!	handlePackageBroadcast(in cmd : int, inout pkgList : String, inout hasPkgInfo : boolean) : void
        boolean immediateGc = false;
        if (cmd == IApplicationThread.EXTERNAL_STORAGE_UNAVAILABLE) {
            immediateGc = true;
        }
        if (pkgList != null && (pkgList.length > 0)) {
            boolean needCleanup = false;
            for (String ssp : pkgList) {
                synchronized (sSync) {
                    for (int i=sIconCache.size()-1; i>=0; i--) {
                        ResourceName nm = sIconCache.keyAt(i);
                        if (nm.packageName.equals(ssp)) {
                            //Log.i(TAG, "Removing cached drawable for " + nm);
                            sIconCache.removeAt(i);
                            needCleanup = true;
                        }
                    }
                    for (int i=sStringCache.size()-1; i>=0; i--) {
                        ResourceName nm = sStringCache.keyAt(i);
                        if (nm.packageName.equals(ssp)) {
                            //Log.i(TAG, "Removing cached string for " + nm);
                            sStringCache.removeAt(i);
                            needCleanup = true;
                        }
                    }
                }
            }
            if (needCleanup || hasPkgInfo) {
                if (immediateGc) {
                    // Schedule an immediate gc.
                    Runtime.getRuntime().gc();
                } else {
                    ActivityThread.currentActivityThread().scheduleGcIdler();
                }
            }
        }
!!!1519490.java!!!	getCachedString(inout name : ApplicationPackageManager::ResourceName) : CharSequence
        synchronized (sSync) {
            WeakReference<CharSequence> wr = sStringCache.get(name);
            if (wr != null) {   // we have the activity
                CharSequence cs = wr.get();
                if (cs != null) {
                    return cs;
                }
                // our entry has been purged
                sStringCache.remove(name);
            }
        }
        return null;
!!!1519618.java!!!	putCachedString(inout name : ApplicationPackageManager::ResourceName, inout cs : CharSequence) : void
        synchronized (sSync) {
            sStringCache.put(name, new WeakReference<CharSequence>(cs));
        }
!!!1519746.java!!!	getText(in packageName : String, in resid : int, inout appInfo : ApplicationInfo) : CharSequence
        ResourceName name = new ResourceName(packageName, resid);
        CharSequence text = getCachedString(name);
        if (text != null) {
            return text;
        }
        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, sDefaultFlags);
            } catch (NameNotFoundException e) {
                return null;
            }
        }
        try {
            Resources r = getResourcesForApplication(appInfo);
            text = r.getText(resid);
            putCachedString(name, text);
            return text;
        } catch (NameNotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for "
                  + appInfo.packageName);
        } catch (RuntimeException e) {
            // If an exception was thrown, fall through to return
            // default icon.
            Log.w("PackageManager", "Failure retrieving text 0x"
                  + Integer.toHexString(resid) + " in package "
                  + packageName, e);
        }
        return null;
!!!1519874.java!!!	getXml(in packageName : String, in resid : int, inout appInfo : ApplicationInfo) : XmlResourceParser
        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, sDefaultFlags);
            } catch (NameNotFoundException e) {
                return null;
            }
        }
        try {
            Resources r = getResourcesForApplication(appInfo);
            return r.getXml(resid);
        } catch (RuntimeException e) {
            // If an exception was thrown, fall through to return
            // default icon.
            Log.w("PackageManager", "Failure retrieving xml 0x"
                  + Integer.toHexString(resid) + " in package "
                  + packageName, e);
        } catch (NameNotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for "
                  + appInfo.packageName);
        }
        return null;
!!!1520002.java!!!	getApplicationLabel(inout info : ApplicationInfo) : CharSequence
        return info.loadLabel(this);
!!!1520130.java!!!	installPackage(inout packageURI : Uri, inout observer : IPackageInstallObserver, in flags : int, in installerPackageName : String) : void
        final VerificationParams verificationParams = new VerificationParams(null, null,
                null, VerificationParams.NO_UID, null);
        installCommon(packageURI, new LegacyPackageInstallObserver(observer), flags,
                installerPackageName, verificationParams, null);
!!!1520258.java!!!	installPackageWithVerification(inout packageURI : Uri, inout observer : IPackageInstallObserver, in flags : int, in installerPackageName : String, inout verificationURI : Uri, inout manifestDigest : ManifestDigest, inout encryptionParams : ContainerEncryptionParams) : void
        final VerificationParams verificationParams = new VerificationParams(verificationURI, null,
                null, VerificationParams.NO_UID, manifestDigest);
        installCommon(packageURI, new LegacyPackageInstallObserver(observer), flags,
                installerPackageName, verificationParams, encryptionParams);
!!!1520386.java!!!	installPackageWithVerificationAndEncryption(inout packageURI : Uri, inout observer : IPackageInstallObserver, in flags : int, in installerPackageName : String, inout verificationParams : VerificationParams, inout encryptionParams : ContainerEncryptionParams) : void
        installCommon(packageURI, new LegacyPackageInstallObserver(observer), flags,
                installerPackageName, verificationParams, encryptionParams);
!!!1520514.java!!!	installPackage(inout packageURI : Uri, inout observer : PackageInstallObserver, in flags : int, in installerPackageName : String) : void
        final VerificationParams verificationParams = new VerificationParams(null, null,
                null, VerificationParams.NO_UID, null);
        installCommon(packageURI, observer, flags, installerPackageName, verificationParams, null);
!!!1520642.java!!!	installPackageWithVerification(inout packageURI : Uri, inout observer : PackageInstallObserver, in flags : int, in installerPackageName : String, inout verificationURI : Uri, inout manifestDigest : ManifestDigest, inout encryptionParams : ContainerEncryptionParams) : void
        final VerificationParams verificationParams = new VerificationParams(verificationURI, null,
                null, VerificationParams.NO_UID, manifestDigest);
        installCommon(packageURI, observer, flags, installerPackageName, verificationParams,
                encryptionParams);
!!!1520770.java!!!	installPackageWithVerificationAndEncryption(inout packageURI : Uri, inout observer : PackageInstallObserver, in flags : int, in installerPackageName : String, inout verificationParams : VerificationParams, inout encryptionParams : ContainerEncryptionParams) : void
        installCommon(packageURI, observer, flags, installerPackageName, verificationParams,
                encryptionParams);
!!!1520898.java!!!	installCommon(inout packageURI : Uri, inout observer : PackageInstallObserver, in flags : int, in installerPackageName : String, inout verificationParams : VerificationParams, inout encryptionParams : ContainerEncryptionParams) : void
        if (!"file".equals(packageURI.getScheme())) {
            throw new UnsupportedOperationException("Only file:// URIs are supported");
        }
        if (encryptionParams != null) {
            throw new UnsupportedOperationException("ContainerEncryptionParams not supported");
        }

        final String originPath = packageURI.getPath();
        try {
            mPM.installPackage(originPath, observer.getBinder(), flags, installerPackageName,
                    verificationParams, null);
        } catch (RemoteException ignored) {
        }
!!!1521026.java!!!	installExistingPackage(in packageName : String) : int
        try {
            int res = mPM.installExistingPackageAsUser(packageName, UserHandle.myUserId());
            if (res == INSTALL_FAILED_INVALID_URI) {
                throw new NameNotFoundException("Package " + packageName + " doesn't exist");
            }
            return res;
        } catch (RemoteException e) {
            // Should never happen!
            throw new NameNotFoundException("Package " + packageName + " doesn't exist");
        }
!!!1521154.java!!!	verifyPendingInstall(in id : int, in response : int) : void
        try {
            mPM.verifyPendingInstall(id, response);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1521282.java!!!	extendVerificationTimeout(in id : int, in verificationCodeAtTimeout : int, in millisecondsToDelay : long) : void
        try {
            mPM.extendVerificationTimeout(id, verificationCodeAtTimeout, millisecondsToDelay);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1521410.java!!!	setInstallerPackageName(in targetPackage : String, in installerPackageName : String) : void
        try {
            mPM.setInstallerPackageName(targetPackage, installerPackageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1521538.java!!!	movePackage(in packageName : String, inout observer : IPackageMoveObserver, in flags : int) : void
        try {
            mPM.movePackage(packageName, observer, flags);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1521666.java!!!	getInstallerPackageName(in packageName : String) : String
        try {
            return mPM.getInstallerPackageName(packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
        return null;
!!!1521794.java!!!	deletePackage(in packageName : String, inout observer : IPackageDeleteObserver, in flags : int) : void
        try {
            mPM.deletePackageAsUser(packageName, observer, UserHandle.myUserId(), flags);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1521922.java!!!	clearApplicationUserData(in packageName : String, inout observer : IPackageDataObserver) : void
        try {
            mPM.clearApplicationUserData(packageName, observer, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1522050.java!!!	deleteApplicationCacheFiles(in packageName : String, inout observer : IPackageDataObserver) : void
        try {
            mPM.deleteApplicationCacheFiles(packageName, observer);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1522178.java!!!	freeStorageAndNotify(in idealStorageSize : long, inout observer : IPackageDataObserver) : void
        try {
            mPM.freeStorageAndNotify(idealStorageSize, observer);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1522306.java!!!	freeStorage(in freeStorageSize : long, inout pi : IntentSender) : void
        try {
            mPM.freeStorage(freeStorageSize, pi);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1522434.java!!!	getPackageSizeInfo(in packageName : String, in userHandle : int, inout observer : IPackageStatsObserver) : void
        try {
            mPM.getPackageSizeInfo(packageName, userHandle, observer);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1522562.java!!!	addPackageToPreferred(in packageName : String) : void
        try {
            mPM.addPackageToPreferred(packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1522690.java!!!	removePackageFromPreferred(in packageName : String) : void
        try {
            mPM.removePackageFromPreferred(packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1522818.java!!!	getPreferredPackages(in flags : int) : List<PackageInfo>
        try {
            return mPM.getPreferredPackages(flags);
        } catch (RemoteException e) {
            // Should never happen!
        }
        return new ArrayList<PackageInfo>();
!!!1522946.java!!!	addPreferredActivity(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName) : void
        try {
            mPM.addPreferredActivity(filter, match, set, activity, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1523074.java!!!	addPreferredActivity(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName, in userId : int) : void
        try {
            mPM.addPreferredActivity(filter, match, set, activity, userId);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1523202.java!!!	replacePreferredActivity(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName) : void
        try {
            mPM.replacePreferredActivity(filter, match, set, activity, UserHandle.myUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1523330.java!!!	replacePreferredActivityAsUser(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName, in userId : int) : void
        try {
            mPM.replacePreferredActivity(filter, match, set, activity, userId);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1523458.java!!!	clearPackagePreferredActivities(in packageName : String) : void
        try {
            mPM.clearPackagePreferredActivities(packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1523586.java!!!	getPreferredActivities(inout outFilters : List<IntentFilter>, inout outActivities : List<ComponentName>, in packageName : String) : int
        try {
            return mPM.getPreferredActivities(outFilters, outActivities, packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
        return 0;
!!!1523714.java!!!	getHomeActivities(inout outActivities : List<ResolveInfo>) : ComponentName
        try {
            return mPM.getHomeActivities(outActivities);
        } catch (RemoteException e) {
            // Should never happen!
        }
        return null;
!!!1523842.java!!!	setComponentEnabledSetting(inout componentName : ComponentName, in newState : int, in flags : int) : void
        try {
            mPM.setComponentEnabledSetting(componentName, newState, flags, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1523970.java!!!	getComponentEnabledSetting(inout componentName : ComponentName) : int
        try {
            return mPM.getComponentEnabledSetting(componentName, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
        return PackageManager.COMPONENT_ENABLED_STATE_DEFAULT;
!!!1524098.java!!!	setApplicationEnabledSetting(in packageName : String, in newState : int, in flags : int) : void
        try {
            mPM.setApplicationEnabledSetting(packageName, newState, flags,
                    mContext.getUserId(), mContext.getOpPackageName());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1524226.java!!!	getApplicationEnabledSetting(in packageName : String) : int
        try {
            return mPM.getApplicationEnabledSetting(packageName, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
        return PackageManager.COMPONENT_ENABLED_STATE_DEFAULT;
!!!1524354.java!!!	setApplicationHiddenSettingAsUser(in packageName : String, inout hidden : boolean, inout user : UserHandle) : boolean
        try {
            return mPM.setApplicationHiddenSettingAsUser(packageName, hidden,
                    user.getIdentifier());
        } catch (RemoteException re) {
            // Should never happen!
        }
        return false;
!!!1524482.java!!!	getApplicationHiddenSettingAsUser(in packageName : String, inout user : UserHandle) : boolean
        try {
            return mPM.getApplicationHiddenSettingAsUser(packageName, user.getIdentifier());
        } catch (RemoteException re) {
            // Should never happen!
        }
        return false;
!!!1524610.java!!!	getKeySetByAlias(in packageName : String, in alias : String) : KeySet
        Preconditions.checkNotNull(packageName);
        Preconditions.checkNotNull(alias);
        KeySet ks;
        try {
            ks = mPM.getKeySetByAlias(packageName, alias);
        } catch (RemoteException e) {
            return null;
        }
        return ks;
!!!1524738.java!!!	getSigningKeySet(in packageName : String) : KeySet
        Preconditions.checkNotNull(packageName);
        KeySet ks;
        try {
            ks = mPM.getSigningKeySet(packageName);
        } catch (RemoteException e) {
            return null;
        }
        return ks;
!!!1524866.java!!!	isSignedBy(in packageName : String, inout ks : KeySet) : boolean
        Preconditions.checkNotNull(packageName);
        Preconditions.checkNotNull(ks);
        try {
            return mPM.isPackageSignedByKeySet(packageName, ks);
        } catch (RemoteException e) {
            return false;
        }
!!!1524994.java!!!	isSignedByExactly(in packageName : String, inout ks : KeySet) : boolean
        Preconditions.checkNotNull(packageName);
        Preconditions.checkNotNull(ks);
        try {
            return mPM.isPackageSignedByKeySetExactly(packageName, ks);
        } catch (RemoteException e) {
            return false;
        }
!!!1525122.java!!!	getVerifierDeviceIdentity() : VerifierDeviceIdentity
        try {
            return mPM.getVerifierDeviceIdentity();
        } catch (RemoteException e) {
            // Should never happen!
        }
        return null;
!!!1525250.java!!!	getPackageInstaller() : PackageInstaller
        synchronized (mLock) {
            if (mInstaller == null) {
                try {
                    mInstaller = new PackageInstaller(mContext, this, mPM.getPackageInstaller(),
                            mContext.getPackageName(), mContext.getUserId());
                } catch (RemoteException e) {
                    throw e.rethrowAsRuntimeException();
                }
            }
            return mInstaller;
        }
!!!1525378.java!!!	isPackageAvailable(in packageName : String) : boolean
        try {
            return mPM.isPackageAvailable(packageName, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowAsRuntimeException();
        }
!!!1525506.java!!!	addCrossProfileIntentFilter(inout filter : IntentFilter, in sourceUserId : int, in targetUserId : int, in flags : int) : void
        try {
            mPM.addCrossProfileIntentFilter(filter, mContext.getOpPackageName(),
                    mContext.getUserId(), sourceUserId, targetUserId, flags);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1525634.java!!!	clearCrossProfileIntentFilters(in sourceUserId : int) : void
        try {
            mPM.clearCrossProfileIntentFilters(sourceUserId, mContext.getOpPackageName(),
                    mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!1525762.java!!!	loadItemIcon(inout itemInfo : PackageItemInfo, inout appInfo : ApplicationInfo) : Drawable
        if (itemInfo.showUserIcon != UserHandle.USER_NULL) {
            Bitmap bitmap = getUserManager().getUserIcon(itemInfo.showUserIcon);
            if (bitmap == null) {
                return UserIcons.getDefaultUserIcon(itemInfo.showUserIcon, /* light= */ false);
            }
            return new BitmapDrawable(bitmap);
        }
        Drawable dr = null;
        if (itemInfo.packageName != null) {
            dr = getDrawable(itemInfo.packageName, itemInfo.icon, appInfo);
        }
        if (dr == null) {
            dr = itemInfo.loadDefaultIcon(this);
        }
        return getUserBadgedIcon(dr, new UserHandle(mContext.getUserId()));
!!!1525890.java!!!	getBadgedDrawable(inout drawable : Drawable, inout badgeDrawable : Drawable, inout badgeLocation : Rect, inout tryBadgeInPlace : boolean) : Drawable
        final int badgedWidth = drawable.getIntrinsicWidth();
        final int badgedHeight = drawable.getIntrinsicHeight();
        final boolean canBadgeInPlace = tryBadgeInPlace
                && (drawable instanceof BitmapDrawable)
                && ((BitmapDrawable) drawable).getBitmap().isMutable();

        final Bitmap bitmap;
        if (canBadgeInPlace) {
            bitmap = ((BitmapDrawable) drawable).getBitmap();
        } else {
            bitmap = Bitmap.createBitmap(badgedWidth, badgedHeight, Bitmap.Config.ARGB_8888);
        }
        Canvas canvas = new Canvas(bitmap);

        if (!canBadgeInPlace) {
            drawable.setBounds(0, 0, badgedWidth, badgedHeight);
            drawable.draw(canvas);
        }

        if (badgeLocation != null) {
            if (badgeLocation.left < 0 || badgeLocation.top < 0
                    || badgeLocation.width() > badgedWidth || badgeLocation.height() > badgedHeight) {
                throw new IllegalArgumentException("Badge location " + badgeLocation
                        + " not in badged drawable bounds "
                        + new Rect(0, 0, badgedWidth, badgedHeight));
            }
            badgeDrawable.setBounds(0, 0, badgeLocation.width(), badgeLocation.height());

            canvas.save();
            canvas.translate(badgeLocation.left, badgeLocation.top);
            badgeDrawable.draw(canvas);
            canvas.restore();
        } else {
            badgeDrawable.setBounds(0, 0, badgedWidth, badgedHeight);
            badgeDrawable.draw(canvas);
        }

        if (!canBadgeInPlace) {
            BitmapDrawable mergedDrawable = new BitmapDrawable(mContext.getResources(), bitmap);

            if (drawable instanceof BitmapDrawable) {
                BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
                mergedDrawable.setTargetDensity(bitmapDrawable.getBitmap().getDensity());
            }

            return mergedDrawable;
        }

        return drawable;
!!!1526018.java!!!	getBadgeResIdForUser(in userHandle : int) : int
        // Return the framework-provided badge.
        UserInfo userInfo = getUserIfProfile(userHandle);
        if (userInfo != null && userInfo.isManagedProfile()) {
            return com.android.internal.R.drawable.ic_corp_icon_badge;
        }
        return 0;
!!!1526146.java!!!	getUserIfProfile(in userHandle : int) : UserInfo
        List<UserInfo> userProfiles = getUserManager().getProfiles(UserHandle.myUserId());
        for (UserInfo user : userProfiles) {
            if (user.id == userHandle) {
                return user;
            }
        }
        return null;
