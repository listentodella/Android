class KeyCharacterMap
!!!751618.java!!!	addCombining(in combining : int, in accent : int) : void
        sCombiningToAccent.append(combining, accent);
        sAccentToCombining.append(accent, combining);
!!!751746.java!!!	addDeadKey(in accent : int, in c : int, in result : int) : void
        final int combining = sAccentToCombining.get(accent);
        if (combining == 0) {
            throw new IllegalStateException("Invalid dead key declaration.");
        }
        final int combination = (combining << 16) | c;
        sDeadKeyCache.put(combination, result);
!!!753154.java!!!	KeyCharacterMap(inout in : Parcel)
        if (in == null) {
            throw new IllegalArgumentException("parcel must not be null");
        }
        mPtr = nativeReadFromParcel(in);
        if (mPtr == 0) {
            throw new RuntimeException("Could not read KeyCharacterMap from parcel.");
        }
!!!753282.java!!!	KeyCharacterMap(in ptr : long)
        mPtr = ptr;
!!!753410.java!!!	finalize() : void
        if (mPtr != 0) {
            nativeDispose(mPtr);
            mPtr = 0;
        }
!!!753538.java!!!	load(in deviceId : int) : KeyCharacterMap
        final InputManager im = InputManager.getInstance();
        InputDevice inputDevice = im.getInputDevice(deviceId);
        if (inputDevice == null) {
            inputDevice = im.getInputDevice(VIRTUAL_KEYBOARD);
            if (inputDevice == null) {
                throw new UnavailableException(
                        "Could not load key character map for device " + deviceId);
            }
        }
        return inputDevice.getKeyCharacterMap();
!!!753666.java!!!	get(in keyCode : int, in metaState : int) : int
        metaState = KeyEvent.normalizeMetaState(metaState);
        char ch = nativeGetCharacter(mPtr, keyCode, metaState);

        int map = sCombiningToAccent.get(ch);
        if (map != 0) {
            return map | COMBINING_ACCENT;
        } else {
            return ch;
        }
!!!753794.java!!!	getFallbackAction(in keyCode : int, in metaState : int) : KeyCharacterMap::FallbackAction
        FallbackAction action = FallbackAction.obtain();
        metaState = KeyEvent.normalizeMetaState(metaState);
        if (nativeGetFallbackAction(mPtr, keyCode, metaState, action)) {
            action.metaState = KeyEvent.normalizeMetaState(action.metaState);
            return action;
        }
        action.recycle();
        return null;
!!!753922.java!!!	getNumber(in keyCode : int) : char
        return nativeGetNumber(mPtr, keyCode);
!!!754050.java!!!	getMatch(in keyCode : int, inout chars : char) : char
        return getMatch(keyCode, chars, 0);
!!!754178.java!!!	getMatch(in keyCode : int, inout chars : char, in metaState : int) : char
        if (chars == null) {
            throw new IllegalArgumentException("chars must not be null.");
        }

        metaState = KeyEvent.normalizeMetaState(metaState);
        return nativeGetMatch(mPtr, keyCode, chars, metaState);
!!!754306.java!!!	getDisplayLabel(in keyCode : int) : char
        return nativeGetDisplayLabel(mPtr, keyCode);
!!!754434.java!!!	getDeadChar(in accent : int, in c : int) : int
        if (c == accent || CHAR_SPACE == c) {
            // The same dead character typed twice or a dead character followed by a
            // space should both produce the non-combining version of the combining char.
            // In this case we don't even need to compute the combining character.
            return accent;
        }

        int combining = sAccentToCombining.get(accent);
        if (combining == 0) {
            return 0;
        }

        final int combination = (combining << 16) | c;
        int combined;
        synchronized (sDeadKeyCache) {
            combined = sDeadKeyCache.get(combination, -1);
            if (combined == -1) {
                sDeadKeyBuilder.setLength(0);
                sDeadKeyBuilder.append((char)c);
                sDeadKeyBuilder.append((char)combining);
                String result = Normalizer.normalize(sDeadKeyBuilder, Normalizer.Form.NFC);
                combined = result.codePointCount(0, result.length()) == 1
                        ? result.codePointAt(0) : 0;
                sDeadKeyCache.put(combination, combined);
            }
        }
        return combined;
!!!754562.java!!!	getKeyData(in keyCode : int, inout results : KeyCharacterMap::KeyData) : boolean
        if (results.meta.length < KeyData.META_LENGTH) {
            throw new IndexOutOfBoundsException(
                    "results.meta.length must be >= " + KeyData.META_LENGTH);
        }

        char displayLabel = nativeGetDisplayLabel(mPtr, keyCode);
        if (displayLabel == 0) {
            return false;
        }

        results.displayLabel = displayLabel;
        results.number = nativeGetNumber(mPtr, keyCode);
        results.meta[0] = nativeGetCharacter(mPtr, keyCode, 0);
        results.meta[1] = nativeGetCharacter(mPtr, keyCode, KeyEvent.META_SHIFT_ON);
        results.meta[2] = nativeGetCharacter(mPtr, keyCode, KeyEvent.META_ALT_ON);
        results.meta[3] = nativeGetCharacter(mPtr, keyCode,
                KeyEvent.META_ALT_ON | KeyEvent.META_SHIFT_ON);
        return true;
!!!754690.java!!!	getEvents(inout chars : char) : KeyEvent
        if (chars == null) {
            throw new IllegalArgumentException("chars must not be null.");
        }
        return nativeGetEvents(mPtr, chars);
!!!754818.java!!!	isPrintingKey(in keyCode : int) : boolean
        int type = Character.getType(nativeGetDisplayLabel(mPtr, keyCode));

        switch (type)
        {
            case Character.SPACE_SEPARATOR:
            case Character.LINE_SEPARATOR:
            case Character.PARAGRAPH_SEPARATOR:
            case Character.CONTROL:
            case Character.FORMAT:
                return false;
            default:
                return true;
        }
!!!754946.java!!!	getKeyboardType() : int
        return nativeGetKeyboardType(mPtr);
!!!755074.java!!!	getModifierBehavior() : int
        switch (getKeyboardType()) {
            case FULL:
            case SPECIAL_FUNCTION:
                return MODIFIER_BEHAVIOR_CHORDED;
            default:
                return MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED;
        }
!!!755202.java!!!	deviceHasKey(in keyCode : int) : boolean
        return InputManager.getInstance().deviceHasKeys(new int[] { keyCode })[0];
!!!755330.java!!!	deviceHasKeys(inout keyCodes : int) : boolean
        return InputManager.getInstance().deviceHasKeys(keyCodes);
!!!755458.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        if (out == null) {
            throw new IllegalArgumentException("parcel must not be null");
        }
        nativeWriteToParcel(mPtr, out);
!!!755586.java!!!	describeContents() : int
        return 0;
