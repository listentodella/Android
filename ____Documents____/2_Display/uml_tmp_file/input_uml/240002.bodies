class InputMethodSubtype
!!!1161986.java!!!	getBuilder(in nameId : int, in iconId : int, in locale : String, in mode : String, in extraValue : String, inout isAuxiliary : boolean, inout overridesImplicitlyEnabledSubtype : boolean, in id : int, inout isAsciiCapable : boolean) : InputMethodSubtype::InputMethodSubtypeBuilder
         final InputMethodSubtypeBuilder builder = new InputMethodSubtypeBuilder();
         builder.mSubtypeNameResId = nameId;
         builder.mSubtypeIconResId = iconId;
         builder.mSubtypeLocale = locale;
         builder.mSubtypeMode = mode;
         builder.mSubtypeExtraValue = extraValue;
         builder.mIsAuxiliary = isAuxiliary;
         builder.mOverridesImplicitlyEnabledSubtype = overridesImplicitlyEnabledSubtype;
         builder.mSubtypeId = id;
         builder.mIsAsciiCapable = isAsciiCapable;
         return builder;
!!!1162114.java!!!	InputMethodSubtype(in nameId : int, in iconId : int, in locale : String, in mode : String, in extraValue : String, inout isAuxiliary : boolean, inout overridesImplicitlyEnabledSubtype : boolean)
        this(nameId, iconId, locale, mode, extraValue, isAuxiliary,
                overridesImplicitlyEnabledSubtype, 0);
!!!1162242.java!!!	InputMethodSubtype(in nameId : int, in iconId : int, in locale : String, in mode : String, in extraValue : String, inout isAuxiliary : boolean, inout overridesImplicitlyEnabledSubtype : boolean, in id : int)
        this(getBuilder(nameId, iconId, locale, mode, extraValue, isAuxiliary,
                overridesImplicitlyEnabledSubtype, id, false));
!!!1162370.java!!!	InputMethodSubtype(inout builder : InputMethodSubtype::InputMethodSubtypeBuilder)
        mSubtypeNameResId = builder.mSubtypeNameResId;
        mSubtypeIconResId = builder.mSubtypeIconResId;
        mSubtypeLocale = builder.mSubtypeLocale;
        mSubtypeMode = builder.mSubtypeMode;
        mSubtypeExtraValue = builder.mSubtypeExtraValue;
        mIsAuxiliary = builder.mIsAuxiliary;
        mOverridesImplicitlyEnabledSubtype = builder.mOverridesImplicitlyEnabledSubtype;
        mSubtypeId = builder.mSubtypeId;
        mIsAsciiCapable = builder.mIsAsciiCapable;
        // If hashCode() of this subtype is 0 and you want to specify it as an id of this subtype,
        // just specify 0 as this subtype's id. Then, this subtype's id is treated as 0.
        mSubtypeHashCode = mSubtypeId != 0 ? mSubtypeId : hashCodeInternal(mSubtypeLocale,
                mSubtypeMode, mSubtypeExtraValue, mIsAuxiliary, mOverridesImplicitlyEnabledSubtype,
                mIsAsciiCapable);
!!!1162498.java!!!	InputMethodSubtype(inout source : Parcel)
        String s;
        mSubtypeNameResId = source.readInt();
        mSubtypeIconResId = source.readInt();
        s = source.readString();
        mSubtypeLocale = s != null ? s : "";
        s = source.readString();
        mSubtypeMode = s != null ? s : "";
        s = source.readString();
        mSubtypeExtraValue = s != null ? s : "";
        mIsAuxiliary = (source.readInt() == 1);
        mOverridesImplicitlyEnabledSubtype = (source.readInt() == 1);
        mSubtypeHashCode = source.readInt();
        mSubtypeId = source.readInt();
        mIsAsciiCapable = (source.readInt() == 1);
!!!1162626.java!!!	getNameResId() : int
        return mSubtypeNameResId;
!!!1162754.java!!!	getIconResId() : int
        return mSubtypeIconResId;
!!!1162882.java!!!	getLocale() : String
        return mSubtypeLocale;
!!!1163010.java!!!	getMode() : String
        return mSubtypeMode;
!!!1163138.java!!!	getExtraValue() : String
        return mSubtypeExtraValue;
!!!1163266.java!!!	isAuxiliary() : boolean
        return mIsAuxiliary;
!!!1163394.java!!!	overridesImplicitlyEnabledSubtype() : boolean
        return mOverridesImplicitlyEnabledSubtype;
!!!1163522.java!!!	isAsciiCapable() : boolean
        return mIsAsciiCapable;
!!!1163650.java!!!	getDisplayName(inout context : Context, in packageName : String, inout appInfo : ApplicationInfo) : CharSequence
        final Locale locale = constructLocaleFromString(mSubtypeLocale);
        final String localeStr = locale != null ? locale.getDisplayName() : mSubtypeLocale;
        if (mSubtypeNameResId == 0) {
            return localeStr;
        }
        final CharSequence subtypeName = context.getPackageManager().getText(
                packageName, mSubtypeNameResId, appInfo);
        if (!TextUtils.isEmpty(subtypeName)) {
            final String replacementString =
                    containsExtraValueKey(EXTRA_KEY_UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME)
                            ? getExtraValueOf(EXTRA_KEY_UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME)
                            : localeStr;
            try {
                return String.format(
                        subtypeName.toString(), replacementString != null ? replacementString : "");
            } catch (IllegalFormatException e) {
                Slog.w(TAG, "Found illegal format in subtype name("+ subtypeName + "): " + e);
                return "";
            }
        } else {
            return localeStr;
        }
!!!1163778.java!!!	getExtraValueHashMap() : HashMap<String, String>
        if (mExtraValueHashMapCache == null) {
            synchronized(this) {
                if (mExtraValueHashMapCache == null) {
                    mExtraValueHashMapCache = new HashMap<String, String>();
                    final String[] pairs = mSubtypeExtraValue.split(EXTRA_VALUE_PAIR_SEPARATOR);
                    final int N = pairs.length;
                    for (int i = 0; i < N; ++i) {
                        final String[] pair = pairs[i].split(EXTRA_VALUE_KEY_VALUE_SEPARATOR);
                        if (pair.length == 1) {
                            mExtraValueHashMapCache.put(pair[0], null);
                        } else if (pair.length > 1) {
                            if (pair.length > 2) {
                                Slog.w(TAG, "ExtraValue has two or more '='s");
                            }
                            mExtraValueHashMapCache.put(pair[0], pair[1]);
                        }
                    }
                }
            }
        }
        return mExtraValueHashMapCache;
!!!1163906.java!!!	containsExtraValueKey(in key : String) : boolean
        return getExtraValueHashMap().containsKey(key);
!!!1164034.java!!!	getExtraValueOf(in key : String) : String
        return getExtraValueHashMap().get(key);
!!!1164162.java!!!	hashCode() : int
        return mSubtypeHashCode;
!!!1164290.java!!!	equals(inout o : Object) : boolean
        if (o instanceof InputMethodSubtype) {
            InputMethodSubtype subtype = (InputMethodSubtype) o;
            if (subtype.mSubtypeId != 0 || mSubtypeId != 0) {
                return (subtype.hashCode() == hashCode());
            }
            return (subtype.hashCode() == hashCode())
                && (subtype.getLocale().equals(getLocale()))
                && (subtype.getMode().equals(getMode()))
                && (subtype.getExtraValue().equals(getExtraValue()))
                && (subtype.isAuxiliary() == isAuxiliary())
                && (subtype.overridesImplicitlyEnabledSubtype()
                        == overridesImplicitlyEnabledSubtype())
                && (subtype.isAsciiCapable() == isAsciiCapable());
        }
        return false;
!!!1164418.java!!!	describeContents() : int
        return 0;
!!!1164546.java!!!	writeToParcel(inout dest : Parcel, in parcelableFlags : int) : void
        dest.writeInt(mSubtypeNameResId);
        dest.writeInt(mSubtypeIconResId);
        dest.writeString(mSubtypeLocale);
        dest.writeString(mSubtypeMode);
        dest.writeString(mSubtypeExtraValue);
        dest.writeInt(mIsAuxiliary ? 1 : 0);
        dest.writeInt(mOverridesImplicitlyEnabledSubtype ? 1 : 0);
        dest.writeInt(mSubtypeHashCode);
        dest.writeInt(mSubtypeId);
        dest.writeInt(mIsAsciiCapable ? 1 : 0);
!!!1164674.java!!!	constructLocaleFromString(in localeStr : String) : Locale
        if (TextUtils.isEmpty(localeStr))
            return null;
        String[] localeParams = localeStr.split("_", 3);
        // The length of localeStr is guaranteed to always return a 1 <= value <= 3
        // because localeStr is not empty.
        if (localeParams.length == 1) {
            return new Locale(localeParams[0]);
        } else if (localeParams.length == 2) {
            return new Locale(localeParams[0], localeParams[1]);
        } else if (localeParams.length == 3) {
            return new Locale(localeParams[0], localeParams[1], localeParams[2]);
        }
        return null;
!!!1164802.java!!!	hashCodeInternal(in locale : String, in mode : String, in extraValue : String, inout isAuxiliary : boolean, inout overridesImplicitlyEnabledSubtype : boolean, inout isAsciiCapable : boolean) : int
        // CAVEAT: Must revisit how to compute needsToCalculateCompatibleHashCode when a new
        // attribute is added in order to avoid enabled subtypes being unexpectedly disabled.
        final boolean needsToCalculateCompatibleHashCode = !isAsciiCapable;
        if (needsToCalculateCompatibleHashCode) {
            return Arrays.hashCode(new Object[] {locale, mode, extraValue, isAuxiliary,
                    overridesImplicitlyEnabledSubtype});
        }
        return Arrays.hashCode(new Object[] {locale, mode, extraValue, isAuxiliary,
                overridesImplicitlyEnabledSubtype, isAsciiCapable});
!!!1164930.java!!!	sort(inout context : Context, in flags : int, inout imi : InputMethodInfo, inout subtypeList : List<InputMethodSubtype>) : InputMethodSubtype
        if (imi == null) return subtypeList;
        final HashSet<InputMethodSubtype> inputSubtypesSet = new HashSet<InputMethodSubtype>(
                subtypeList);
        final ArrayList<InputMethodSubtype> sortedList = new ArrayList<InputMethodSubtype>();
        int N = imi.getSubtypeCount();
        for (int i = 0; i < N; ++i) {
            InputMethodSubtype subtype = imi.getSubtypeAt(i);
            if (inputSubtypesSet.contains(subtype)) {
                sortedList.add(subtype);
                inputSubtypesSet.remove(subtype);
            }
        }
        // If subtypes in inputSubtypesSet remain, that means these subtypes are not
        // contained in imi, so the remaining subtypes will be appended.
        for (InputMethodSubtype subtype: inputSubtypesSet) {
            sortedList.add(subtype);
        }
        return sortedList;
