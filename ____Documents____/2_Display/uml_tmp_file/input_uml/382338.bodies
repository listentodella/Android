class ForwardingListener
!!!2347522.java!!!	ForwardingListener(inout src : View)
            mSrc = src;
            mScaledTouchSlop = ViewConfiguration.get(src.getContext()).getScaledTouchSlop();
            mTapTimeout = ViewConfiguration.getTapTimeout();

            // Use a medium-press timeout. Halfway between tap and long-press.
            mLongPressTimeout = (mTapTimeout + ViewConfiguration.getLongPressTimeout()) / 2;

            src.addOnAttachStateChangeListener(this);
!!!2347778.java!!!	onTouch(inout v : View, inout event : MotionEvent) : boolean
            final boolean wasForwarding = mForwarding;
            final boolean forwarding;
            if (wasForwarding) {
                if (mWasLongPress) {
                    // If we started forwarding as a result of a long-press,
                    // just silently stop forwarding events so that the window
                    // stays open.
                    forwarding = onTouchForwarded(event);
                } else {
                    forwarding = onTouchForwarded(event) || !onForwardingStopped();
                }
            } else {
                forwarding = onTouchObserved(event) && onForwardingStarted();

                if (forwarding) {
                    // Make sure we cancel any ongoing source event stream.
                    final long now = SystemClock.uptimeMillis();
                    final MotionEvent e = MotionEvent.obtain(now, now, MotionEvent.ACTION_CANCEL,
                            0.0f, 0.0f, 0);
                    mSrc.onTouchEvent(e);
                    e.recycle();
                }
            }

            mForwarding = forwarding;
            return forwarding || wasForwarding;
!!!2348034.java!!!	onViewDetachedFromWindow(inout v : View) : void
            mForwarding = false;
            mActivePointerId = MotionEvent.INVALID_POINTER_ID;

            if (mDisallowIntercept != null) {
                mSrc.removeCallbacks(mDisallowIntercept);
            }
!!!2348162.java!!!	onForwardingStarted() : boolean
            final ListPopupWindow popup = getPopup();
            if (popup != null && !popup.isShowing()) {
                popup.show();
            }
            return true;
!!!2348290.java!!!	onForwardingStopped() : boolean
            final ListPopupWindow popup = getPopup();
            if (popup != null && popup.isShowing()) {
                popup.dismiss();
            }
            return true;
!!!2348418.java!!!	onTouchObserved(inout srcEvent : MotionEvent) : boolean
            final View src = mSrc;
            if (!src.isEnabled()) {
                return false;
            }

            final int actionMasked = srcEvent.getActionMasked();
            switch (actionMasked) {
                case MotionEvent.ACTION_DOWN:
                    mActivePointerId = srcEvent.getPointerId(0);
                    mWasLongPress = false;

                    if (mDisallowIntercept == null) {
                        mDisallowIntercept = new DisallowIntercept();
                    }
                    src.postDelayed(mDisallowIntercept, mTapTimeout);

                    if (mTriggerLongPress == null) {
                        mTriggerLongPress = new TriggerLongPress();
                    }
                    src.postDelayed(mTriggerLongPress, mLongPressTimeout);
                    break;
                case MotionEvent.ACTION_MOVE:
                    final int activePointerIndex = srcEvent.findPointerIndex(mActivePointerId);
                    if (activePointerIndex >= 0) {
                        final float x = srcEvent.getX(activePointerIndex);
                        final float y = srcEvent.getY(activePointerIndex);

                        // Has the pointer has moved outside of the view?
                        if (!src.pointInView(x, y, mScaledTouchSlop)) {
                            clearCallbacks();

                            // Don't let the parent intercept our events.
                            src.getParent().requestDisallowInterceptTouchEvent(true);
                            return true;
                        }
                    }
                    break;
                case MotionEvent.ACTION_CANCEL:
                case MotionEvent.ACTION_UP:
                    clearCallbacks();
                    break;
            }

            return false;
!!!2348546.java!!!	clearCallbacks() : void
            if (mTriggerLongPress != null) {
                mSrc.removeCallbacks(mTriggerLongPress);
            }

            if (mDisallowIntercept != null) {
                mSrc.removeCallbacks(mDisallowIntercept);
            }
!!!2348674.java!!!	onLongPress() : void
            clearCallbacks();

            final View src = mSrc;
            if (!src.isEnabled()) {
                return;
            }

            if (!onForwardingStarted()) {
                return;
            }

            // Don't let the parent intercept our events.
            mSrc.getParent().requestDisallowInterceptTouchEvent(true);

            // Make sure we cancel any ongoing source event stream.
            final long now = SystemClock.uptimeMillis();
            final MotionEvent e = MotionEvent.obtain(now, now, MotionEvent.ACTION_CANCEL, 0, 0, 0);
            mSrc.onTouchEvent(e);
            e.recycle();

            mForwarding = true;
            mWasLongPress = true;
!!!2348802.java!!!	onTouchForwarded(inout srcEvent : MotionEvent) : boolean
            final View src = mSrc;
            final ListPopupWindow popup = getPopup();
            if (popup == null || !popup.isShowing()) {
                return false;
            }

            final DropDownListView dst = popup.mDropDownList;
            if (dst == null || !dst.isShown()) {
                return false;
            }

            // Convert event to destination-local coordinates.
            final MotionEvent dstEvent = MotionEvent.obtainNoHistory(srcEvent);
            src.toGlobalMotionEvent(dstEvent);
            dst.toLocalMotionEvent(dstEvent);

            // Forward converted event to destination view, then recycle it.
            final boolean handled = dst.onForwardedEvent(dstEvent, mActivePointerId);
            dstEvent.recycle();

            // Always cancel forwarding when the touch stream ends.
            final int action = srcEvent.getActionMasked();
            final boolean keepForwarding = action != MotionEvent.ACTION_UP
                    && action != MotionEvent.ACTION_CANCEL;

            return handled && keepForwarding;
