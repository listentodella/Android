format 76
"gui" // gui
  revision 2
  modified_by 2 "thisway_diy"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "L:/android_projects/uml_tmp_file/gui/"
  cpp_src_dir "L:/android_projects/uml_tmp_file/gui/"
  cpp_namespace "android"
  package_ref 134658 // tests

  classview 134658 "gui"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 137090 "anonymous4"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------
 ---------------------------------------------------------------------------"
      attribute 139906 "ON_FRAME_AVAILABLE"
	public type class_ref 137090 // anonymous4
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 140034 "ON_BUFFER_RELEASED"
	public type class_ref 137090 // anonymous4
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 140162 "ON_SIDEBAND_STREAM_CHANGED"
	public type class_ref 137090 // anonymous4
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 137474 "anonymous5"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      attribute 140290 "GET_DATA_CHANNEL"
	public type class_ref 137474 // anonymous5
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 140418 "SET_VSYNC_RATE"
	public type class_ref 137474 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 140546 "REQUEST_NEXT_VSYNC"
	public type class_ref 137474 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 137858 "anonymous6"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      attribute 140674 "CREATE_GRAPHIC_BUFFER"
	public type class_ref 137858 // anonymous6
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 138242 "anonymous7"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      attribute 140802 "ACQUIRE_BUFFER"
	public type class_ref 138242 // anonymous7
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 140930 "DETACH_BUFFER"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141058 "ATTACH_BUFFER"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141186 "RELEASE_BUFFER"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141314 "CONSUMER_CONNECT"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141442 "CONSUMER_DISCONNECT"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141570 "GET_RELEASED_BUFFERS"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141698 "SET_DEFAULT_BUFFER_SIZE"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141826 "SET_DEFAULT_MAX_BUFFER_COUNT"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141954 "DISABLE_ASYNC_BUFFER"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142082 "SET_MAX_ACQUIRED_BUFFER_COUNT"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142210 "SET_CONSUMER_NAME"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142338 "SET_DEFAULT_BUFFER_FORMAT"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142466 "SET_CONSUMER_USAGE_BITS"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142594 "SET_TRANSFORM_HINT"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142722 "GET_SIDEBAND_STREAM"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142850 "DUMP"
	public type class_ref 138242 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 138626 "anonymous8"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      attribute 142978 "REQUEST_BUFFER"
	public type class_ref 138626 // anonymous8
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143106 "SET_BUFFER_COUNT"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143234 "DEQUEUE_BUFFER"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143362 "DETACH_BUFFER"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143490 "DETACH_NEXT_BUFFER"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143618 "ATTACH_BUFFER"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143746 "QUEUE_BUFFER"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143874 "CANCEL_BUFFER"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144002 "QUERY"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144130 "CONNECT"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144258 "DISCONNECT"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144386 "SET_SIDEBAND_STREAM"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144514 "ALLOCATE_BUFFERS"
	public type class_ref 138626 // anonymous8
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 139010 "anonymous9"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 144642 "ON_BUFFER_RELEASED"
	public type class_ref 139010 // anonymous9
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 139394 "anonymous10"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      attribute 144770 "GET_SENSOR_CHANNEL"
	public type class_ref 139394 // anonymous10
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144898 "ENABLE_DISABLE"
	public type class_ref 139394 // anonymous10
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 145026 "SET_EVENT_RATE"
	public type class_ref 139394 // anonymous10
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 145154 "FLUSH_SENSOR"
	public type class_ref 139394 // anonymous10
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 139778 "anonymous11"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      attribute 145282 "GET_SENSOR_LIST"
	public type class_ref 139778 // anonymous11
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 145410 "CREATE_SENSOR_EVENT_CONNECTION"
	public type class_ref 139778 // anonymous11
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 140418 "anonymous12"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      attribute 145538 "CREATE_SURFACE"
	public type class_ref 140418 // anonymous12
	init_value " IBinder::FIRST_CALL_TRANSACTION"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 145666 "DESTROY_SURFACE"
	public type class_ref 140418 // anonymous12
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 145794 "CLEAR_LAYER_FRAME_STATS"
	public type class_ref 140418 // anonymous12
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 145922 "GET_LAYER_FRAME_STATS"
	public type class_ref 140418 // anonymous12
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 168962 "BitTube"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 161922 // <generalisation>
	relation 161922 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 161922 // <generalisation>
	  b parent class_ref 169090 // typedef1
      end

      operation 257410 "BitTube"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " creates a BitTube with a default (4KB) send buffer"
      end

      operation 257538 "BitTube"
	public explicit_return_type ""
	nparams 1
	  param in name "bufsize" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " creates a BitTube with a a specified send and receive buffer size"
      end

      operation 257666 "BitTube"
	public explicit_return_type ""
	nparams 1
	  param in name "data" explicit_type "Parcel"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 257794 "~BitTube"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 257922 "initCheck"
	const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " check state after construction"
      end

      operation 258050 "getFd"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " get receive file-descriptor"
      end

      operation 258178 "getSendFd"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " get the send file-descriptor."
      end

      operation 258306 "sendObjects"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param in name "tube" explicit_type "sp<BitTube>"
	  param in name "events" explicit_type "T"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return sendObjects(tube, events, count, sizeof(T));
    };
"
	
	
	
	
	comment " send objects (sized blobs). All objects are guaranteed to be written or the call fails."
      end

      operation 258434 "recvObjects"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param in name "tube" explicit_type "sp<BitTube>"
	  param inout name "events" explicit_type "T"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return recvObjects(tube, events, count, sizeof(T));
    };
"
	
	
	
	
	comment " receive objects (sized blobs). If the receiving buffer isn't large enough,
 excess messages are silently discarded."
      end

      operation 258562 "writeToParcel"
	const public explicit_return_type "status_t"
	nparams 1
	  param inout name "reply" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " parcels this BitTube"
      end

      operation 258690 "init"
	private explicit_return_type "void"
	nparams 2
	  param in name "rcvbuf" explicit_type "size_t"
	  param in name "sndbuf" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 258818 "write"
	private explicit_return_type "ssize_t"
	nparams 2
	  param in name "vaddr" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " send a message. The write is guaranteed to send the whole message or fail."
      end

      operation 258946 "read"
	private explicit_return_type "ssize_t"
	nparams 2
	  param inout name "vaddr" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " receive a message. the passed buffer must be at least as large as the
 write call used to send the message, excess data is silently discarded."
      end

      attribute 211330 "mSendFd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 211458 "mReceiveFd"
	private explicit_type "int"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 259074 "sendObjects"
	class_operation private explicit_return_type "ssize_t"
	nparams 4
	  param in name "tube" explicit_type "sp<BitTube>"
	  param in name "events" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	  param in name "objSize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 259202 "recvObjects"
	class_operation private explicit_return_type "ssize_t"
	nparams 4
	  param in name "tube" explicit_type "sp<BitTube>"
	  param inout name "events" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	  param in name "objSize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 169090 "typedef1"
      visibility package stereotype "typedef" explicit_base_type "RefBase"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 169218 "BufferItem"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 162050 // <generalisation>
	relation 162050 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 162050 // <generalisation>
	  b parent class_ref 169346 // typedef2
      end

      extra_member 141826 "friend"
	
	cpp "
    friend class Flattenable<BufferItem>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 259330 "getPodSize"
	const private explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 259458 "getFlattenedSize"
	const private explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 259586 "getFdCount"
	const private explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 259714 "flatten"
	const private explicit_return_type "status_t"
	nparams 4
	  param inout name "buffer" explicit_type "void"
	  param inout name "size" explicit_type "size_t"
	  param inout name "fds" explicit_type "int"
	  param inout name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * & ${p0}, ${t1} & ${p1}, ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 259842 "unflatten"
	private explicit_return_type "status_t"
	nparams 4
	  param in name "buffer" explicit_type "void"
	  param inout name "size" explicit_type "size_t"
	  param in name "fds" explicit_type "int"
	  param inout name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * & ${p0}, ${t1} & ${p1}, const ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 169474 "anonymous1"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 211586 "INVALID_BUFFER_SLOT"
	  public type class_ref 169474 // anonymous1
	  init_value " -1 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 259970 "BufferItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 260098 "operator IGraphicBufferConsumer::BufferItem"
	const public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 260226 "scalingModeName"
	class_operation public explicit_return_type "char"
	nparams 1
	  param in name "scalingMode" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 211714 "mGraphicBuffer"
	public explicit_type "GraphicBuffer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mGraphicBuffer points to the buffer allocated for this slot, or is NULL
 if the buffer in this slot has been acquired in the past (see
 BufferSlot.mAcquireCalled)."
      end

      attribute 211842 "mFence"
	public explicit_type "Fence"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFence is a fence that will signal when the buffer is idle."
      end

      attribute 211970 "mCrop"
	public explicit_type "Rect"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCrop is the current crop rectangle for this buffer slot."
      end

      attribute 212098 "mTransform"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTransform is the current transform flags for this buffer slot.
 refer to NATIVE_WINDOW_TRANSFORM_* in <window.h>"
      end

      attribute 212226 "mScalingMode"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mScalingMode is the current scaling mode for this buffer slot.
 refer to NATIVE_WINDOW_SCALING_* in <window.h>"
      end

      attribute 212354 "mTimestamp"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTimestamp is the current timestamp for this buffer slot. This gets
 to set by queueBuffer each time this slot is queued. This value
 is guaranteed to be monotonically increasing for each newly
 acquired buffer."
      end

      attribute 212482 "mIsAutoTimestamp"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAutoTimestamp indicates whether mTimestamp was generated
 automatically when the buffer was queued."
      end

      attribute 212610 "mFrameNumber"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFrameNumber is the number of the queued frame for this slot."
      end

      attribute 212738 "mSlot"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mSlot is the slot index of this buffer (default INVALID_BUFFER_SLOT)."
      end

      attribute 212866 "mIsDroppable"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsDroppable whether this buffer was queued with the
 property that it can be replaced by a new buffer for the purpose of
 making sure dequeueBuffer() won't block.
 i.e.: was the BufferQueue in \"mDequeueBufferCannotBlock\" when this buffer
 was queued."
      end

      attribute 212994 "mAcquireCalled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates whether this buffer has been seen by a consumer yet"
      end

      attribute 213122 "mTransformToDisplayInverse"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates this buffer must be transformed by the inverse transform of the screen
 it is displayed onto. This is applied after mTransform."
      end
    end

    class 169346 "typedef2"
      visibility package stereotype "typedef" explicit_base_type "Flattenable<BufferItem>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 169602 "BufferItemConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * BufferItemConsumer is a BufferQueue consumer endpoint that allows clients
 * access to the whole BufferItem entry from BufferQueue. Multiple buffers may
 * be acquired at once, to be used concurrently by the client. This consumer can
 * operate either in synchronous or asynchronous mode."
      classrelation 162178 // <generalisation>
	relation 162178 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 162178 // <generalisation>
	  b parent class_ref 169730 // ConsumerBase
      end

      class 169986 "FrameAvailableListener"
	visibility package stereotype "typedef" base_type class_ref 169858 // FrameAvailableListener
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 162306 // <dependency>
	  relation 162306 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 162306 // <dependency>
	    b parent class_ref 169858 // FrameAvailableListener
	end
      end

      class 170370 "BufferItem"
	visibility package stereotype "typedef" base_type class_ref 170242 // BufferItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 162434 // <dependency>
	  relation 162434 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 162434 // <dependency>
	    b parent class_ref 170242 // BufferItem
	end
      end

      class 170498 "anonymous2"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 213250 "DEFAULT_MAX_BUFFERS"
	  public type class_ref 170498 // anonymous2
	  init_value " -1 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 170626 "anonymous3"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 213378 "INVALID_BUFFER_SLOT"
	  public type class_ref 170626 // anonymous3
	  init_value " BufferQueue::INVALID_BUFFER_SLOT "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 170754 "anonymous4"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 213506 "NO_BUFFER_AVAILABLE"
	  public type class_ref 170754 // anonymous4
	  init_value " BufferQueue::NO_BUFFER_AVAILABLE "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 260354 "BufferItemConsumer"
	public explicit_return_type ""
	nparams 4
	  param in name "consumer" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "consumerUsage" explicit_type "uint32_t"
	  param in name "bufferCount" explicit_type "int"
	    defaultvalue "DEFAULT_MAX_BUFFERS"
	  param in name "controlledByApp" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Create a new buffer item consumer. The consumerUsage parameter determines
 the consumer usage flags passed to the graphics allocator. The
 bufferCount parameter specifies how many buffers can be locked for user
 access at the same time.
 controlledByApp tells whether this consumer is controlled by the
 application."
      end

      operation 260482 "~BufferItemConsumer"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 260610 "setName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " set the name of the BufferItemConsumer that will be used to identify it in
 log messages."
      end

      operation 260738 "acquireBuffer"
	public explicit_return_type "status_t"
	nparams 3
	  param inout name "item" type class_ref 170370 // BufferItem
	  param in name "presentWhen" explicit_type "nsecs_t"
	  param in name "waitForFence" explicit_type "bool"
	    defaultvalue "true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Gets the next graphics buffer from the producer, filling out the
 passed-in BufferItem structure. Returns NO_BUFFER_AVAILABLE if the queue
 of buffers is empty, and INVALID_OPERATION if the maximum number of
 buffers is already acquired.

 Only a fixed number of buffers can be acquired at a time, determined by
 the construction-time bufferCount parameter. If INVALID_OPERATION is
 returned by acquireBuffer, then old buffers must be returned to the
 queue by calling releaseBuffer before more buffers can be acquired.

 If waitForFence is true, and the acquired BufferItem has a valid fence object,
 acquireBuffer will wait on the fence with no timeout before returning."
      end

      operation 260866 "releaseBuffer"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "item" type class_ref 170370 // BufferItem
	  param in name "releaseFence" explicit_type "sp<Fence>"
	    defaultvalue "Fence::NO_FENCE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns an acquired buffer to the queue, allowing it to be reused. Since
 only a fixed number of buffers may be acquired at a time, old buffers
 must be released by calling releaseBuffer to ensure new buffers can be
 acquired by acquireBuffer. Once a BufferItem is released, the caller must
 not access any members of the BufferItem, and should immediately remove
 all of its references to the BufferItem itself."
      end

      operation 260994 "setDefaultBufferSize"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultBufferSize is used to set the size of buffers returned by
 requestBuffers when a with and height of zero is requested."
      end

      operation 261122 "setDefaultBufferFormat"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultBufferFormat allows the BufferQueue to create
 GraphicBuffers of a defaultFormat if no format is specified
 in dequeueBuffer"
      end
    end

    class 169730 "ConsumerBase"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ConsumerBase is a base class for BufferQueue consumer end-points. It
 handles common tasks like management of the connection to the BufferQueue
 and the buffer pool."
      class 169858 "FrameAvailableListener"
	abstract visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 166018 // <generalisation>
	  relation 166018 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 166018 // <generalisation>
	    b parent class_ref 174466 // typedef5
	end

	classrelation 166146 // <generalisation>
	  relation 166146 ---|>
	    a private
	      cpp default "${type}"
	      classrelation_ref 166146 // <generalisation>
	    b parent class_ref 174594 // typedef6
	end

	operation 268802 "onFrameAvailable"
	  abstract cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  
	  
	  
	  
	  comment " onFrameAvailable() is called each time an additional frame becomes
 available for consumption. This means that frames that are queued
 while in asynchronous mode only trigger the callback if no previous
 frames are pending. Frames queued while in synchronous mode always
 trigger the callback.

 This is called without any lock held and can be called concurrently
 by multiple threads."
	end
      end

      classrelation 165634 // <generalisation>
	relation 165634 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 165634 // <generalisation>
	  b parent class_ref 172546 // typedef3
      end

      classrelation 165762 // <generalisation>
	relation 165762 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 165762 // <generalisation>
	  b parent class_ref 169090 // typedef1
      end

      classrelation 165890 // <generalisation>
	relation 165890 ---|>
	  a protected
	    cpp default "${type}"
	    classrelation_ref 165890 // <generalisation>
	  b parent class_ref 174338 // ConsumerListener
      end

      class 174466 "typedef5"
	visibility package stereotype "typedef" explicit_base_type "virtual"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 174594 "typedef6"
	visibility package stereotype "typedef" explicit_base_type "RefBase"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 268930 "~ConsumerBase"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 269058 "abandon"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " abandon frees all the buffers and puts the ConsumerBase into the
 'abandoned' state.  Once put in this state the ConsumerBase can never
 leave it.  When in the 'abandoned' state, all methods of the
 IGraphicBufferProducer interface will fail with the NO_INIT error.

 Note that while calling this method causes all the buffers to be freed
 from the perspective of the the ConsumerBase, if there are additional
 references on the buffers (e.g. if a buffer is referenced by a client
 or by OpenGL ES as a texture) then those buffer will remain allocated."
      end

      operation 269186 "setName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " set the name of the ConsumerBase that will be used to identify it in
 log messages."
      end

      operation 269314 "dump"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "result" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " dump writes the current state to a string. Child classes should add
 their state to the dump by overriding the dumpLocked method, which is
 called by these methods after locking the mutex."
      end

      operation 269442 "dump"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 269570 "setFrameAvailableListener"
	public explicit_return_type "void"
	nparams 1
	  param in name "listener" explicit_type "wp<FrameAvailableListener>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setFrameAvailableListener sets the listener object that will be notified
 when a new frame becomes available."
      end

      operation 269698 "ConsumerBase"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 169730 // ConsumerBase
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 269826 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 169730 // ConsumerBase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 269954 "ConsumerBase"
	protected explicit_return_type ""
	nparams 2
	  param in name "consumer" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "controlledByApp" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " ConsumerBase constructs a new ConsumerBase object to consume image
 buffers from the given IGraphicBufferConsumer.
 The controlledByApp flag indicates that this consumer is under the application's
 control."
      end

      operation 270082 "onLastStrongRef"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " onLastStrongRef gets called by RefBase just before the dtor of the most
 derived class.  It is used to clean up the buffers so that ConsumerBase
 can coordinate the clean-up by calling into virtual methods implemented
 by the derived classes.  This would not be possible from the
 ConsuemrBase dtor because by the time that gets called the derived
 classes have already been destructed.

 This methods should not need to be overridden by derived classes, but
 if they are overridden the ConsumerBase implementation must be called
 from the derived class."
      end

      operation 270210 "onFrameAvailable"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Implementation of the IConsumerListener interface.  These
 calls are used to notify the ConsumerBase of asynchronous events in the
 BufferQueue.  The onFrameAvailable and onBuffersReleased methods should
 not need to be overridden by derived classes, but if they are overridden
 the ConsumerBase implementation must be called from the derived class.
 The ConsumerBase version of onSidebandStreamChanged does nothing and can
 be overriden by derived classes if they want the notification."
      end

      operation 270338 "onBuffersReleased"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 270466 "onSidebandStreamChanged"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 270594 "freeBufferLocked"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "slotIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " freeBufferLocked frees up the given buffer slot.  If the slot has been
 initialized this will release the reference to the GraphicBuffer in that
 slot.  Otherwise it has no effect.

 Derived classes should override this method to clean up any state they
 keep per slot.  If it is overridden, the derived class's implementation
 must call ConsumerBase::freeBufferLocked.

 This method must be called with mMutex locked."
      end

      operation 270722 "abandonLocked"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " abandonLocked puts the BufferQueue into the abandoned state, causing
 all future operations on it to fail. This method rather than the public
 abandon method should be overridden by child classes to add abandon-
 time behavior.

 Derived classes should override this method to clean up any object
 state they keep (as opposed to per-slot state).  If it is overridden,
 the derived class's implementation must call ConsumerBase::abandonLocked.

 This method must be called with mMutex locked."
      end

      operation 270850 "dumpLocked"
	const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " dumpLocked dumps the current state of the ConsumerBase object to the
 result string.  Each line is prefixed with the string pointed to by the
 prefix argument.  The buffer argument points to a buffer that may be
 used for intermediate formatting data, and the size of that buffer is
 indicated by the size argument.

 Derived classes should override this method to dump their internal
 state.  If this method is overridden the derived class's implementation
 should call ConsumerBase::dumpLocked.

 This method must be called with mMutex locked."
      end

      operation 270978 "acquireBufferLocked"
	cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param inout name "item" type class_ref 171650 // BufferItem
	  param in name "presentWhen" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " acquireBufferLocked fetches the next buffer from the BufferQueue and
 updates the buffer slot for the buffer returned.

 Derived classes should override this method to perform any
 initialization that must take place the first time a buffer is assigned
 to a slot.  If it is overridden the derived class's implementation must
 call ConsumerBase::acquireBufferLocked."
      end

      operation 271106 "releaseBufferLocked"
	cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "display" explicit_type "EGLDisplay"
	  param in name "eglFence" explicit_type "EGLSyncKHR"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " releaseBufferLocked relinquishes control over a buffer, returning that
 control to the BufferQueue.

 Derived classes should override this method to perform any cleanup that
 must take place when a buffer is released back to the BufferQueue.  If
 it is overridden the derived class's implementation must call
 ConsumerBase::releaseBufferLocked.e"
      end

      operation 271234 "stillTracking"
	protected explicit_return_type "bool"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " returns true iff the slot still has the graphicBuffer in it."
      end

      operation 271362 "addReleaseFence"
	protected explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " addReleaseFence* adds the sync points associated with a fence to the set
 of sync points that must be reached before the buffer in the given slot
 may be used after the slot has been released.  This should be called by
 derived classes each time some asynchronous work is kicked off that
 references the buffer."
      end

      operation 271490 "addReleaseFenceLocked"
	protected explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 174722 "Slot"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 219522 "mGraphicBuffer"
	  public explicit_type "GraphicBuffer"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mGraphicBuffer is the Gralloc buffer store in the slot or NULL if
 no Gralloc buffer is in the slot."
	end

	attribute 219650 "mFence"
	  public explicit_type "Fence"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mFence is a fence which will signal when the buffer associated with
 this buffer slot is no longer being used by the consumer and can be
 overwritten. The buffer can be dequeued before the fence signals;
 the producer is responsible for delaying writes until it signals."
	end

	attribute 219778 "mFrameNumber"
	  public explicit_type "uint64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " the frame number of the last acquired frame for this slot"
	end
      end

      classrelation 166274 // mSlots (<directional composition>)
	relation 166274 *-->
	  a role_name "mSlots" multiplicity "[BufferQueue::NUM_BUFFER_SLOTS]" protected
	    comment " mSlots stores the buffers that have been allocated by the BufferQueue
 for each buffer slot.  It is initialized to null pointers, and gets
 filled in with the result of BufferQueue::acquire when the
 client dequeues a buffer from a
 slot that has not yet been used. The buffer allocated to a slot will also
 be replaced if the requested buffer usage or geometry differs from that
 of the buffer allocated to a slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    classrelation_ref 166274 // mSlots (<directional composition>)
	  b parent class_ref 174722 // Slot
      end

      attribute 219906 "mAbandoned"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mAbandoned indicates that the BufferQueue will no longer be used to
 consume images buffers pushed to it using the IGraphicBufferProducer
 interface. It is initialized to false, and set to true in the abandon
 method.  A BufferQueue that has been abandoned will return the NO_INIT
 error from all IConsumerBase methods capable of returning an error."
      end

      attribute 220034 "mName"
	protected explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mName is a string used to identify the ConsumerBase in log messages.
 It can be set by the setName method."
      end

      classrelation 166402 // mFrameAvailableListener (<directional composition>)
	relation 166402 *-->
	  stereotype "wp"
	  a role_name "mFrameAvailableListener" protected
	    comment " mFrameAvailableListener is the listener object that will be called when a
 new frame becomes available. If it is not NULL it will be called from
 queueBuffer."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 166402 // mFrameAvailableListener (<directional composition>)
	  b parent class_ref 169858 // FrameAvailableListener
      end

      classrelation 166530 // mConsumer (<directional composition>)
	relation 166530 *-->
	  stereotype "sp"
	  a role_name "mConsumer" protected
	    comment " The ConsumerBase has-a BufferQueue and is responsible for creating this object
 if none is supplied"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 166530 // mConsumer (<directional composition>)
	  b parent class_ref 171522 // IGraphicBufferConsumer
      end

      attribute 220162 "mMutex"
	protected explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMutex is the mutex used to prevent concurrent access to the member
 variables of ConsumerBase objects. It must be locked whenever the
 member variables are accessed or when any of the *Locked methods are
 called.

 This mutex is intended to be locked by derived classes."
      end
    end

    class 170114 "BufferQueue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 170242 "BufferItem"
	visibility package stereotype "typedef" base_type class_ref 171650 // BufferItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 162690 // <dependency>
	  relation 162690 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 162690 // <dependency>
	    b parent class_ref 171650 // BufferItem
	end
      end

      class 170882 "anonymous5"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 213634 "NUM_BUFFER_SLOTS"
	  public type class_ref 170882 // anonymous5
	  init_value " BufferQueueDefs::NUM_BUFFER_SLOTS "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 171010 "anonymous6"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 213762 "INVALID_BUFFER_SLOT"
	  public type class_ref 171010 // anonymous6
	  init_value " IGraphicBufferConsumer::BufferItem::INVALID_BUFFER_SLOT "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 171138 "anonymous7"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 213890 "NO_BUFFER_AVAILABLE"
	  public type class_ref 171138 // anonymous7
	  init_value " IGraphicBufferConsumer::NO_BUFFER_AVAILABLE"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 214018 "PRESENT_LATER"
	  public type class_ref 171138 // anonymous7
	  init_value " IGraphicBufferConsumer::PRESENT_LATER"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 171266 "anonymous8"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 214146 "MAX_MAX_ACQUIRED_BUFFERS"
	  public type class_ref 171266 // anonymous8
	  init_value " NUM_BUFFER_SLOTS - 2 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 171394 "ConsumerListener"
	visibility package stereotype "typedef" base_type class_ref 171394 // ConsumerListener
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 162562 // <dependency>
	  relation 162562 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 162562 // <dependency>
	    b parent class_ref 171394 // ConsumerListener
	end
      end

      class 171778 "ProxyConsumerListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 162818 // <generalisation>
	  relation 162818 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 162818 // <generalisation>
	    b parent class_ref 171906 // BnConsumerListener
	end

	operation 261250 "ProxyConsumerListener"
	  public explicit_return_type ""
	  nparams 1
	    param in name "consumerListener" explicit_type "wp<ConsumerListener>"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 261378 "~ProxyConsumerListener"
	  cpp_virtual public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 261506 "onFrameAvailable"
	  cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 261634 "onBuffersReleased"
	  cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 261762 "onSidebandStreamChanged"
	  cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	classrelation 162946 // mConsumerListener (<directional composition>)
	  relation 162946 *-->
	    stereotype "wp"
	    a role_name "mConsumerListener" private
	      comment " mConsumerListener is a weak reference to the IConsumerListener.  This is
 the raison d'etre of ProxyConsumerListener."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 162946 // mConsumerListener (<directional composition>)
	    b parent class_ref 171394 // ConsumerListener
	end
      end

      operation 261890 "createBufferQueue"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "outProducer" explicit_type "sp<IGraphicBufferProducer>"
	  param inout name "outConsumer" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "allocator" explicit_type "sp<IGraphicBufferAlloc>"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " BufferQueue manages a pool of gralloc memory slots to be used by
 producers and consumers. allocator is used to allocate all the
 needed gralloc buffers."
      end

      operation 262018 "BufferQueue"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 171522 "IGraphicBufferConsumer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 171650 "BufferItem"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 169730 // <generalisation>
	  relation 169730 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 169730 // <generalisation>
	    b parent class_ref 177922 // typedef12
	end

	extra_member 142082 "friend"
	  
	  cpp "
        friend class Flattenable<BufferItem>;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 280962 "getPodSize"
	  const private explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 281090 "getFlattenedSize"
	  const private explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 281218 "getFdCount"
	  const private explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 281346 "flatten"
	  const private explicit_return_type "status_t"
	  nparams 4
	    param inout name "buffer" explicit_type "void"
	    param inout name "size" explicit_type "size_t"
	    param inout name "fds" explicit_type "int"
	    param inout name "count" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * & ${p0}, ${t1} & ${p1}, ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 281474 "unflatten"
	  private explicit_return_type "status_t"
	  nparams 4
	    param in name "buffer" explicit_type "void"
	    param inout name "size" explicit_type "size_t"
	    param in name "fds" explicit_type "int"
	    param inout name "count" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * & ${p0}, ${t1} & ${p1}, const ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	class 178050 "anonymous15"
	  visibility package stereotype "enum"
	  cpp_decl "${comment}enum  {
${items}
};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 226562 "INVALID_BUFFER_SLOT"
	    public type class_ref 178050 // anonymous15
	    init_value " -1 "
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	operation 281602 "BufferItem"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 226690 "mGraphicBuffer"
	  public explicit_type "GraphicBuffer"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mGraphicBuffer points to the buffer allocated for this slot, or is NULL
 if the buffer in this slot has been acquired in the past (see
 BufferSlot.mAcquireCalled)."
	end

	attribute 226818 "mFence"
	  public explicit_type "Fence"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mFence is a fence that will signal when the buffer is idle."
	end

	attribute 226946 "mCrop"
	  public explicit_type "Rect"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mCrop is the current crop rectangle for this buffer slot."
	end

	attribute 227074 "mTransform"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mTransform is the current transform flags for this buffer slot.
 refer to NATIVE_WINDOW_TRANSFORM_* in <window.h>"
	end

	attribute 227202 "mScalingMode"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mScalingMode is the current scaling mode for this buffer slot.
 refer to NATIVE_WINDOW_SCALING_* in <window.h>"
	end

	attribute 227330 "mTimestamp"
	  public explicit_type "int64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mTimestamp is the current timestamp for this buffer slot. This gets
 to set by queueBuffer each time this slot is queued. This value
 is guaranteed to be monotonically increasing for each newly
 acquired buffer."
	end

	attribute 227458 "mIsAutoTimestamp"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mIsAutoTimestamp indicates whether mTimestamp was generated
 automatically when the buffer was queued."
	end

	attribute 227586 "mFrameNumber"
	  public explicit_type "uint64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mFrameNumber is the number of the queued frame for this slot."
	end

	attribute 227714 "mBuf"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mBuf is the slot index of this buffer (default INVALID_BUFFER_SLOT)."
	end

	attribute 227842 "mIsDroppable"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mIsDroppable whether this buffer was queued with the
 property that it can be replaced by a new buffer for the purpose of
 making sure dequeueBuffer() won't block.
 i.e.: was the BufferQueue in \"mDequeueBufferCannotBlock\" when this buffer
 was queued."
	end

	attribute 227970 "mAcquireCalled"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Indicates whether this buffer has been seen by a consumer yet"
	end

	attribute 228098 "mTransformToDisplayInverse"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Indicates this buffer must be transformed by the inverse transform of the screen
 it is displayed onto. This is applied after mTransform."
	end
      end

      classrelation 169602 // <generalisation>
	relation 169602 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169602 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end

      class 177922 "typedef12"
	visibility package stereotype "typedef" explicit_base_type "Flattenable<BufferItem>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 178178 "anonymous16"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 228226 "STALE_BUFFER_SLOT"
	  public type class_ref 178178 // anonymous16
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 228354 "NO_BUFFER_AVAILABLE"
	  public type class_ref 178178 // anonymous16
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 228482 "PRESENT_LATER"
	  public type class_ref 178178 // anonymous16
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 281730 "acquireBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "buffer" type class_ref 171650 // BufferItem
	  param in name "presentWhen" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " acquireBuffer attempts to acquire ownership of the next pending buffer in
 the BufferQueue.  If no buffer is pending then it returns
 NO_BUFFER_AVAILABLE.  If a buffer is successfully acquired, the
 information about the buffer is returned in BufferItem.

 If the buffer returned had previously been
 acquired then the BufferItem::mGraphicBuffer field of buffer is set to
 NULL and it is assumed that the consumer still holds a reference to the
 buffer.

 If presentWhen is non-zero, it indicates the time when the buffer will
 be displayed on screen.  If the buffer's timestamp is farther in the
 future, the buffer won't be acquired, and PRESENT_LATER will be
 returned.  The presentation time is in nanoseconds, and the time base
 is CLOCK_MONOTONIC.

 Return of NO_ERROR means the operation completed as normal.

 Return of a positive value means the operation could not be completed
    at this time, but the user should try again later:
 * NO_BUFFER_AVAILABLE - no buffer is pending (nothing queued by producer)
 * PRESENT_LATER - the buffer's timestamp is farther in the future

 Return of a negative value means an error has occurred:
 * INVALID_OPERATION - too many buffers have been acquired"
      end

      operation 281858 "detachBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " detachBuffer attempts to remove all ownership of the buffer in the given
 slot from the buffer queue. If this call succeeds, the slot will be
 freed, and there will be no way to obtain the buffer from this interface.
 The freed slot will remain unallocated until either it is selected to
 hold a freshly allocated buffer in dequeueBuffer or a buffer is attached
 to the slot. The buffer must have already been acquired.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - the given slot number is invalid, either because it is
               out of the range [0, NUM_BUFFER_SLOTS) or because the slot
               it refers to is not currently acquired."
      end

      operation 281986 "attachBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outSlot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " attachBuffer attempts to transfer ownership of a buffer to the buffer
 queue. If this call succeeds, it will be as if this buffer was acquired
 from the returned slot number. As such, this call will fail if attaching
 this buffer would cause too many buffers to be simultaneously acquired.

 If the buffer is successfully attached, its frameNumber is initialized
 to 0. This must be passed into the releaseBuffer call or else the buffer
 will be deallocated as stale.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - outSlot or buffer were NULL
 * INVALID_OPERATION - cannot attach the buffer because it would cause too
                       many buffers to be acquired.
 * NO_MEMORY - no free slots available"
      end

      operation 282114 "releaseBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "buf" explicit_type "int"
	  param in name "frameNumber" explicit_type "uint64_t"
	  param in name "display" explicit_type "EGLDisplay"
	  param in name "fence" explicit_type "EGLSyncKHR"
	  param in name "releaseFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " releaseBuffer releases a buffer slot from the consumer back to the
 BufferQueue.  This may be done while the buffer's contents are still
 being accessed.  The fence will signal when the buffer is no longer
 in use. frameNumber is used to indentify the exact buffer returned.

 If releaseBuffer returns STALE_BUFFER_SLOT, then the consumer must free
 any references to the just-released buffer that it might have, as if it
 had received a onBuffersReleased() call with a mask set for the released
 buffer.

 Note that the dependencies on EGL will be removed once we switch to using
 the Android HW Sync HAL.

 Return of NO_ERROR means the operation completed as normal.

 Return of a positive value means the operation could not be completed
    at this time, but the user should try again later:
 * STALE_BUFFER_SLOT - see above (second paragraph)

 Return of a negative value means an error has occurred:
 * BAD_VALUE - one of the following could've happened:
               * the buffer slot was invalid
               * the fence was NULL
               * the buffer slot specified is not in the acquired state"
      end

      operation 282242 "consumerConnect"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "consumer" explicit_type "sp<IConsumerListener>"
	  param in name "controlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " consumerConnect connects a consumer to the BufferQueue.  Only one
 consumer may be connected, and when that consumer disconnects the
 BufferQueue is placed into the \"abandoned\" state, causing most
 interactions with the BufferQueue by the producer to fail.
 controlledByApp indicates whether the consumer is controlled by
 the application.

 consumer may not be NULL.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned
 * BAD_VALUE - a NULL consumer was provided"
      end

      operation 282370 "consumerDisconnect"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " consumerDisconnect disconnects a consumer from the BufferQueue. All
 buffers will be freed and the BufferQueue is placed in the \"abandoned\"
 state, causing most interactions with the BufferQueue by the producer to
 fail.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - no consumer is currently connected"
      end

      operation 282498 "getReleasedBuffers"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "slotMask" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " getReleasedBuffers sets the value pointed to by slotMask to a bit set.
 Each bit index with a 1 corresponds to a released buffer slot with that
 index value.  In particular, a released buffer is one that has
 been released by the BufferQueue but have not yet been released by the consumer.

 This should be called from the onBuffersReleased() callback.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned."
      end

      operation 282626 "setDefaultBufferSize"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " setDefaultBufferSize is used to set the size of buffers returned by
 dequeueBuffer when a width and height of zero is requested.  Default
 is 1x1.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - either w or h was zero"
      end

      operation 282754 "setDefaultMaxBufferCount"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " setDefaultMaxBufferCount sets the default value for the maximum buffer
 count (the initial default is 2). If the producer has requested a
 buffer count using setBufferCount, the default buffer count will only
 take effect if the producer sets the count back to zero.

 The count must be between 2 and NUM_BUFFER_SLOTS, inclusive.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - bufferCount was out of range (see above)."
      end

      operation 282882 "disableAsyncBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " disableAsyncBuffer disables the extra buffer used in async mode
 (when both producer and consumer have set their \"isControlledByApp\"
 flag) and has dequeueBuffer() return WOULD_BLOCK instead.

 This can only be called before consumerConnect().

 Return of a value other than NO_ERROR means an error has occurred:
 * INVALID_OPERATION - attempting to call this after consumerConnect."
      end

      operation 283010 "setMaxAcquiredBufferCount"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "maxAcquiredBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " setMaxAcquiredBufferCount sets the maximum number of buffers that can
 be acquired by the consumer at one time (default 1).  This call will
 fail if a producer is connected to the BufferQueue.

 maxAcquiredBuffers must be (inclusive) between 1 and MAX_MAX_ACQUIRED_BUFFERS.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - maxAcquiredBuffers was out of range (see above).
 * INVALID_OPERATION - attempting to call this after a producer connected."
      end

      operation 283138 "setConsumerName"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " setConsumerName sets the name used in logging"
      end

      operation 283266 "setDefaultBufferFormat"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " setDefaultBufferFormat allows the BufferQueue to create
 GraphicBuffers of a defaultFormat if no format is specified
 in dequeueBuffer.  Formats are enumerated in graphics.h; the
 initial default is HAL_PIXEL_FORMAT_RGBA_8888.

 Return of a value other than NO_ERROR means an unknown error has occurred."
      end

      operation 283394 "setConsumerUsageBits"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " setConsumerUsageBits will turn on additional usage bits for dequeueBuffer.
 These are merged with the bits passed to dequeueBuffer.  The values are
 enumerated in gralloc.h, e.g. GRALLOC_USAGE_HW_RENDER; the default is 0.

 Return of a value other than NO_ERROR means an unknown error has occurred."
      end

      operation 283522 "setTransformHint"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "hint" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " setTransformHint bakes in rotation to buffers so overlays can be used.
 The values are enumerated in window.h, e.g.
 NATIVE_WINDOW_TRANSFORM_ROT_90.  The default is 0 (no transform).

 Return of a value other than NO_ERROR means an unknown error has occurred."
      end

      operation 283650 "getSidebandStream"
	abstract const cpp_virtual public explicit_return_type "sp<NativeHandle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Retrieve the sideband buffer stream, if any."
      end

      operation 283778 "dump"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " dump state into a string"
      end
    end

    class 171906 "BnConsumerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 168962 // <generalisation>
	relation 168962 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 168962 // <generalisation>
	  b parent class_ref 177282 // typedef9
      end

      operation 280066 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 172034 "BufferQueueConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 163074 // <generalisation>
	relation 163074 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 163074 // <generalisation>
	  b parent class_ref 172162 // BnGraphicBufferConsumer
      end

      operation 262146 "BufferQueueConsumer"
	public explicit_return_type ""
	nparams 1
	  param in name "core" explicit_type "sp<BufferQueueCore>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 262274 "~BufferQueueConsumer"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 262402 "acquireBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outBuffer" type class_ref 169218 // BufferItem
	  param in name "expectedPresent" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " acquireBuffer attempts to acquire ownership of the next pending buffer in
 the BufferQueue. If no buffer is pending then it returns
 NO_BUFFER_AVAILABLE. If a buffer is successfully acquired, the
 information about the buffer is returned in BufferItem.  If the buffer
 returned had previously been acquired then the BufferItem::mGraphicBuffer
 field of buffer is set to NULL and it is assumed that the consumer still
 holds a reference to the buffer.

 If expectedPresent is nonzero, it indicates the time when the buffer
 will be displayed on screen. If the buffer's timestamp is farther in the
 future, the buffer won't be acquired, and PRESENT_LATER will be
 returned.  The presentation time is in nanoseconds, and the time base
 is CLOCK_MONOTONIC."
      end

      operation 262530 "detachBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " See IGraphicBufferConsumer::detachBuffer"
      end

      operation 262658 "attachBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "slot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " See IGraphicBufferConsumer::attachBuffer"
      end

      operation 262786 "releaseBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "slot" explicit_type "int"
	  param in name "frameNumber" explicit_type "uint64_t"
	  param in name "releaseFence" explicit_type "sp<Fence>"
	  param in name "display" explicit_type "EGLDisplay"
	  param in name "fence" explicit_type "EGLSyncKHR"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " releaseBuffer releases a buffer slot from the consumer back to the
 BufferQueue.  This may be done while the buffer's contents are still
 being accessed.  The fence will signal when the buffer is no longer
 in use. frameNumber is used to indentify the exact buffer returned.

 If releaseBuffer returns STALE_BUFFER_SLOT, then the consumer must free
 any references to the just-released buffer that it might have, as if it
 had received a onBuffersReleased() call with a mask set for the released
 buffer.

 Note that the dependencies on EGL will be removed once we switch to using
 the Android HW Sync HAL."
      end

      operation 262914 "connect"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "consumerListener" explicit_type "sp<IConsumerListener>"
	  param in name "controlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " connect connects a consumer to the BufferQueue.  Only one
 consumer may be connected, and when that consumer disconnects the
 BufferQueue is placed into the \"abandoned\" state, causing most
 interactions with the BufferQueue by the producer to fail.
 controlledByApp indicates whether the consumer is controlled by
 the application.

 consumerListener may not be NULL."
      end

      operation 263042 "disconnect"
	cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " disconnect disconnects a consumer from the BufferQueue. All
 buffers will be freed and the BufferQueue is placed in the \"abandoned\"
 state, causing most interactions with the BufferQueue by the producer to
 fail."
      end

      operation 263170 "getReleasedBuffers"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "outSlotMask" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getReleasedBuffers sets the value pointed to by outSlotMask to a bit mask
 indicating which buffer slots have been released by the BufferQueue
 but have not yet been released by the consumer.

 This should be called from the onBuffersReleased() callback."
      end

      operation 263298 "setDefaultBufferSize"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultBufferSize is used to set the size of buffers returned by
 dequeueBuffer when a width and height of zero is requested.  Default
 is 1x1."
      end

      operation 263426 "setDefaultMaxBufferCount"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultMaxBufferCount sets the default value for the maximum buffer
 count (the initial default is 2). If the producer has requested a
 buffer count using setBufferCount, the default buffer count will only
 take effect if the producer sets the count back to zero.

 The count must be between 2 and NUM_BUFFER_SLOTS, inclusive."
      end

      operation 263554 "disableAsyncBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " disableAsyncBuffer disables the extra buffer used in async mode
 (when both producer and consumer have set their \"isControlledByApp\"
 flag) and has dequeueBuffer() return WOULD_BLOCK instead.

 This can only be called before connect()."
      end

      operation 263682 "setMaxAcquiredBufferCount"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "maxAcquiredBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setMaxAcquiredBufferCount sets the maximum number of buffers that can
 be acquired by the consumer at one time (default 1).  This call will
 fail if a producer is connected to the BufferQueue."
      end

      operation 263810 "setConsumerName"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setConsumerName sets the name used in logging"
      end

      operation 263938 "setDefaultBufferFormat"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultBufferFormat allows the BufferQueue to create
 GraphicBuffers of a defaultFormat if no format is specified
 in dequeueBuffer.  Formats are enumerated in graphics.h; the
 initial default is HAL_PIXEL_FORMAT_RGBA_8888."
      end

      operation 264066 "setConsumerUsageBits"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setConsumerUsageBits will turn on additional usage bits for dequeueBuffer.
 These are merged with the bits passed to dequeueBuffer.  The values are
 enumerated in gralloc.h, e.g. GRALLOC_USAGE_HW_RENDER; the default is 0."
      end

      operation 264194 "setTransformHint"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "hint" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setTransformHint bakes in rotation to buffers so overlays can be used.
 The values are enumerated in window.h, e.g.
 NATIVE_WINDOW_TRANSFORM_ROT_90.  The default is 0 (no transform)."
      end

      operation 264322 "getSidebandStream"
	const cpp_virtual public explicit_return_type "sp<NativeHandle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Retrieve the sideband buffer stream, if any."
      end

      operation 264450 "dump"
	const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " dump our state in a String"
      end

      operation 264578 "releaseBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 5
	  param in name "buf" explicit_type "int"
	  param in name "frameNumber" explicit_type "uint64_t"
	  param in name "display" explicit_type "EGLDisplay"
	  param in name "fence" explicit_type "EGLSyncKHR"
	  param in name "releaseFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return releaseBuffer(buf, frameNumber, releaseFence, display, fence);
    };
"
	
	
	
	
	comment " Functions required for backwards compatibility.
 These will be modified/renamed in IGraphicBufferConsumer and will be
 removed from this class at that time. See b/13306289."
      end

      operation 264706 "consumerConnect"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "consumer" explicit_type "sp<IConsumerListener>"
	  param in name "controlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return connect(consumer, controlledByApp);
    };
"
	
	
	
	
      end

      operation 264834 "consumerDisconnect"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return disconnect(); };
"
	
	
	
	
      end

      classrelation 163202 // mCore (<directional composition>)
	relation 163202 *-->
	  stereotype "sp"
	  a role_name "mCore" private
	    comment " End functions required for backwards compatibility"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 163202 // mCore (<directional composition>)
	  b parent class_ref 172290 // BufferQueueCore
      end

      classrelation 163330 // mSlots (<unidirectional association>)
	relation 163330 --->
	  a role_name "mSlots" private
	    comment " This references mCore->mSlots. Lock mCore->mMutex while accessing."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 163330 // mSlots (<unidirectional association>)
	  b parent class_ref 172418 // SlotsType
      end

      attribute 214274 "mConsumerName"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is a cached copy of the name stored in the BufferQueueCore.
 It's updated during setConsumerName."
      end
    end

    class 172162 "BnGraphicBufferConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 169858 // <generalisation>
	relation 169858 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169858 // <generalisation>
	  b parent class_ref 178306 // typedef13
      end

      operation 283906 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 172290 "BufferQueueCore"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 163458 // <generalisation>
	relation 163458 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 163458 // <generalisation>
	  b parent class_ref 172546 // typedef3
      end

      classrelation 163586 // <generalisation>
	relation 163586 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 163586 // <generalisation>
	  b parent class_ref 169090 // typedef1
      end

      classrelation 163714 // <dependency>
	relation 163714 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 163714 // <dependency>
	  b parent class_ref 172674 // BufferQueueProducer
      end

      classrelation 163842 // <dependency>
	relation 163842 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 163842 // <dependency>
	  b parent class_ref 172034 // BufferQueueConsumer
      end

      class 172802 "anonymous9"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 214402 "INVALID_BUFFER_SLOT"
	  public type class_ref 172802 // anonymous9
	  init_value " -1 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 172930 "anonymous10"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 214530 "MAX_MAX_ACQUIRED_BUFFERS"
	  public type class_ref 172930 // anonymous10
	  init_value " BufferQueueDefs::NUM_BUFFER_SLOTS - 2 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 173058 "anonymous11"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 214658 "NO_CONNECTED_API"
	  public type class_ref 173058 // anonymous11
	  init_value " 0 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 173186 "Fifo"
	visibility package stereotype "typedef" base_type class_ref 169218 // BufferItem
	cpp_decl "${comment}typedef Vector<${type}> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 163970 // <dependency>
	  relation 163970 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 163970 // <dependency>
	    b parent class_ref 169218 // BufferItem
	end
      end

      operation 264962 "BufferQueueCore"
	public explicit_return_type ""
	nparams 1
	  param in name "allocator" explicit_type "sp<IGraphicBufferAlloc>"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " BufferQueueCore manages a pool of gralloc memory slots to be used by
 producers and consumers. allocator is used to allocate all the needed
 gralloc buffers."
      end

      operation 265090 "~BufferQueueCore"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 265218 "dump"
	const private explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Dump our state in a string"
      end

      operation 265346 "getMinUndequeuedBufferCountLocked"
	const private explicit_return_type "int"
	nparams 1
	  param in name "async" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getMinUndequeuedBufferCountLocked returns the minimum number of buffers
 that must remain in a state other than DEQUEUED. The async parameter
 tells whether we're in asynchronous mode."
      end

      operation 265474 "getMinMaxBufferCountLocked"
	const private explicit_return_type "int"
	nparams 1
	  param in name "async" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getMinMaxBufferCountLocked returns the minimum number of buffers allowed
 given the current BufferQueue state. The async parameter tells whether
 we're in asynchonous mode."
      end

      operation 265602 "getMaxBufferCountLocked"
	const private explicit_return_type "int"
	nparams 1
	  param in name "async" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getMaxBufferCountLocked returns the maximum number of buffers that can be
 allocated at once. This value depends on the following member variables:

     mDequeueBufferCannotBlock
     mMaxAcquiredBufferCount
     mDefaultMaxBufferCount
     mOverrideMaxBufferCount
     async parameter

 Any time one of these member variables is changed while a producer is
 connected, mDequeueCondition must be broadcast."
      end

      operation 265730 "setDefaultMaxBufferCountLocked"
	private explicit_return_type "status_t"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultMaxBufferCountLocked sets the maximum number of buffer slots
 that will be used if the producer does not override the buffer slot
 count. The count must be between 2 and NUM_BUFFER_SLOTS, inclusive. The
 initial default is 2."
      end

      operation 265858 "freeBufferLocked"
	private explicit_return_type "void"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " freeBufferLocked frees the GraphicBuffer and sync resources for the
 given slot."
      end

      operation 265986 "freeAllBuffersLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " freeAllBuffersLocked frees the GraphicBuffer and sync resources for
 all slots."
      end

      operation 266114 "stillTracking"
	const private explicit_return_type "bool"
	nparams 1
	  param in name "item" type class_ref 169218 // BufferItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " stillTracking returns true iff the buffer item is still being tracked
 in one of the slots."
      end

      operation 266242 "waitWhileAllocatingLocked"
	const private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " waitWhileAllocatingLocked blocks until mIsAllocating is false."
      end

      classrelation 164098 // mAllocator (<directional composition>)
	relation 164098 *-->
	  stereotype "sp"
	  a role_name "mAllocator" private
	    comment " mAllocator is the connection to SurfaceFlinger that is used to allocate
 new GraphicBuffer objects."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 164098 // mAllocator (<directional composition>)
	  b parent class_ref 173314 // IGraphicBufferAlloc
      end

      attribute 214786 "mMutex"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMutex is the mutex used to prevent concurrent access to the member
 variables of BufferQueueCore objects. It must be locked whenever any
 member variable is accessed."
      end

      attribute 214914 "mIsAbandoned"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAbandoned indicates that the BufferQueue will no longer be used to
 consume image buffers pushed to it using the IGraphicBufferProducer
 interface. It is initialized to false, and set to true in the
 consumerDisconnect method. A BufferQueue that is abandoned will return
 the NO_INIT error from all IGraphicBufferProducer methods capable of
 returning an error."
      end

      attribute 215042 "mConsumerControlledByApp"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConsumerControlledByApp indicates whether the connected consumer is
 controlled by the application."
      end

      attribute 215170 "mConsumerName"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConsumerName is a string used to identify the BufferQueue in log
 messages. It is set by the IGraphicBufferConsumer::setConsumerName
 method."
      end

      classrelation 164226 // mConsumerListener (<directional composition>)
	relation 164226 *-->
	  stereotype "sp"
	  a role_name "mConsumerListener" private
	    comment " mConsumerListener is used to notify the connected consumer of
 asynchronous events that it may wish to react to. It is initially
 set to NULL and is written by consumerConnect and consumerDisconnect."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 164226 // mConsumerListener (<directional composition>)
	  b parent class_ref 173442 // IConsumerListener
      end

      attribute 215298 "mConsumerUsageBits"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConsumerUsageBits contains flags that the consumer wants for
 GraphicBuffers."
      end

      attribute 215426 "mConnectedApi"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConnectedApi indicates the producer API that is currently connected
 to this BufferQueue. It defaults to NO_CONNECTED_API, and gets updated
 by the connect and disconnect methods."
      end

      classrelation 164354 // mConnectedProducerListener (<directional composition>)
	relation 164354 *-->
	  stereotype "sp"
	  a role_name "mConnectedProducerListener" private
	    comment " mConnectedProducerToken is used to set a binder death notification on
 the producer."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 164354 // mConnectedProducerListener (<directional composition>)
	  b parent class_ref 173570 // IProducerListener
      end

      classrelation 164482 // mSlots (<directional composition>)
	relation 164482 *-->
	  a role_name "mSlots" private
	    comment " mSlots is an array of buffer slots that must be mirrored on the producer
 side. This allows buffer ownership to be transferred between the producer
 and consumer without sending a GraphicBuffer over Binder. The entire
 array is initialized to NULL at construction time, and buffers are
 allocated for a slot when requestBuffer is called with that slot's index."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 164482 // mSlots (<directional composition>)
	  b parent class_ref 172418 // SlotsType
      end

      classrelation 164610 // mQueue (<directional composition>)
	relation 164610 *-->
	  a role_name "mQueue" private
	    comment " mQueue is a FIFO of queued buffers used in synchronous mode."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 164610 // mQueue (<directional composition>)
	  b parent class_ref 173186 // Fifo
      end

      attribute 215554 "mOverrideMaxBufferCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mOverrideMaxBufferCount is the limit on the number of buffers that will
 be allocated at one time. This value is set by the producer by calling
 setBufferCount. The default is 0, which means that the producer doesn't
 care about the number of buffers in the pool. In that case,
 mDefaultMaxBufferCount is used as the limit."
      end

      attribute 215682 "mDequeueCondition"
	private explicit_type "Condition"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDequeueCondition is a condition variable used for dequeueBuffer in
 synchronous mode."
      end

      attribute 215810 "mUseAsyncBuffer"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mUseAsyncBuffer indicates whether an extra buffer is used in async mode
 to prevent dequeueBuffer from blocking."
      end

      attribute 215938 "mDequeueBufferCannotBlock"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDequeueBufferCannotBlock indicates whether dequeueBuffer is allowed to
 block. This flag is set during connect when both the producer and
 consumer are controlled by the application."
      end

      attribute 216066 "mDefaultBufferFormat"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultBufferFormat can be set so it will override the buffer format
 when it isn't specified in dequeueBuffer."
      end

      attribute 216194 "mDefaultWidth"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultWidth holds the default width of allocated buffers. It is used
 in dequeueBuffer if a width and height of 0 are specified."
      end

      attribute 216322 "mDefaultHeight"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultHeight holds the default height of allocated buffers. It is used
 in dequeueBuffer if a width and height of 0 are specified."
      end

      attribute 216450 "mDefaultMaxBufferCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultMaxBufferCount is the default limit on the number of buffers that
 will be allocated at one time. This default limit is set by the consumer.
 The limit (as opposed to the default limit) may be overriden by the
 producer."
      end

      attribute 216578 "mMaxAcquiredBufferCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMaxAcquiredBufferCount is the number of buffers that the consumer may
 acquire at one time. It defaults to 1, and can be changed by the consumer
 via setMaxAcquiredBufferCount, but this may only be done while no
 producer is connected to the BufferQueue. This value is used to derive
 the value returned for the MIN_UNDEQUEUED_BUFFERS query to the producer."
      end

      attribute 216706 "mBufferHasBeenQueued"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mBufferHasBeenQueued is true once a buffer has been queued. It is reset
 when something causes all buffers to be freed (e.g., changing the buffer
 count)."
      end

      attribute 216834 "mFrameCounter"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFrameCounter is the free running counter, incremented on every
 successful queueBuffer call and buffer allocation."
      end

      attribute 216962 "mTransformHint"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTransformHint is used to optimize for screen rotations."
      end

      attribute 217090 "mSidebandStream"
	private explicit_type "NativeHandle"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mSidebandStream is a handle to the sideband buffer stream, if any"
      end

      attribute 217218 "mIsAllocating"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAllocating indicates whether a producer is currently trying to allocate buffers (which
 releases mMutex while doing the allocation proper). Producers should not modify any of the
 FREE slots while this is true. mIsAllocatingCondition is signaled when this value changes to
 false."
      end

      attribute 217346 "mIsAllocatingCondition"
	private explicit_type "Condition"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAllocatingCondition is a condition variable used by producers to wait until mIsAllocating
 becomes false."
      end
    end

    class 172546 "typedef3"
      visibility package stereotype "typedef" explicit_base_type "virtual"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 172674 "BufferQueueProducer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 164866 // <generalisation>
	relation 164866 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 164866 // <generalisation>
	  b parent class_ref 173954 // BnGraphicBufferProducer
      end

      classrelation 164994 // <generalisation>
	relation 164994 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 164994 // <generalisation>
	  b parent class_ref 174082 // typedef4
      end

      classrelation 165122 // <dependency>
	relation 165122 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 165122 // <dependency>
	  b parent class_ref 170114 // BufferQueue
      end

      operation 266370 "BufferQueueProducer"
	public explicit_return_type ""
	nparams 1
	  param in name "core" explicit_type "sp<BufferQueueCore>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 266498 "~BufferQueueProducer"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 266626 "requestBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param inout name "buf" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " requestBuffer returns the GraphicBuffer for slot N.

 In normal operation, this is called the first time slot N is returned
 by dequeueBuffer.  It must be called again if dequeueBuffer returns
 flags indicating that previously-returned buffers are no longer valid."
      end

      operation 266754 "setBufferCount"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setBufferCount updates the number of available buffer slots.  If this
 method succeeds, buffer slots will be both unallocated and owned by
 the BufferQueue object (i.e. they are not owned by the producer or
 consumer).

 This will fail if the producer has dequeued any buffers, or if
 bufferCount is invalid.  bufferCount must generally be a value
 between the minimum undequeued buffer count (exclusive) and NUM_BUFFER_SLOTS
 (inclusive).  It may also be set to zero (the default) to indicate
 that the producer does not wish to set a value.  The minimum value
 can be obtained by calling query(NATIVE_WINDOW_MIN_UNDEQUEUED_BUFFERS,
 ...).

 This may only be called by the producer.  The consumer will be told
 to discard buffers through the onBuffersReleased callback."
      end

      operation 266882 "dequeueBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 7
	  param inout name "outSlot" explicit_type "int"
	  param inout name "outFence" explicit_type "sp<Fence>"
	  param in name "async" explicit_type "bool"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "format" explicit_type "uint32_t"
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " dequeueBuffer gets the next buffer slot index for the producer to use.
 If a buffer slot is available then that slot index is written to the
 location pointed to by the buf argument and a status of OK is returned.
 If no slot is available then a status of -EBUSY is returned and buf is
 unmodified.

 The outFence parameter will be updated to hold the fence associated with
 the buffer. The contents of the buffer must not be overwritten until the
 fence signals. If the fence is Fence::NO_FENCE, the buffer may be
 written immediately.

 The width and height parameters must be no greater than the minimum of
 GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see: glGetIntegerv).
 An error due to invalid dimensions might not be reported until
 updateTexImage() is called.  If width and height are both zero, the
 default values specified by setDefaultBufferSize() are used instead.

 The pixel formats are enumerated in graphics.h, e.g.
 HAL_PIXEL_FORMAT_RGBA_8888.  If the format is 0, the default format
 will be used.

 The usage argument specifies gralloc buffer usage flags.  The values
 are enumerated in gralloc.h, e.g. GRALLOC_USAGE_HW_RENDER.  These
 will be merged with the usage flags specified by setConsumerUsageBits.

 The return value may be a negative error value or a non-negative
 collection of flags.  If the flags are set, the return values are
 valid, but additional actions must be performed.

 If IGraphicBufferProducer::BUFFER_NEEDS_REALLOCATION is set, the
 producer must discard cached GraphicBuffer references for the slot
 returned in buf.
 If IGraphicBufferProducer::RELEASE_ALL_BUFFERS is set, the producer
 must discard cached GraphicBuffer references for all slots.

 In both cases, the producer will need to call requestBuffer to get a
 GraphicBuffer handle for the returned slot."
      end

      operation 267010 "detachBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " See IGraphicBufferProducer::detachBuffer"
      end

      operation 267138 "detachNextBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " See IGraphicBufferProducer::detachNextBuffer"
      end

      operation 267266 "attachBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outSlot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " See IGraphicBufferProducer::attachBuffer"
      end

      operation 267394 "queueBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "input" explicit_type "QueueBufferInput"
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " queueBuffer returns a filled buffer to the BufferQueue.

 Additional data is provided in the QueueBufferInput struct.  Notably,
 a timestamp must be provided for the buffer. The timestamp is in
 nanoseconds, and must be monotonically increasing. Its other semantics
 (zero point, etc) are producer-specific and should be documented by the
 producer.

 The caller may provide a fence that signals when all rendering
 operations have completed.  Alternatively, NO_FENCE may be used,
 indicating that the buffer is ready immediately.

 Some values are returned in the output struct: the current settings
 for default width and height, the current transform hint, and the
 number of queued buffers."
      end

      operation 267522 "cancelBuffer"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " cancelBuffer returns a dequeued buffer to the BufferQueue, but doesn't
 queue it for use by the consumer.

 The buffer will not be overwritten until the fence signals.  The fence
 will usually be the one obtained from dequeueBuffer."
      end

      operation 267650 "query"
	cpp_virtual public explicit_return_type "int"
	nparams 2
	  param in name "what" explicit_type "int"
	  param inout name "outValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Query native window attributes.  The \"what\" values are enumerated in
 window.h (e.g. NATIVE_WINDOW_FORMAT)."
      end

      operation 267778 "connect"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "listener" explicit_type "sp<IProducerListener>"
	  param in name "api" explicit_type "int"
	  param in name "producerControlledByApp" explicit_type "bool"
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " connect attempts to connect a producer API to the BufferQueue.  This
 must be called before any other IGraphicBufferProducer methods are
 called except for getAllocator.  A consumer must already be connected.

 This method will fail if connect was previously called on the
 BufferQueue and no corresponding disconnect call was made (i.e. if
 it's still connected to a producer).

 APIs are enumerated in window.h (e.g. NATIVE_WINDOW_API_CPU)."
      end

      operation 267906 "disconnect"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " disconnect attempts to disconnect a producer API from the BufferQueue.
 Calling this method will cause any subsequent calls to other
 IGraphicBufferProducer methods to fail except for getAllocator and connect.
 Successfully calling connect after this will allow the other methods to
 succeed again.

 This method will fail if the the BufferQueue is not currently
 connected to the specified producer API."
      end

      operation 268034 "setSidebandStream"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "stream" explicit_type "sp<NativeHandle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Attaches a sideband buffer stream to the IGraphicBufferProducer.

 A sideband stream is a device-specific mechanism for passing buffers
 from the producer to the consumer without using dequeueBuffer/
 queueBuffer. If a sideband stream is present, the consumer can choose
 whether to acquire buffers from the sideband stream or from the queued
 buffers.

 Passing NULL or a different stream handle will detach the previous
 handle if any."
      end

      operation 268162 "allocateBuffers"
	cpp_virtual public explicit_return_type "void"
	nparams 5
	  param in name "async" explicit_type "bool"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "format" explicit_type "uint32_t"
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " See IGraphicBufferProducer::allocateBuffers"
      end

      operation 268290 "binderDied"
	cpp_virtual private explicit_return_type "void"
	nparams 1
	  param in name "who" explicit_type "wp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " This is required by the IBinder::DeathRecipient interface"
      end

      operation 268418 "waitForFreeSlotThenRelock"
	const private explicit_return_type "status_t"
	nparams 4
	  param in name "caller" explicit_type "char"
	  param in name "async" explicit_type "bool"
	  param inout name "found" explicit_type "int"
	  param inout name "returnFlags" explicit_type "status_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " waitForFreeSlotThenRelock finds the oldest slot in the FREE state. It may
 block if there are no available slots and we are not in non-blocking
 mode (producer and consumer controlled by the application). If it blocks,
 it will release mCore->mMutex while blocked so that other operations on
 the BufferQueue may succeed."
      end

      classrelation 165250 // mCore (<directional composition>)
	relation 165250 *-->
	  stereotype "sp"
	  a role_name "mCore" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 165250 // mCore (<directional composition>)
	  b parent class_ref 172290 // BufferQueueCore
      end

      classrelation 165378 // mSlots (<unidirectional association>)
	relation 165378 --->
	  a role_name "mSlots" private
	    comment " This references mCore->mSlots. Lock mCore->mMutex while accessing."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 165378 // mSlots (<unidirectional association>)
	  b parent class_ref 172418 // SlotsType
      end

      attribute 217602 "mConsumerName"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is a cached copy of the name stored in the BufferQueueCore.
 It's updated during connect and dequeueBuffer (which should catch
 most updates)."
      end

      attribute 217730 "mStickyTransform"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 173314 "IGraphicBufferAlloc"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 169346 // <generalisation>
	relation 169346 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169346 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end

      operation 280706 "createGraphicBuffer"
	abstract cpp_virtual public explicit_return_type "sp<GraphicBuffer>"
	nparams 5
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "PixelFormat"
	  param in name "usage" explicit_type "uint32_t"
	  param inout name "error" explicit_type "status_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Create a new GraphicBuffer for the client to use."
      end
    end

    class 173442 "IConsumerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Asynchronous "
      classrelation 168706 // <generalisation>
	relation 168706 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 168706 // <generalisation>
	  b parent class_ref 174338 // ConsumerListener
      end

      classrelation 168834 // <generalisation>
	relation 168834 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 168834 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end
    end

    class 173570 "IProducerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Asynchronous"
      classrelation 170626 // <generalisation>
	relation 170626 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 170626 // <generalisation>
	  b parent class_ref 179074 // ProducerListener
      end

      classrelation 170754 // <generalisation>
	relation 170754 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 170754 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end
    end

    class 173826 "BufferSlot"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 268546 "BufferSlot"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mEglDisplay(EGL_NO_DISPLAY),
      mBufferState(BufferSlot::FREE),
      mRequestBufferCalled(false),
      mFrameNumber(0),
      mEglFence(EGL_NO_SYNC_KHR),
      mAcquireCalled(false),
      mNeedsCleanupOnRelease(false),
      mAttachedByConsumer(false) {
    };
"
	
	
	
	
      end

      attribute 217858 "mGraphicBuffer"
	public explicit_type "GraphicBuffer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mGraphicBuffer points to the buffer allocated for this slot or is NULL
 if no buffer has been allocated."
      end

      attribute 217986 "mEglDisplay"
	public explicit_type "EGLDisplay"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mEglDisplay is the EGLDisplay used to create EGLSyncKHR objects."
      end

      class 174210 "BufferState"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 218114 "FREE"
	  public type class_ref 174210 // BufferState
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 218242 "DEQUEUED"
	  public type class_ref 174210 // BufferState
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 218370 "QUEUED"
	  public type class_ref 174210 // BufferState
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 218498 "ACQUIRED"
	  public type class_ref 174210 // BufferState
	  init_value " 3
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 268674 "bufferStateName"
	class_operation public explicit_return_type "char"
	nparams 1
	  param in name "state" type class_ref 174210 // BufferState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 165506 // mBufferState (<directional composition>)
	relation 165506 *-->
	  a role_name "mBufferState" public
	    comment " mBufferState is the current state of this buffer slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 165506 // mBufferState (<directional composition>)
	  b parent class_ref 174210 // BufferState
      end

      attribute 218626 "mRequestBufferCalled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mRequestBufferCalled is used for validating that the producer did
 call requestBuffer() when told to do so. Technically this is not
 needed but useful for debugging and catching producer bugs."
      end

      attribute 218754 "mFrameNumber"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFrameNumber is the number of the queued frame for this slot.  This
 is used to dequeue buffers in LRU order (useful because buffers
 may be released before their release fence is signaled)."
      end

      attribute 218882 "mEglFence"
	public explicit_type "EGLSyncKHR"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mEglFence is the EGL sync object that must signal before the buffer
 associated with this buffer slot may be dequeued. It is initialized
 to EGL_NO_SYNC_KHR when the buffer is created and may be set to a
 new sync object in releaseBuffer.  (This is deprecated in favor of
 mFence, below.)"
      end

      attribute 219010 "mFence"
	public explicit_type "Fence"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFence is a fence which will signal when work initiated by the
 previous owner of the buffer is finished. When the buffer is FREE,
 the fence indicates when the consumer has finished reading
 from the buffer, or when the producer has finished writing if it
 called cancelBuffer after queueing some writes. When the buffer is
 QUEUED, it indicates when the producer has finished filling the
 buffer. When the buffer is DEQUEUED or ACQUIRED, the fence has been
 passed to the consumer or producer along with ownership of the
 buffer, and mFence is set to NO_FENCE."
      end

      attribute 219138 "mAcquireCalled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates whether this buffer has been seen by a consumer yet"
      end

      attribute 219266 "mNeedsCleanupOnRelease"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates whether this buffer needs to be cleaned up by the
 consumer.  This is set when a buffer in ACQUIRED state is freed.
 It causes releaseBuffer to return STALE_BUFFER_SLOT."
      end

      attribute 219394 "mAttachedByConsumer"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates whether the buffer was attached on the consumer side.
 If so, it needs to set the BUFFER_NEEDS_REALLOCATION flag when dequeued
 to prevent the producer from using a stale cached buffer."
      end
    end

    class 173954 "BnGraphicBufferProducer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 170242 // <generalisation>
	relation 170242 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 170242 // <generalisation>
	  b parent class_ref 178946 // typedef15
      end

      operation 286594 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 174082 "typedef4"
      visibility package stereotype "typedef" explicit_base_type "IBinder::DeathRecipient"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 174338 "ConsumerListener"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------
 ConsumerListener is the interface through which the BufferQueue notifies
 the consumer of events that the consumer may wish to react to.  Because
 the consumer will generally have a mutex that is locked during calls from
 the consumer to the BufferQueue, these calls from the BufferQueue to the
 consumer *MUST* be called only when the BufferQueue mutex is NOT locked."
      classrelation 168450 // <generalisation>
	relation 168450 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 168450 // <generalisation>
	  b parent class_ref 172546 // typedef3
      end

      classrelation 168578 // <generalisation>
	relation 168578 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 168578 // <generalisation>
	  b parent class_ref 169090 // typedef1
      end

      operation 279426 "ConsumerListener"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 279554 "~ConsumerListener"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 279682 "onFrameAvailable"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " onFrameAvailable is called from queueBuffer each time an additional
 frame becomes available for consumption. This means that frames that
 are queued while in asynchronous mode only trigger the callback if no
 previous frames are pending. Frames queued while in synchronous mode
 always trigger the callback.

 This is called without any lock held and can be called concurrently
 by multiple threads."
      end

      operation 279810 "onBuffersReleased"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Asynchronous 
 onBuffersReleased is called to notify the buffer consumer that the
 BufferQueue has released its references to one or more GraphicBuffers
 contained in its slots.  The buffer consumer should then call
 BufferQueue::getReleasedBuffers to retrieve the list of buffers

 This is called without any lock held and can be called concurrently
 by multiple threads."
      end

      operation 279938 "onSidebandStreamChanged"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Asynchronous 
 onSidebandStreamChanged is called to notify the buffer consumer that the
 BufferQueue's sideband buffer stream has changed. This is called when a
 stream is first attached and when it is either detached or replaced by a
 different stream."
      end
    end

    class 174850 "CpuConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * CpuConsumer is a BufferQueue consumer endpoint that allows direct CPU
 * access to the underlying gralloc buffers provided by BufferQueue. Multiple
 * buffers may be acquired by it at once, to be used concurrently by the
 * CpuConsumer owner. Sets gralloc usage flags to be software-read-only.
 * This queue is synchronous by default."
      classrelation 166658 // <generalisation>
	relation 166658 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 166658 // <generalisation>
	  b parent class_ref 169730 // ConsumerBase
      end

      class 174978 "FrameAvailableListener"
	visibility package stereotype "typedef" base_type class_ref 169858 // FrameAvailableListener
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 166786 // <dependency>
	  relation 166786 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 166786 // <dependency>
	    b parent class_ref 169858 // FrameAvailableListener
	end
      end

      class 175106 "LockedBuffer"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 220290 "data"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 220418 "width"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 220546 "height"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 220674 "format"
	  public explicit_type "PixelFormat"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 220802 "stride"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 220930 "crop"
	  public explicit_type "Rect"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 221058 "transform"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 221186 "scalingMode"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 221314 "timestamp"
	  public explicit_type "int64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 221442 "frameNumber"
	  public explicit_type "uint64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 221570 "dataCb"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Values below are only valid when using
 HAL_PIXEL_FORMAT_YCbCr_420_888, in which case LockedBuffer::data
 contains the Y channel, and stride is the Y channel stride. For other
 formats, these will all be 0."
	end

	attribute 221698 "dataCr"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 221826 "chromaStride"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 221954 "chromaStep"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 271618 "CpuConsumer"
	public explicit_return_type ""
	nparams 3
	  param in name "bq" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "maxLockedBuffers" explicit_type "uint32_t"
	  param in name "controlledByApp" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Create a new CPU consumer. The maxLockedBuffers parameter specifies
 how many buffers can be locked for user access at the same time."
      end

      operation 271746 "~CpuConsumer"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 271874 "setName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " set the name of the CpuConsumer that will be used to identify it in
 log messages."
      end

      operation 272002 "setDefaultBufferSize"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultBufferSize is used to set the size of buffers returned by
 requestBuffers when a width and height of zero is requested.
 A call to setDefaultBufferSize() may trigger requestBuffers() to
 be called from the client. Default size is 1x1."
      end

      operation 272130 "setDefaultBufferFormat"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultBufferFormat allows CpuConsumer's BufferQueue to create buffers
 of a defaultFormat if no format is specified by producer. Formats are
 enumerated in graphics.h; the initial default is
 HAL_PIXEL_FORMAT_RGBA_8888."
      end

      operation 272258 "lockNextBuffer"
	public explicit_return_type "status_t"
	nparams 1
	  param inout name "nativeBuffer" type class_ref 175106 // LockedBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Gets the next graphics buffer from the producer and locks it for CPU use,
 filling out the passed-in locked buffer structure with the native pointer
 and metadata. Returns BAD_VALUE if no new buffer is available, and
 NOT_ENOUGH_DATA if the maximum number of buffers is already locked.

 Only a fixed number of buffers can be locked at a time, determined by the
 construction-time maxLockedBuffers parameter. If INVALID_OPERATION is
 returned by lockNextBuffer, then old buffers must be returned to the queue
 by calling unlockBuffer before more buffers can be acquired."
      end

      operation 272386 "unlockBuffer"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "nativeBuffer" type class_ref 175106 // LockedBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns a locked buffer to the queue, allowing it to be reused. Since
 only a fixed number of buffers may be locked at a time, old buffers must
 be released by calling unlockBuffer to ensure new buffers can be acquired by
 lockNextBuffer."
      end

      attribute 222082 "mMaxLockedBuffers"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum number of buffers that can be locked at a time"
      end

      operation 272514 "releaseAcquiredBufferLocked"
	private explicit_return_type "status_t"
	nparams 1
	  param in name "lockedIdx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 272642 "freeBufferLocked"
	cpp_virtual private explicit_return_type "void"
	nparams 1
	  param in name "slotIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 175234 "AcquiredBuffer"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 222210 "mSlot"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Need to track the original mSlot index and the buffer itself because
 the mSlot entry may be freed/reused before the acquired buffer is
 released."
	end

	attribute 222338 "mGraphicBuffer"
	  public explicit_type "GraphicBuffer"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 222466 "mBufferPointer"
	  public explicit_type "void"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 272770 "AcquiredBuffer"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
                mSlot(BufferQueue::INVALID_BUFFER_SLOT),
                mBufferPointer(NULL) {
        };
"
	  
	  
	  
	  
	end
      end

      classrelation 166914 // mAcquiredBuffers (<directional composition>)
	relation 166914 *-->
	  stereotype "Vector"
	  a role_name "mAcquiredBuffers" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 166914 // mAcquiredBuffers (<directional composition>)
	  b parent class_ref 175234 // AcquiredBuffer
      end

      attribute 222594 "mCurrentLockedBuffers"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Count of currently locked buffers"
      end
    end

    class 175362 "DisplayEventReceiver"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      class 175490 "anonymous13"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 222722 "DISPLAY_EVENT_VSYNC"
	  public type class_ref 175490 // anonymous13
	  init_value " 'vsyn'"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 222850 "DISPLAY_EVENT_HOTPLUG"
	  public type class_ref 175490 // anonymous13
	  init_value " 'plug'
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 175618 "Event"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 175746 "Header"
	  visibility package stereotype "struct"
	  cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 222978 "type"
	    public explicit_type "uint32_t"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 223106 "id"
	    public explicit_type "uint32_t"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	class 175874 "VSync"
	  visibility package stereotype "struct"
	  cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 223234 "count"
	    public explicit_type "uint32_t"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	class 176002 "Hotplug"
	  visibility package stereotype "struct"
	  cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 223362 "connected"
	    public explicit_type "bool"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	classrelation 167042 // header (<directional composition>)
	  relation 167042 *-->
	    a role_name "header" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 167042 // header (<directional composition>)
	    b parent class_ref 175746 // Header
	end

	classrelation 167170 // vsync (<directional composition>)
	  relation 167170 *-->
	    a role_name "vsync" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 167170 // vsync (<directional composition>)
	    b parent class_ref 175874 // VSync
	end

	classrelation 167298 // hotplug (<directional composition>)
	  relation 167298 *-->
	    a role_name "hotplug" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 167298 // hotplug (<directional composition>)
	    b parent class_ref 176002 // Hotplug
	end
      end
    end

    class 176130 "GLConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * GLConsumer consumes buffers of graphics data from a BufferQueue,
 * and makes them available to OpenGL as a texture.
 *
 * A typical usage pattern is to set up the GLConsumer with the
 * desired options, and call updateTexImage() when a new frame is desired.
 * If a new frame is available, the texture will be updated.  If not,
 * the previous contents are retained.
 *
 * By default, the texture is attached to the GL_TEXTURE_EXTERNAL_OES
 * texture target, in the EGL context of the first thread that calls
 * updateTexImage().
 *
 * This class was previously called SurfaceTexture."
      classrelation 167426 // <generalisation>
	relation 167426 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 167426 // <generalisation>
	  b parent class_ref 169730 // ConsumerBase
      end

      class 176258 "anonymous14"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 223490 "TEXTURE_EXTERNAL"
	  public type class_ref 176258 // anonymous14
	  init_value " 0x8D65 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 176386 "FrameAvailableListener"
	visibility package stereotype "typedef" base_type class_ref 169858 // FrameAvailableListener
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 167554 // <dependency>
	  relation 167554 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 167554 // <dependency>
	    b parent class_ref 169858 // FrameAvailableListener
	end
      end

      operation 272898 "GLConsumer"
	public explicit_return_type ""
	nparams 5
	  param in name "bq" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "tex" explicit_type "uint32_t"
	  param in name "texureTarget" explicit_type "uint32_t"
	  param in name "useFenceSync" explicit_type "bool"
	  param in name "isControlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " GLConsumer constructs a new GLConsumer object. If the constructor with
 the tex parameter is used, tex indicates the name of the OpenGL ES
 texture to which images are to be streamed. texTarget specifies the
 OpenGL ES texture target to which the texture will be bound in
 updateTexImage. useFenceSync specifies whether fences should be used to
 synchronize access to buffers if that behavior is enabled at
 compile-time.

 A GLConsumer may be detached from one OpenGL ES context and then
 attached to a different context using the detachFromContext and
 attachToContext methods, respectively. The intention of these methods is
 purely to allow a GLConsumer to be transferred from one consumer
 context to another. If such a transfer is not needed there is no
 requirement that either of these methods be called.

 If the constructor with the tex parameter is used, the GLConsumer is
 created in a state where it is considered attached to an OpenGL ES
 context for the purposes of the attachToContext and detachFromContext
 methods. However, despite being considered \"attached\" to a context, the
 specific OpenGL ES context doesn't get latched until the first call to
 updateTexImage. After that point, all calls to updateTexImage must be
 made with the same OpenGL ES context current.

 If the constructor without the tex parameter is used, the GLConsumer is
 created in a detached state, and attachToContext must be called before
 calls to updateTexImage."
      end

      operation 273026 "GLConsumer"
	public explicit_return_type ""
	nparams 4
	  param in name "bq" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "texureTarget" explicit_type "uint32_t"
	  param in name "useFenceSync" explicit_type "bool"
	  param in name "isControlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 273154 "updateTexImage"
	public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " updateTexImage acquires the most recently queued buffer, and sets the
 image contents of the target texture to it.

 This call may only be made while the OpenGL ES context to which the
 target texture belongs is bound to the calling thread.

 This calls doGLFenceWait to ensure proper synchronization."
      end

      operation 273282 "releaseTexImage"
	public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " releaseTexImage releases the texture acquired in updateTexImage().
 This is intended to be used in single buffer mode.

 This call may only be made while the OpenGL ES context to which the
 target texture belongs is bound to the calling thread."
      end

      operation 273410 "setReleaseFence"
	public explicit_return_type "void"
	nparams 1
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setReleaseFence stores a fence that will signal when the current buffer
 is no longer being read. This fence will be returned to the producer
 when the current buffer is released by updateTexImage(). Multiple
 fences can be set for a given buffer; they will be merged into a single
 union fence."
      end

      operation 273538 "setDefaultMaxBufferCount"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultMaxBufferCount sets the default limit on the maximum number
 of buffers that will be allocated at one time. The image producer may
 override the limit."
      end

      operation 273666 "getTransformMatrix"
	public explicit_return_type "void"
	nparams 1
	  param in name "mtx" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}[16]${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}[16]${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getTransformMatrix retrieves the 4x4 texture coordinate transform matrix
 associated with the texture image set by the most recent call to
 updateTexImage.

 This transform matrix maps 2D homogeneous texture coordinates of the form
 (s, t, 0, 1) with s and t in the inclusive range [0, 1] to the texture
 coordinate that should be used to sample that location from the texture.
 Sampling the texture outside of the range of this transform is undefined.

 This transform is necessary to compensate for transforms that the stream
 content producer may implicitly apply to the content. By forcing users of
 a GLConsumer to apply this transform we avoid performing an extra
 copy of the data that would be needed to hide the transform from the
 user.

 The matrix is stored in column-major order so that it may be passed
 directly to OpenGL ES via the glLoadMatrixf or glUniformMatrix4fv
 functions."
      end

      operation 273794 "getTimestamp"
	public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getTimestamp retrieves the timestamp associated with the texture image
 set by the most recent call to updateTexImage.

 The timestamp is in nanoseconds, and is monotonically increasing. Its
 other semantics (zero point, etc) are source-dependent and should be
 documented by the source."
      end

      operation 273922 "getFrameNumber"
	public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getFrameNumber retrieves the frame number associated with the texture
 image set by the most recent call to updateTexImage.

 The frame number is an incrementing counter set to 0 at the creation of
 the BufferQueue associated with this consumer."
      end

      operation 274050 "setDefaultBufferSize"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDefaultBufferSize is used to set the size of buffers returned by
 requestBuffers when a with and height of zero is requested.
 A call to setDefaultBufferSize() may trigger requestBuffers() to
 be called from the client.
 The width and height parameters must be no greater than the minimum of
 GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see: glGetIntegerv).
 An error due to invalid dimensions might not be reported until
 updateTexImage() is called."
      end

      operation 274178 "setFilteringEnabled"
	public explicit_return_type "void"
	nparams 1
	  param in name "enabled" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setFilteringEnabled sets whether the transform matrix should be computed
 for use with bilinear filtering."
      end

      operation 274306 "getCurrentBuffer"
	const public explicit_return_type "sp<GraphicBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getCurrentBuffer returns the buffer associated with the current image."
      end

      operation 274434 "getCurrentTextureTarget"
	const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getCurrentTextureTarget returns the texture target of the current
 texture as returned by updateTexImage()."
      end

      operation 274562 "getCurrentCrop"
	const public explicit_return_type "Rect"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getCurrentCrop returns the cropping rectangle of the current buffer."
      end

      operation 274690 "getCurrentTransform"
	const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getCurrentTransform returns the transform of the current buffer."
      end

      operation 274818 "getCurrentScalingMode"
	const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getCurrentScalingMode returns the scaling mode of the current buffer."
      end

      operation 274946 "getCurrentFence"
	const public explicit_return_type "sp<Fence>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getCurrentFence returns the fence indicating when the current buffer is
 ready to be read from."
      end

      operation 275074 "doGLFenceWait"
	const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " doGLFenceWait inserts a wait command into the OpenGL ES command stream
 to ensure that it is safe for future OpenGL ES commands to access the
 current texture buffer."
      end

      operation 275202 "setName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " set the name of the GLConsumer that will be used to identify it in
 log messages."
      end

      operation 275330 "setDefaultBufferFormat"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " These functions call the corresponding BufferQueue implementation
 so the refactoring can proceed smoothly"
      end

      operation 275458 "setConsumerUsageBits"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 275586 "setTransformHint"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "hint" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 275714 "detachFromContext"
	public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " detachFromContext detaches the GLConsumer from the calling thread's
 current OpenGL ES context.  This context must be the same as the context
 that was current for previous calls to updateTexImage.

 Detaching a GLConsumer from an OpenGL ES context will result in the
 deletion of the OpenGL ES texture object into which the images were being
 streamed.  After a GLConsumer has been detached from the OpenGL ES
 context calls to updateTexImage will fail returning INVALID_OPERATION
 until the GLConsumer is attached to a new OpenGL ES context using the
 attachToContext method."
      end

      operation 275842 "attachToContext"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "tex" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " attachToContext attaches a GLConsumer that is currently in the
 'detached' state to the current OpenGL ES context.  A GLConsumer is
 in the 'detached' state iff detachFromContext has successfully been
 called and no calls to attachToContext have succeeded since the last
 detachFromContext call.  Calls to attachToContext made on a
 GLConsumer that is not in the 'detached' state will result in an
 INVALID_OPERATION error.

 The tex argument specifies the OpenGL ES texture object name in the
 new context into which the image contents will be streamed.  A successful
 call to attachToContext will result in this texture object being bound to
 the texture target and populated with the image contents that were
 current at the time of the last call to detachFromContext."
      end

      operation 275970 "abandonLocked"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " abandonLocked overrides the ConsumerBase method to clear
 mCurrentTextureImage in addition to the ConsumerBase behavior."
      end

      operation 276098 "dumpLocked"
	const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " dumpLocked overrides the ConsumerBase method to dump GLConsumer-
 specific info in addition to the ConsumerBase behavior."
      end

      operation 276226 "acquireBufferLocked"
	cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param inout name "item" type class_ref 170242 // BufferItem
	  param in name "presentWhen" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " acquireBufferLocked overrides the ConsumerBase method to update the
 mEglSlots array in addition to the ConsumerBase behavior."
      end

      operation 276354 "releaseBufferLocked"
	cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "display" explicit_type "EGLDisplay"
	  param in name "eglFence" explicit_type "EGLSyncKHR"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " releaseBufferLocked overrides the ConsumerBase method to update the
 mEglSlots array in addition to the ConsumerBase."
      end

      operation 276482 "releaseBufferLocked"
	cpp_inline protected explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "eglFence" explicit_type "EGLSyncKHR"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return releaseBufferLocked(slot, graphicBuffer, mEglDisplay, eglFence);
    };
"
	
	
	
	
      end

      operation 276610 "isExternalFormat"
	class_operation protected explicit_return_type "bool"
	nparams 1
	  param in name "format" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 276738 "updateAndReleaseLocked"
	protected explicit_return_type "status_t"
	nparams 1
	  param in name "item" type class_ref 170242 // BufferItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " This releases the buffer in the slot referenced by mCurrentTexture,
 then updates state to refer to the BufferItem, which must be a
 newly-acquired buffer."
      end

      operation 276866 "bindTextureImageLocked"
	protected explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Binds mTexName and the current buffer to mTexTarget.  Uses
 mCurrentTexture if it's set, mCurrentTextureImage if not.  If the
 bind succeeds, this calls doGLFenceWait."
      end

      operation 276994 "checkAndUpdateEglStateLocked"
	protected explicit_return_type "status_t"
	nparams 1
	  param in name "contextCheck" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Gets the current EGLDisplay and EGLContext values, and compares them
 to mEglDisplay and mEglContext.  If the fields have been previously
 set, the values must match; if not, the fields are set to the current
 values.
 The contextCheck argument is used to ensure that a GL context is
 properly set; when set to false, the check is not performed."
      end

      class 176514 "EglImage"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 167682 // <generalisation>
	  relation 167682 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 167682 // <generalisation>
	    b parent class_ref 176642 // typedef7
	end

	operation 277122 "EglImage"
	  public explicit_return_type ""
	  nparams 1
	    param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 277250 "createIfNeeded"
	  public explicit_return_type "status_t"
	  nparams 3
	    param in name "display" explicit_type "EGLDisplay"
	    param in name "cropRect" explicit_type "Rect"
	    param in name "forceCreate" explicit_type "bool"
	      defaultvalue "false"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment " createIfNeeded creates an EGLImage if required (we haven't created
 one yet, or the EGLDisplay or crop-rect has changed)."
	end

	operation 277378 "bindToTextureTarget"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "texTarget" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment " This calls glEGLImageTargetTexture2DOES to bind the image to the
 texture in the specified texture target."
	end

	operation 277506 "graphicBuffer"
	  cpp_inline public explicit_return_type "sp<GraphicBuffer>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mGraphicBuffer; };
"
	  
	  
	  
	  
	end

	operation 277634 "graphicBufferHandle"
	  cpp_inline public explicit_return_type "native_handle"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return mGraphicBuffer == NULL ? NULL : mGraphicBuffer->handle;
        };
"
	  
	  
	  
	  
	end

	extra_member 141954 "friend"
	  
	  cpp "
        // Only allow instantiation using ref counting.
        friend class LightRefBase<EglImage>;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 277762 "~EglImage"
	  cpp_virtual private explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 277890 "createImage"
	  private explicit_return_type "EGLImageKHR"
	  nparams 3
	    param in name "dpy" explicit_type "EGLDisplay"
	    param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	    param in name "crop" explicit_type "Rect"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment " createImage creates a new EGLImage from a GraphicBuffer."
	end

	operation 278018 "EglImage"
	  private explicit_return_type ""
	  nparams 1
	    param in name "rhs" type class_ref 176514 // EglImage
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	  comment " Disallow copying"
	end

	operation 278146 "operator ="
	  private explicit_return_type "void"
	  nparams 1
	    param in name "rhs" type class_ref 176514 // EglImage
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 223618 "mGraphicBuffer"
	  private explicit_type "GraphicBuffer"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mGraphicBuffer is the buffer that was used to create this image."
	end

	attribute 223746 "mEglImage"
	  private explicit_type "EGLImageKHR"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mEglImage is the EGLImage created from mGraphicBuffer."
	end

	attribute 223874 "mEglDisplay"
	  private explicit_type "EGLDisplay"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mEGLDisplay is the EGLDisplay that was used to create mEglImage."
	end

	attribute 224002 "mCropRect"
	  private explicit_type "Rect"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mCropRect is the crop rectangle passed to EGL when mEglImage
 was created."
	end
      end

      class 176642 "typedef7"
	visibility package stereotype "typedef" explicit_base_type "LightRefBase<EglImage>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 278274 "freeBufferLocked"
	cpp_virtual private explicit_return_type "void"
	nparams 1
	  param in name "slotIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " freeBufferLocked frees up the given buffer slot. If the slot has been
 initialized this will release the reference to the GraphicBuffer in that
 slot and destroy the EGLImage in that slot.  Otherwise it has no effect.

 This method must be called with mMutex locked."
      end

      operation 278402 "computeCurrentTransformMatrixLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " computeCurrentTransformMatrixLocked computes the transform matrix for the
 current texture.  It uses mCurrentTransform and the current GraphicBuffer
 to compute this matrix and stores it in mCurrentTransformMatrix.
 mCurrentTextureImage must not be NULL."
      end

      operation 278530 "doGLFenceWaitLocked"
	const private explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " doGLFenceWaitLocked inserts a wait command into the OpenGL ES command
 stream to ensure that it is safe for future OpenGL ES commands to
 access the current texture buffer."
      end

      operation 278658 "syncForReleaseLocked"
	private explicit_return_type "status_t"
	nparams 1
	  param in name "dpy" explicit_type "EGLDisplay"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " syncForReleaseLocked performs the synchronization needed to release the
 current slot from an OpenGL ES context.  If needed it will set the
 current slot's fence to guard against a producer accessing the buffer
 before the outstanding accesses have completed."
      end

      operation 278786 "getDebugTexImageBuffer"
	class_operation private explicit_return_type "sp<GraphicBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " returns a graphic buffer used when the texture image has been released"
      end

      attribute 224130 "DEFAULT_USAGE_FLAGS"
	class_attribute const_attribute private explicit_type "uint32_t"
	init_value "=  GraphicBuffer::USAGE_HW_TEXTURE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The default consumer usage flags that GLConsumer always sets on its
 BufferQueue instance; these will be OR:d with any additional flags passed
 from the GLConsumer user. In particular, GLConsumer will always
 consume buffers as hardware textures."
      end

      classrelation 167810 // mCurrentTextureImage (<directional composition>)
	relation 167810 *-->
	  stereotype "sp"
	  a role_name "mCurrentTextureImage" private
	    comment " mCurrentTextureImage is the EglImage/buffer of the current texture. It's
 possible that this buffer is not associated with any buffer slot, so we
 must track it separately in order to support the getCurrentBuffer method."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 167810 // mCurrentTextureImage (<directional composition>)
	  b parent class_ref 176514 // EglImage
      end

      attribute 224258 "mCurrentCrop"
	private explicit_type "Rect"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentCrop is the crop rectangle that applies to the current texture.
 It gets set each time updateTexImage is called."
      end

      attribute 224386 "mCurrentTransform"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentTransform is the transform identifier for the current texture. It
 gets set each time updateTexImage is called."
      end

      attribute 224514 "mCurrentScalingMode"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentScalingMode is the scaling mode for the current texture. It gets
 set each time updateTexImage is called."
      end

      attribute 224642 "mCurrentFence"
	private explicit_type "Fence"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentFence is the fence received from BufferQueue in updateTexImage."
      end

      attribute 224770 "mCurrentTransformMatrix"
	private explicit_type "float"
	multiplicity "[16]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentTransformMatrix is the transform matrix for the current texture.
 It gets computed by computeTransformMatrix each time updateTexImage is
 called."
      end

      attribute 224898 "mCurrentTimestamp"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentTimestamp is the timestamp for the current texture. It
 gets set each time updateTexImage is called."
      end

      attribute 225026 "mCurrentFrameNumber"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentFrameNumber is the frame counter for the current texture.
 It gets set each time updateTexImage is called."
      end

      attribute 225154 "mFilteringEnabled"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFilteringEnabled indicates whether the transform matrix is computed for
 use with bilinear filtering. It defaults to true and is changed by
 setFilteringEnabled()."
      end

      attribute 225282 "mTexName"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTexName is the name of the OpenGL texture to which streamed images will
 be bound when updateTexImage is called. It is set at construction time
 and can be changed with a call to attachToContext."
      end

      attribute 225410 "mUseFenceSync"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mUseFenceSync indicates whether creation of the EGL_KHR_fence_sync
 extension should be used to prevent buffers from being dequeued before
 it's safe for them to be written. It gets set at construction time and
 never changes."
      end

      attribute 225538 "mTexTarget"
	const_attribute private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTexTarget is the GL texture target with which the GL texture object is
 associated.  It is set in the constructor and never changed.  It is
 almost always GL_TEXTURE_EXTERNAL_OES except for one use case in Android
 Browser.  In that case it is set to GL_TEXTURE_2D to allow
 glCopyTexSubImage to read from the texture.  This is a hack to work
 around a GL driver limitation on the number of FBO attachments, which the
 browser's tile cache exceeds."
      end

      class 176770 "EglSlot"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 278914 "EglSlot"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mEglFence(EGL_NO_SYNC_KHR) {};
"
	  
	  
	  
	  
	end

	classrelation 167938 // mEglImage (<directional composition>)
	  relation 167938 *-->
	    stereotype "sp"
	    a role_name "mEglImage" public
	      comment " mEglImage is the EGLImage created from mGraphicBuffer."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 167938 // mEglImage (<directional composition>)
	    b parent class_ref 176514 // EglImage
	end

	attribute 225666 "mEglFence"
	  public explicit_type "EGLSyncKHR"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " mFence is the EGL sync object that must signal before the buffer
 associated with this buffer slot may be dequeued. It is initialized
 to EGL_NO_SYNC_KHR when the buffer is created and (optionally, based
 on a compile-time option) set to a new sync object in updateTexImage."
	end
      end

      attribute 225794 "mEglDisplay"
	private explicit_type "EGLDisplay"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mEglDisplay is the EGLDisplay with which this GLConsumer is currently
 associated.  It is intialized to EGL_NO_DISPLAY and gets set to the
 current display when updateTexImage is called for the first time and when
 attachToContext is called."
      end

      attribute 225922 "mEglContext"
	private explicit_type "EGLContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mEglContext is the OpenGL ES context with which this GLConsumer is
 currently associated.  It is initialized to EGL_NO_CONTEXT and gets set
 to the current GL context when updateTexImage is called for the first
 time and when attachToContext is called."
      end

      classrelation 168066 // mEglSlots (<directional composition>)
	relation 168066 *-->
	  a role_name "mEglSlots" multiplicity "[BufferQueue::NUM_BUFFER_SLOTS]" private
	    comment " mEGLSlots stores the buffers that have been allocated by the BufferQueue
 for each buffer slot.  It is initialized to null pointers, and gets
 filled in with the result of BufferQueue::acquire when the
 client dequeues a buffer from a
 slot that has not yet been used. The buffer allocated to a slot will also
 be replaced if the requested buffer usage or geometry differs from that
 of the buffer allocated to a slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    classrelation_ref 168066 // mEglSlots (<directional composition>)
	  b parent class_ref 176770 // EglSlot
      end

      attribute 226050 "mCurrentTexture"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentTexture is the buffer slot index of the buffer that is currently
 bound to the OpenGL texture. It is initialized to INVALID_BUFFER_SLOT,
 indicating that no buffer slot is currently bound to the texture. Note,
 however, that a value of INVALID_BUFFER_SLOT does not necessarily mean
 that no buffer is bound to the texture. A call to setBufferCount will
 reset mCurrentTexture to INVALID_BUFFER_SLOT."
      end

      attribute 226178 "mAttached"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mAttached indicates whether the ConsumerBase is currently attached to
 an OpenGL ES context.  For legacy reasons, this is initialized to true,
 indicating that the ConsumerBase is considered to be attached to
 whatever context is current at the time of the first updateTexImage call.
 It is set to false by detachFromContext, and then set to true again by
 attachToContext."
      end

      attribute 226306 "sStaticInitLock"
	class_attribute private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " protects static initialization"
      end

      attribute 226434 "sReleasedTexImageBuffer"
	class_attribute private explicit_type "GraphicBuffer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mReleasedTexImageBuffer is a dummy buffer used when in single buffer
 mode and releaseTexImage() has been called"
      end

      classrelation 168194 // mReleasedTexImage (<directional composition>)
	relation 168194 *-->
	  stereotype "sp"
	  a role_name "mReleasedTexImage" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 168194 // mReleasedTexImage (<directional composition>)
	  b parent class_ref 176514 // EglImage
      end
    end

    class 176898 "GraphicBufferAlloc"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 168322 // <generalisation>
	relation 168322 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 168322 // <generalisation>
	  b parent class_ref 177026 // BnGraphicBufferAlloc
      end

      operation 279042 "GraphicBufferAlloc"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 279170 "~GraphicBufferAlloc"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 279298 "createGraphicBuffer"
	cpp_virtual public explicit_return_type "sp<GraphicBuffer>"
	nparams 5
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "PixelFormat"
	  param in name "usage" explicit_type "uint32_t"
	  param inout name "error" explicit_type "status_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 177026 "BnGraphicBufferAlloc"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 169474 // <generalisation>
	relation 169474 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169474 // <generalisation>
	  b parent class_ref 177794 // typedef11
      end

      operation 280834 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 177154 "typedef8"
      visibility package stereotype "typedef" explicit_base_type "IInterface"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 177282 "typedef9"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<IConsumerListener>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 177410 "IDisplayEventConnection"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 169090 // <generalisation>
	relation 169090 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169090 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end

      operation 280194 "getDataChannel"
	abstract const cpp_virtual public explicit_return_type "sp<BitTube>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "     * getDataChannel() returns a BitTube where to receive the events from"
      end

      operation 280322 "setVsyncRate"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "     * setVsyncRate() sets the vsync event delivery rate. A value of
     * 1 returns every vsync events. A value of 2 returns every other events,
     * etc... a value of 0 returns no event unless  requestNextVsync() has
     * been called."
      end

      operation 280450 "requestNextVsync"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "     * requestNextVsync() schedules the next vsync event. It has no effect
     * if the vsync rate is > 0."
      end
    end

    class 177538 "BnDisplayEventConnection"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " asynchronous
 ----------------------------------------------------------------------------"
      classrelation 169218 // <generalisation>
	relation 169218 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169218 // <generalisation>
	  b parent class_ref 177666 // typedef10
      end

      operation 280578 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 177666 "typedef10"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<IDisplayEventConnection>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 177794 "typedef11"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<IGraphicBufferAlloc>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 178306 "typedef13"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<IGraphicBufferConsumer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 178434 "IGraphicBufferProducer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * This class defines the Binder IPC interface for the producer side of
 * a queue of graphics buffers.  It's used to send graphics data from one
 * component to another.  For example, a class that decodes video for
 * playback might use this to provide frames.  This is typically done
 * indirectly, through Surface.
 *
 * The underlying mechanism is a BufferQueue, which implements
 * BnGraphicBufferProducer.  In normal operation, the producer calls
 * dequeueBuffer() to get an empty buffer, fills it with data, then
 * calls queueBuffer() to make it available to the consumer.
 *
 * This class was previously called ISurfaceTexture."
      classrelation 169986 // <generalisation>
	relation 169986 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169986 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end

      class 178562 "anonymous17"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 228610 "BUFFER_NEEDS_REALLOCATION"
	  public type class_ref 178562 // anonymous17
	  init_value " 0x1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 228738 "RELEASE_ALL_BUFFERS"
	  public type class_ref 178562 // anonymous17
	  init_value " 0x2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 284034 "requestBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param inout name "buf" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " requestBuffer requests a new buffer for the given index. The server (i.e.
 the IGraphicBufferProducer implementation) assigns the newly created
 buffer to the given slot index, and the client is expected to mirror the
 slot->buffer mapping so that it's not necessary to transfer a
 GraphicBuffer for every dequeue operation.

 The slot must be in the range of [0, NUM_BUFFER_SLOTS).

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - one of the two conditions occurred:
              * slot was out of range (see above)
              * buffer specified by the slot is not dequeued"
      end

      operation 284162 "setBufferCount"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " setBufferCount sets the number of buffer slots available. Calling this
 will also cause all buffer slots to be emptied. The caller should empty
 its mirrored copy of the buffer slots when calling this method.

 This function should not be called when there are any dequeued buffer
 slots, doing so will result in a BAD_VALUE error returned.

 The buffer count should be at most NUM_BUFFER_SLOTS (inclusive), but at least
 the minimum undequeued buffer count (exclusive). The minimum value
 can be obtained by calling query(NATIVE_WINDOW_MIN_UNDEQUEUED_BUFFERS).
 In particular the range is (minUndequeudBuffers, NUM_BUFFER_SLOTS].

 The buffer count may also be set to 0 (the default), to indicate that
 the producer does not wish to set a value.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - one of the below conditions occurred:
              * bufferCount was out of range (see above)
              * client has one or more buffers dequeued"
      end

      operation 284290 "dequeueBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 7
	  param inout name "slot" explicit_type "int"
	  param inout name "fence" explicit_type "sp<Fence>"
	  param in name "async" explicit_type "bool"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "uint32_t"
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " dequeueBuffer requests a new buffer slot for the client to use. Ownership
 of the slot is transfered to the client, meaning that the server will not
 use the contents of the buffer associated with that slot.

 The slot index returned may or may not contain a buffer (client-side).
 If the slot is empty the client should call requestBuffer to assign a new
 buffer to that slot.

 Once the client is done filling this buffer, it is expected to transfer
 buffer ownership back to the server with either cancelBuffer on
 the dequeued slot or to fill in the contents of its associated buffer
 contents and call queueBuffer.

 If dequeueBuffer returns the BUFFER_NEEDS_REALLOCATION flag, the client is
 expected to call requestBuffer immediately.

 If dequeueBuffer returns the RELEASE_ALL_BUFFERS flag, the client is
 expected to release all of the mirrored slot->buffer mappings.

 The fence parameter will be updated to hold the fence associated with
 the buffer. The contents of the buffer must not be overwritten until the
 fence signals. If the fence is Fence::NO_FENCE, the buffer may be written
 immediately.

 The async parameter sets whether we're in asynchronous mode for this
 dequeueBuffer() call.

 The width and height parameters must be no greater than the minimum of
 GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see: glGetIntegerv).
 An error due to invalid dimensions might not be reported until
 updateTexImage() is called.  If width and height are both zero, the
 default values specified by setDefaultBufferSize() are used instead.

 The pixel formats are enumerated in <graphics.h>, e.g.
 HAL_PIXEL_FORMAT_RGBA_8888.  If the format is 0, the default format
 will be used.

 The usage argument specifies gralloc buffer usage flags.  The values
 are enumerated in <gralloc.h>, e.g. GRALLOC_USAGE_HW_RENDER.  These
 will be merged with the usage flags specified by
 IGraphicBufferConsumer::setConsumerUsageBits.

 This call will block until a buffer is available to be dequeued. If
 both the producer and consumer are controlled by the app, then this call
 can never block and will return WOULD_BLOCK if no buffer is available.

 A non-negative value with flags set (see above) will be returned upon
 success.

 Return of a negative means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - both in async mode and buffer count was less than the
               max numbers of buffers that can be allocated at once.
 * INVALID_OPERATION - cannot attach the buffer because it would cause
                       too many buffers to be dequeued, either because
                       the producer already has a single buffer dequeued
                       and did not set a buffer count, or because a
                       buffer count was set and this call would cause
                       it to be exceeded.
 * WOULD_BLOCK - no buffer is currently available, and blocking is disabled
                 since both the producer/consumer are controlled by app
 * NO_MEMORY - out of memory, cannot allocate the graphics buffer.

 All other negative values are an unknown error returned downstream
 from the graphics allocator (typically errno)."
      end

      operation 284418 "detachBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " detachBuffer attempts to remove all ownership of the buffer in the given
 slot from the buffer queue. If this call succeeds, the slot will be
 freed, and there will be no way to obtain the buffer from this interface.
 The freed slot will remain unallocated until either it is selected to
 hold a freshly allocated buffer in dequeueBuffer or a buffer is attached
 to the slot. The buffer must have already been dequeued, and the caller
 must already possesses the sp<GraphicBuffer> (i.e., must have called
 requestBuffer).

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - the given slot number is invalid, either because it is
               out of the range [0, NUM_BUFFER_SLOTS), or because the slot
               it refers to is not currently dequeued and requested."
      end

      operation 284546 "detachNextBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " detachNextBuffer is equivalent to calling dequeueBuffer, requestBuffer,
 and detachBuffer in sequence, except for two things:

 1) It is unnecessary to know the dimensions, format, or usage of the
    next buffer.
 2) It will not block, since if it cannot find an appropriate buffer to
    return, it will return an error instead.

 Only slots that are free but still contain a GraphicBuffer will be
 considered, and the oldest of those will be returned. outBuffer is
 equivalent to outBuffer from the requestBuffer call, and outFence is
 equivalent to fence from the dequeueBuffer call.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - either outBuffer or outFence were NULL.
 * NO_MEMORY - no slots were found that were both free and contained a
               GraphicBuffer."
      end

      operation 284674 "attachBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outSlot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " attachBuffer attempts to transfer ownership of a buffer to the buffer
 queue. If this call succeeds, it will be as if this buffer was dequeued
 from the returned slot number. As such, this call will fail if attaching
 this buffer would cause too many buffers to be simultaneously dequeued.

 If attachBuffer returns the RELEASE_ALL_BUFFERS flag, the caller is
 expected to release all of the mirrored slot->buffer mappings.

 A non-negative value with flags set (see above) will be returned upon
 success.

 Return of a negative value means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - outSlot or buffer were NULL or invalid combination of
               async mode and buffer count override.
 * INVALID_OPERATION - cannot attach the buffer because it would cause
                       too many buffers to be dequeued, either because
                       the producer already has a single buffer dequeued
                       and did not set a buffer count, or because a
                       buffer count was set and this call would cause
                       it to be exceeded.
 * WOULD_BLOCK - no buffer slot is currently available, and blocking is
                 disabled since both the producer/consumer are
                 controlled by the app."
      end

      class 178690 "QueueBufferInput"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 170114 // <generalisation>
	  relation 170114 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 170114 // <generalisation>
	    b parent class_ref 178818 // typedef14
	end

	extra_member 142210 "friend"
	  
	  cpp "
        friend class Flattenable<QueueBufferInput>;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 284802 "QueueBufferInput"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "parcel" explicit_type "Parcel"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 284930 "QueueBufferInput"
	  cpp_inline public explicit_return_type ""
	  nparams 8
	    param in name "timestamp" explicit_type "int64_t"
	    param in name "isAutoTimestamp" explicit_type "bool"
	    param in name "crop" explicit_type "Rect"
	    param in name "scalingMode" explicit_type "int"
	    param in name "transform" explicit_type "uint32_t"
	    param in name "async" explicit_type "bool"
	    param in name "fence" explicit_type "sp<Fence>"
	    param in name "sticky" explicit_type "uint32_t"
	      defaultvalue "0"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, const ${t6} & ${p6}${v6}, ${t7} ${p7}${v7}${)}${volatile}${throw} : timestamp(timestamp), isAutoTimestamp(isAutoTimestamp), crop(crop),
          scalingMode(scalingMode), transform(transform), stickyTransform(sticky),
          async(async), fence(fence) { };
"
	  
	  
	  
	  
	  comment " timestamp - a monotonically increasing value in nanoseconds
 isAutoTimestamp - if the timestamp was synthesized at queue time
 crop - a crop rectangle that's used as a hint to the consumer
 scalingMode - a set of flags from NATIVE_WINDOW_SCALING_* in <window.h>
 transform - a set of flags from NATIVE_WINDOW_TRANSFORM_* in <window.h>
 async - if the buffer is queued in asynchronous mode
 fence - a fence that the consumer must wait on before reading the buffer,
         set this to Fence::NO_FENCE if the buffer is ready immediately
 sticky - the sticky transform set in Surface (only used by the LEGACY
          camera mode)."
	end

	operation 285058 "deflate"
	  const cpp_inline public explicit_return_type "void"
	  nparams 8
	    param inout name "outTimestamp" explicit_type "int64_t"
	    param inout name "outIsAutoTimestamp" explicit_type "bool"
	    param inout name "outCrop" explicit_type "Rect"
	    param inout name "outScalingMode" explicit_type "int"
	    param inout name "outTransform" explicit_type "uint32_t"
	    param inout name "outAsync" explicit_type "bool"
	    param inout name "outFence" explicit_type "sp<Fence>"
	    param inout name "outStickyTransform" explicit_type "uint32_t"
	      defaultvalue "NULL"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
            *outTimestamp = timestamp;
            *outIsAutoTimestamp = bool(isAutoTimestamp);
            *outCrop = crop;
            *outScalingMode = scalingMode;
            *outTransform = transform;
            *outAsync = bool(async);
            *outFence = fence;
            if (outStickyTransform != NULL) {
                *outStickyTransform = stickyTransform;
            }
        };
"
	  
	  
	  
	  
	end

	operation 285186 "getFlattenedSize"
	  const public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment " Flattenable protocol"
	end

	operation 285314 "getFdCount"
	  const public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 285442 "flatten"
	  const public explicit_return_type "status_t"
	  nparams 4
	    param inout name "buffer" explicit_type "void"
	    param inout name "size" explicit_type "size_t"
	    param inout name "fds" explicit_type "int"
	    param inout name "count" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * & ${p0}, ${t1} & ${p1}, ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 285570 "unflatten"
	  public explicit_return_type "status_t"
	  nparams 4
	    param in name "buffer" explicit_type "void"
	    param inout name "size" explicit_type "size_t"
	    param in name "fds" explicit_type "int"
	    param inout name "count" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * & ${p0}, ${t1} & ${p1}, const ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 228866 "timestamp"
	  private explicit_type "int64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 228994 "isAutoTimestamp"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 229122 "crop"
	  private explicit_type "Rect"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 229250 "scalingMode"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 229378 "transform"
	  private explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 229506 "stickyTransform"
	  private explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 229634 "async"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 229762 "fence"
	  private explicit_type "Fence"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 178818 "typedef14"
	visibility package stereotype "typedef" explicit_base_type "Flattenable<QueueBufferInput>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 285698 "queueBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "input" type class_ref 178690 // QueueBufferInput
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 285826 "cancelBuffer"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " cancelBuffer indicates that the client does not wish to fill in the
 buffer associated with slot and transfers ownership of the slot back to
 the server.

 The buffer is not queued for use by the consumer.

 The buffer will not be overwritten until the fence signals.  The fence
 will usually be the one obtained from dequeueBuffer."
      end

      operation 285954 "query"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 2
	  param in name "what" explicit_type "int"
	  param inout name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " query retrieves some information for this surface
 'what' tokens allowed are that of NATIVE_WINDOW_* in <window.h>

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - what was out of range"
      end

      operation 286082 "connect"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "listener" explicit_type "sp<IProducerListener>"
	  param in name "api" explicit_type "int"
	  param in name "producerControlledByApp" explicit_type "bool"
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " connect attempts to connect a client API to the IGraphicBufferProducer.
 This must be called before any other IGraphicBufferProducer methods are
 called except for getAllocator. A consumer must be already connected.

 This method will fail if the connect was previously called on the
 IGraphicBufferProducer and no corresponding disconnect call was made.

 The listener is an optional binder callback object that can be used if
 the producer wants to be notified when the consumer releases a buffer
 back to the BufferQueue. It is also used to detect the death of the
 producer. If only the latter functionality is desired, there is a
 DummyProducerListener class in IProducerListener.h that can be used.

 The api should be one of the NATIVE_WINDOW_API_* values in <window.h>

 The producerControlledByApp should be set to true if the producer is hosted
 by an untrusted process (typically app_process-forked processes). If both
 the producer and the consumer are app-controlled then all buffer queues
 will operate in async mode regardless of the async flag.

 Upon success, the output will be filled with meaningful data
 (refer to QueueBufferOutput documentation above).

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - one of the following occurred:
             * the buffer queue was abandoned
             * no consumer has yet connected
 * BAD_VALUE - one of the following has occurred:
             * the producer is already connected
             * api was out of range (see above).
             * output was NULL.
 * DEAD_OBJECT - the token is hosted by an already-dead process

 Additional negative errors may be returned by the internals, they
 should be treated as opaque fatal unrecoverable errors."
      end

      operation 286210 "disconnect"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " disconnect attempts to disconnect a client API from the
 IGraphicBufferProducer.  Calling this method will cause any subsequent
 calls to other IGraphicBufferProducer methods to fail except for
 getAllocator and connect.  Successfully calling connect after this will
 allow the other methods to succeed again.

 This method will fail if the the IGraphicBufferProducer is not currently
 connected to the specified client API.

 The api should be one of the NATIVE_WINDOW_API_* values in <window.h>

 Disconnecting from an abandoned IGraphicBufferProducer is legal and
 is considered a no-op.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - one of the following has occurred:
             * the api specified does not match the one that was connected
             * api was out of range (see above).
 * DEAD_OBJECT - the token is hosted by an already-dead process"
      end

      operation 286338 "setSidebandStream"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "stream" explicit_type "sp<NativeHandle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Attaches a sideband buffer stream to the IGraphicBufferProducer.

 A sideband stream is a device-specific mechanism for passing buffers
 from the producer to the consumer without using dequeueBuffer/
 queueBuffer. If a sideband stream is present, the consumer can choose
 whether to acquire buffers from the sideband stream or from the queued
 buffers.

 Passing NULL or a different stream handle will detach the previous
 handle if any."
      end

      operation 286466 "allocateBuffers"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 5
	  param in name "async" explicit_type "bool"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "format" explicit_type "uint32_t"
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Allocates buffers based on the given dimensions/format.

 This function will allocate up to the maximum number of buffers
 permitted by the current BufferQueue configuration. It will use the
 given format, dimensions, and usage bits, which are interpreted in the
 same way as for dequeueBuffer, and the async flag must be set the same
 way as for dequeueBuffer to ensure that the correct number of buffers are
 allocated. This is most useful to avoid an allocation delay during
 dequeueBuffer. If there are already the maximum number of buffers
 allocated, this function has no effect."
      end
    end

    class 178946 "typedef15"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<IGraphicBufferProducer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 179074 "ProducerListener"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ProducerListener is the interface through which the BufferQueue notifies the
 producer of events that the producer may wish to react to. Because the
 producer will generally have a mutex that is locked during calls from the
 producer to the BufferQueue, these calls from the BufferQueue to the
 producer *MUST* be called only when the BufferQueue mutex is NOT locked."
      classrelation 170370 // <generalisation>
	relation 170370 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 170370 // <generalisation>
	  b parent class_ref 172546 // typedef3
      end

      classrelation 170498 // <generalisation>
	relation 170498 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 170498 // <generalisation>
	  b parent class_ref 169090 // typedef1
      end

      operation 286722 "ProducerListener"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 286850 "~ProducerListener"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 286978 "onBufferReleased"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " onBufferReleased is called from IGraphicBufferConsumer::releaseBuffer to
 notify the producer that a new buffer is free and ready to be dequeued.

 This is called without any lock held and can be called concurrently by
 multiple threads."
      end
    end

    class 179202 "DummyProducerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 170882 // <generalisation>
	relation 170882 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 170882 // <generalisation>
	  b parent class_ref 179330 // typedef16
      end

      operation 287106 "onBufferReleased"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end
    end

    class 179330 "typedef16"
      visibility package stereotype "typedef" explicit_base_type "BnProducerListener"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 179458 "ISensorEventConnection"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 171010 // <generalisation>
	relation 171010 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171010 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end

      operation 287234 "getSensorChannel"
	abstract const cpp_virtual public explicit_return_type "sp<BitTube>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 287362 "enableDisable"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "handle" explicit_type "int"
	  param in name "enabled" explicit_type "bool"
	  param in name "samplingPeriodNs" explicit_type "nsecs_t"
	  param in name "maxBatchReportLatencyNs" explicit_type "nsecs_t"
	  param in name "reservedFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 287490 "setEventRate"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "handle" explicit_type "int"
	  param in name "ns" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 287618 "flush"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 179586 "BnSensorEventConnection"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 171138 // <generalisation>
	relation 171138 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171138 // <generalisation>
	  b parent class_ref 179714 // typedef17
      end

      operation 287746 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 179714 "typedef17"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<ISensorEventConnection>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 179842 "ISensorServer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 171266 // <generalisation>
	relation 171266 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171266 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end

      operation 287874 "getSensorList"
	abstract cpp_virtual public explicit_return_type "Vector<Sensor>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 288002 "createSensorEventConnection"
	abstract cpp_virtual public explicit_return_type "sp<ISensorEventConnection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 179970 "BnSensorServer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 171394 // <generalisation>
	relation 171394 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171394 // <generalisation>
	  b parent class_ref 180098 // typedef18
      end

      operation 288130 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 180098 "typedef18"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<ISensorServer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 180226 "ISurfaceComposer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * This class defines the Binder IPC interface for accessing various
 * SurfaceFlinger features."
      classrelation 171522 // <generalisation>
	relation 171522 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171522 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end

      class 180354 "anonymous18"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 229890 "eSynchronous"
	  public type class_ref 180354 // anonymous18
	  init_value " 0x01"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 230018 "eAnimation"
	  public type class_ref 180354 // anonymous18
	  init_value " 0x02"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 180482 "anonymous19"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 230146 "eDisplayIdMain"
	  public type class_ref 180482 // anonymous19
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 230274 "eDisplayIdHdmi"
	  public type class_ref 180482 // anonymous19
	  init_value " 1
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 180610 "Rotation"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 230402 "eRotateNone"
	  public type class_ref 180610 // Rotation
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 230530 "eRotate90"
	  public type class_ref 180610 // Rotation
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 230658 "eRotate180"
	  public type class_ref 180610 // Rotation
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 230786 "eRotate270"
	  public type class_ref 180610 // Rotation
	  init_value " 3
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 288258 "createConnection"
	abstract cpp_virtual public explicit_return_type "sp<ISurfaceComposerClient>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " create connection with surface flinger, requires
     * ACCESS_SURFACE_FLINGER permission"
      end

      operation 288386 "createGraphicBufferAlloc"
	abstract cpp_virtual public explicit_return_type "sp<IGraphicBufferAlloc>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " create a graphic buffer allocator"
      end

      operation 288514 "createDisplayEventConnection"
	abstract cpp_virtual public explicit_return_type "sp<IDisplayEventConnection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " return an IDisplayEventConnection "
      end

      operation 288642 "createDisplay"
	abstract cpp_virtual public explicit_return_type "sp<IBinder>"
	nparams 2
	  param in name "displayName" explicit_type "String8"
	  param in name "secure" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " create a virtual display
     * requires ACCESS_SURFACE_FLINGER permission."
      end

      operation 288770 "destroyDisplay"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " destroy a virtual display
     * requires ACCESS_SURFACE_FLINGER permission."
      end

      operation 288898 "getBuiltInDisplay"
	abstract cpp_virtual public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "id" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " get the token for the existing default displays. possible values
     * for id are eDisplayIdMain and eDisplayIdHdmi."
      end

      operation 289026 "setTransactionState"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "state" explicit_type "Vector<ComposerState>"
	  param in name "displays" explicit_type "Vector<DisplayState>"
	  param in name "flags" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " open/close transactions. requires ACCESS_SURFACE_FLINGER permission "
      end

      operation 289154 "bootFinished"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " signal that we're done booting.
     * Requires ACCESS_SURFACE_FLINGER permission"
      end

      operation 289282 "authenticateSurfaceTexture"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "surface" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " verify that an IGraphicBufferProducer was created by SurfaceFlinger."
      end

      operation 289410 "setPowerMode"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " set display power mode. depending on the mode, it can either trigger
     * screen on, off or low power mode and wait for it to complete.
     * requires ACCESS_SURFACE_FLINGER permission."
      end

      operation 289538 "getDisplayConfigs"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "configs" explicit_type "Vector<DisplayInfo>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " returns information for each configuration of the given display
     * intended to be used to get information about built-in displays "
      end

      operation 289666 "getDisplayStats"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "stats" explicit_type "DisplayStatInfo"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " returns display statistics for a given display
     * intended to be used by the media framework to properly schedule
     * video frames "
      end

      operation 289794 "getActiveConfig"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " indicates which of the configurations returned by getDisplayInfo is
     * currently active "
      end

      operation 289922 "setActiveConfig"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " specifies which configuration (of those returned by getDisplayInfo)
     * should be used "
      end

      operation 290050 "captureScreen"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 9
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "producer" explicit_type "sp<IGraphicBufferProducer>"
	  param in name "sourceCrop" explicit_type "Rect"
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	  param in name "rotation" type class_ref 180610 // Rotation
	    defaultvalue "eRotateNone"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Capture the specified screen. requires READ_FRAME_BUFFER permission
     * This function will fail if there is a secure window on screen."
      end

      operation 290178 "clearAnimationFrameStats"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Clears the frame statistics for animations.
     *
     * Requires the ACCESS_SURFACE_FLINGER permission."
      end

      operation 290306 "getAnimationFrameStats"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "outStats" explicit_type "FrameStats"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Gets the frame statistics for animations.
     *
     * Requires the ACCESS_SURFACE_FLINGER permission."
      end
    end

    class 180738 "BnSurfaceComposer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 171650 // <generalisation>
	relation 171650 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171650 // <generalisation>
	  b parent class_ref 180866 // typedef19
      end

      class 180994 "anonymous20"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 230914 "BOOT_FINISHED"
	  public type class_ref 180994 // anonymous20
	  init_value " IBinder::FIRST_CALL_TRANSACTION"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 231042 "CREATE_CONNECTION"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 231170 "CREATE_GRAPHIC_BUFFER_ALLOC"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 231298 "CREATE_DISPLAY_EVENT_CONNECTION"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 231426 "CREATE_DISPLAY"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 231554 "DESTROY_DISPLAY"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 231682 "GET_BUILT_IN_DISPLAY"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 231810 "SET_TRANSACTION_STATE"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 231938 "AUTHENTICATE_SURFACE"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 232066 "GET_DISPLAY_CONFIGS"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 232194 "GET_ACTIVE_CONFIG"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 232322 "SET_ACTIVE_CONFIG"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 232450 "CONNECT_DISPLAY"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 232578 "CAPTURE_SCREEN"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 232706 "CLEAR_ANIMATION_FRAME_STATS"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 232834 "GET_ANIMATION_FRAME_STATS"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 232962 "SET_POWER_MODE"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 233090 "GET_DISPLAY_STATS"
	  public type class_ref 180994 // anonymous20
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 290434 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 180866 "typedef19"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<ISurfaceComposer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 181122 "ISurfaceComposerClient"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 171778 // <generalisation>
	relation 171778 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171778 // <generalisation>
	  b parent class_ref 177154 // typedef8
      end

      class 181250 "anonymous21"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 233218 "eHidden"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00000004"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 233346 "eDestroyBackbuffer"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00000020"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 233474 "eSecure"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00000080"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 233602 "eNonPremultiplied"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00000100"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 233730 "eOpaque"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00000400"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 233858 "eProtectedByApp"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00000800"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 233986 "eProtectedByDRM"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00001000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 234114 "eCursorWindow"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00002000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 234242 "eFXSurfaceNormal"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00000000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 234370 "eFXSurfaceDim"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x00020000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 234498 "eFXSurfaceMask"
	  public type class_ref 181250 // anonymous21
	  init_value " 0x000F0000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 290562 "createSurface"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 7
	  param in name "name" explicit_type "String8"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "PixelFormat"
	  param in name "flags" explicit_type "uint32_t"
	  param inout name "handle" explicit_type "sp<IBinder>"
	  param inout name "gbp" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "     * Requires ACCESS_SURFACE_FLINGER permission"
      end

      operation 290690 "destroySurface"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "handle" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "     * Requires ACCESS_SURFACE_FLINGER permission"
      end

      operation 290818 "clearLayerFrameStats"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "handle" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "     * Requires ACCESS_SURFACE_FLINGER permission"
      end

      operation 290946 "getLayerFrameStats"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "handle" explicit_type "sp<IBinder>"
	  param inout name "outStats" explicit_type "FrameStats"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "     * Requires ACCESS_SURFACE_FLINGER permission"
      end
    end

    class 181378 "BnSurfaceComposerClient"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 171906 // <generalisation>
	relation 171906 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171906 // <generalisation>
	  b parent class_ref 181506 // typedef20
      end

      operation 291074 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" explicit_type "Parcel"
	  param inout name "reply" explicit_type "Parcel"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 181506 "typedef20"
      visibility package stereotype "typedef" explicit_base_type "BnInterface<ISurfaceComposerClient>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 181762 "Sensor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 172034 // <generalisation>
	relation 172034 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 172034 // <generalisation>
	  b parent class_ref 181634 // ASensor
      end

      classrelation 172162 // <generalisation>
	relation 172162 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 172162 // <generalisation>
	  b parent class_ref 181890 // typedef21
      end

      class 182018 "anonymous22"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 234626 "TYPE_ACCELEROMETER"
	  public type class_ref 182018 // anonymous22
	  init_value " ASENSOR_TYPE_ACCELEROMETER"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 234754 "TYPE_MAGNETIC_FIELD"
	  public type class_ref 182018 // anonymous22
	  init_value " ASENSOR_TYPE_MAGNETIC_FIELD"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 234882 "TYPE_GYROSCOPE"
	  public type class_ref 182018 // anonymous22
	  init_value " ASENSOR_TYPE_GYROSCOPE"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 235010 "TYPE_LIGHT"
	  public type class_ref 182018 // anonymous22
	  init_value " ASENSOR_TYPE_LIGHT"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 235138 "TYPE_PROXIMITY"
	  public type class_ref 182018 // anonymous22
	  init_value " ASENSOR_TYPE_PROXIMITY
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 291202 "Sensor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 291330 "Sensor"
	public explicit_return_type ""
	nparams 2
	  param in name "hwSensor" explicit_type "sensor_t"
	  param in name "halVersion" explicit_type "int"
	    defaultvalue "0"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 291458 "~Sensor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 291586 "getName"
	const public explicit_return_type "String8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 291714 "getVendor"
	const public explicit_return_type "String8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 291842 "getHandle"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 291970 "getType"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 292098 "getMinValue"
	const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 292226 "getMaxValue"
	const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 292354 "getResolution"
	const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 292482 "getPowerUsage"
	const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 292610 "getMinDelay"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 292738 "getMinDelayNs"
	const public explicit_return_type "nsecs_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 292866 "getVersion"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 292994 "getFifoReservedEventCount"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 293122 "getFifoMaxEventCount"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 293250 "getStringType"
	const public explicit_return_type "String8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 293378 "getRequiredPermission"
	const public explicit_return_type "String8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 293506 "getMaxDelay"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 293634 "getFlags"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 293762 "isWakeUpSensor"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 293890 "getReportingMode"
	const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 294018 "isFixedSize"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return false; };
"
	
	
	
	
	comment " LightFlattenable protocol"
      end

      operation 294146 "getFlattenedSize"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 294274 "flatten"
	const public explicit_return_type "status_t"
	nparams 2
	  param inout name "buffer" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 294402 "unflatten"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "buffer" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 235266 "mName"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 235394 "mVendor"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 235522 "mHandle"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 235650 "mType"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 235778 "mMinValue"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 235906 "mMaxValue"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236034 "mResolution"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236162 "mPower"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236290 "mMinDelay"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236418 "mVersion"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236546 "mFifoReservedEventCount"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236674 "mFifoMaxEventCount"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236802 "mStringType"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236930 "mRequiredPermission"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 237058 "mMaxDelay"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 237186 "mFlags"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 294530 "flattenString8"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "void"
	  param inout name "size" explicit_type "size_t"
	  param in name "string8" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 294658 "unflattenString8"
	class_operation private explicit_return_type "bool"
	nparams 3
	  param in name "buffer" explicit_type "void"
	  param inout name "size" explicit_type "size_t"
	  param inout name "outputString8" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 181890 "typedef21"
      visibility package stereotype "typedef" explicit_base_type "LightFlattenable<Sensor>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 182274 "SensorEventQueue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 172290 // <generalisation>
	relation 172290 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 172290 // <generalisation>
	  b parent class_ref 182146 // ASensorEventQueue
      end

      classrelation 172418 // <generalisation>
	relation 172418 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 172418 // <generalisation>
	  b parent class_ref 169090 // typedef1
      end

      class 182402 "anonymous23"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 237442 "MAX_RECEIVE_BUFFER_EVENT_COUNT"
	  public type class_ref 182402 // anonymous23
	  init_value " 256 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 294786 "SensorEventQueue"
	public explicit_return_type ""
	nparams 1
	  param in name "connection" explicit_type "sp<ISensorEventConnection>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 294914 "~SensorEventQueue"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 295042 "onFirstRef"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 295170 "getFd"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 295298 "write"
	class_operation public explicit_return_type "ssize_t"
	nparams 3
	  param in name "tube" explicit_type "sp<BitTube>"
	  param in name "events" explicit_type "ASensorEvent"
	  param in name "numEvents" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 295426 "read"
	public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "events" explicit_type "ASensorEvent"
	  param in name "numEvents" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 295554 "waitForEvent"
	const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 295682 "wake"
	const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 295810 "enableSensor"
	const public explicit_return_type "status_t"
	nparams 1
	  param in name "sensor" type class_ref 181762 // Sensor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 295938 "disableSensor"
	const public explicit_return_type "status_t"
	nparams 1
	  param in name "sensor" type class_ref 181762 // Sensor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 296066 "setEventRate"
	const public explicit_return_type "status_t"
	nparams 2
	  param in name "sensor" type class_ref 181762 // Sensor
	  param in name "ns" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 296194 "enableSensor"
	const public explicit_return_type "status_t"
	nparams 4
	  param in name "handle" explicit_type "int32_t"
	  param in name "samplingPeriodUs" explicit_type "int32_t"
	  param in name "maxBatchReportLatencyUs" explicit_type "int"
	  param in name "reservedFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " these are here only to support SensorManager.java"
      end

      operation 296322 "disableSensor"
	const public explicit_return_type "status_t"
	nparams 1
	  param in name "handle" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 296450 "flush"
	const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 296578 "sendAck"
	public explicit_return_type "void"
	nparams 2
	  param in name "events" explicit_type "ASensorEvent"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Send an ack for every wake_up sensor event that is set to WAKE_UP_SENSOR_EVENT_NEEDS_ACK."
      end

      operation 296706 "getLooper"
	const private explicit_return_type "sp<Looper>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 172546 // mSensorEventConnection (<directional composition>)
	relation 172546 *-->
	  stereotype "sp"
	  a role_name "mSensorEventConnection" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 172546 // mSensorEventConnection (<directional composition>)
	  b parent class_ref 179458 // ISensorEventConnection
      end

      classrelation 172674 // mSensorChannel (<directional composition>)
	relation 172674 *-->
	  stereotype "sp"
	  a role_name "mSensorChannel" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 172674 // mSensorChannel (<directional composition>)
	  b parent class_ref 168962 // BitTube
      end

      attribute 237570 "mLock"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 237698 "mLooper"
	private explicit_type "Looper"
	stereotype "sp"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 237826 "mRecBuffer"
	private explicit_type "ASensorEvent"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 237954 "mAvailable"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 238082 "mConsumed"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 238210 "mNumAcksToSend"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 182658 "SensorManager"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 172802 // <generalisation>
	relation 172802 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 172802 // <generalisation>
	  b parent class_ref 182530 // ASensorManager
      end

      classrelation 172930 // <generalisation>
	relation 172930 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 172930 // <generalisation>
	  b parent class_ref 182786 // typedef22
      end

      operation 296834 "SensorManager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 296962 "~SensorManager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 297090 "getSensorList"
	const public explicit_return_type "ssize_t"
	nparams 1
	  param in name "list" type class_ref 181762 // Sensor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * const * * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * const * * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 297218 "getDefaultSensor"
	public return_type class_ref 181762 // Sensor
	nparams 1
	  param in name "type" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 297346 "createEventQueue"
	public explicit_return_type "sp<SensorEventQueue>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 297474 "sensorManagerDied"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " DeathRecipient interface"
      end

      operation 297602 "assertStateLocked"
	const private explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 238338 "mLock"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 173058 // mSensorServer (<directional composition>)
	relation 173058 *-->
	  stereotype "sp"
	  a role_name "mSensorServer" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 173058 // mSensorServer (<directional composition>)
	  b parent class_ref 179842 // ISensorServer
      end

      attribute 238466 "mSensorList"
	const_attribute private type class_ref 181762 // Sensor
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 173186 // mSensors (<directional composition>)
	relation 173186 *-->
	  stereotype "Vector"
	  a role_name "mSensors" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 173186 // mSensors (<directional composition>)
	  b parent class_ref 181762 // Sensor
      end

      attribute 238594 "mDeathObserver"
	private explicit_type "IBinder::DeathRecipient"
	stereotype "sp"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 182786 "typedef22"
      visibility package stereotype "typedef" explicit_base_type "Singleton<SensorManager>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 182914 "StreamSplitter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " StreamSplitter is an autonomous class that manages one input BufferQueue
 and multiple output BufferQueues. By using the buffer attach and detach logic
 in BufferQueue, it is able to present the illusion of a single split
 BufferQueue, where each buffer queued to the input is available to be
 acquired by each of the outputs, and is able to be dequeued by the input
 again only once all of the outputs have released it."
      classrelation 173314 // <generalisation>
	relation 173314 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 173314 // <generalisation>
	  b parent class_ref 171906 // BnConsumerListener
      end

      operation 297730 "createSplitter"
	class_operation public explicit_return_type "status_t"
	nparams 2
	  param in name "inputQueue" explicit_type "sp<IGraphicBufferConsumer>"
	  param inout name "outSplitter" explicit_type "sp<StreamSplitter>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " createSplitter creates a new splitter, outSplitter, using inputQueue as
 the input BufferQueue. Output BufferQueues must be added using addOutput
 before queueing any buffers to the input.

 A return value other than NO_ERROR means that an error has occurred and
 outSplitter has not been modified. BAD_VALUE is returned if inputQueue or
 outSplitter is NULL. See IGraphicBufferConsumer::consumerConnect for
 explanations of other error codes."
      end

      operation 297858 "addOutput"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "outputQueue" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " addOutput adds an output BufferQueue to the splitter. The splitter
 connects to outputQueue as a CPU producer, and any buffers queued
 to the input will be queued to each output. It is assumed that all of the
 outputs are added before any buffers are queued on the input. If any
 output is abandoned by its consumer, the splitter will abandon its input
 queue (see onAbandoned).

 A return value other than NO_ERROR means that an error has occurred and
 outputQueue has not been added to the splitter. BAD_VALUE is returned if
 outputQueue is NULL. See IGraphicBufferProducer::connect for explanations
 of other error codes."
      end

      operation 297986 "setName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setName sets the consumer name of the input queue"
      end

      operation 298114 "onFrameAvailable"
	cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " From IConsumerListener

 During this callback, we store some tracking information, detach the
 buffer from the input, and attach it to each of the outputs. This call
 can block if there are too many outstanding buffers. If it blocks, it
 will resume when onBufferReleasedByOutput releases a buffer back to the
 input."
      end

      operation 298242 "onBuffersReleased"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment " From IConsumerListener
 We don't care about released buffers because we detach each buffer as
 soon as we acquire it. See the comment for onBufferReleased below for
 some clarifying notes about the name."
      end

      operation 298370 "onSidebandStreamChanged"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment " From IConsumerListener
 We don't care about sideband streams, since we won't be splitting them"
      end

      operation 298498 "onBufferReleasedByOutput"
	private explicit_return_type "void"
	nparams 1
	  param in name "from" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " This is the implementation of the onBufferReleased callback from
 IProducerListener. It gets called from an OutputListener (see below), and
 'from' is which producer interface from which the callback was received.

 During this callback, we detach the buffer from the output queue that
 generated the callback, update our state tracking to see if this is the
 last output releasing the buffer, and if so, release it to the input.
 If we release the buffer to the input, we allow a blocked
 onFrameAvailable call to proceed."
      end

      operation 298626 "onAbandonedLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " When this is called, the splitter disconnects from (i.e., abandons) its
 input queue and signals any waiting onFrameAvailable calls to wake up.
 It still processes callbacks from other outputs, but only detaches their
 buffers so they can continue operating until they run out of buffers to
 acquire. This must be called with mMutex locked."
      end

      class 183042 "OutputListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 173442 // <generalisation>
	  relation 173442 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 173442 // <generalisation>
	    b parent class_ref 183170 // typedef23
	end

	classrelation 173570 // <generalisation>
	  relation 173570 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 173570 // <generalisation>
	    b parent class_ref 183298 // typedef24
	end

	operation 298754 "OutputListener"
	  public explicit_return_type ""
	  nparams 2
	    param in name "splitter" explicit_type "sp<StreamSplitter>"
	    param in name "output" explicit_type "sp<IGraphicBufferProducer>"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 298882 "~OutputListener"
	  cpp_virtual public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 299010 "onBufferReleased"
	  cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment " From IProducerListener"
	end

	operation 299138 "binderDied"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "who" explicit_type "wp<IBinder>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment " From IBinder::DeathRecipient"
	end

	classrelation 173698 // mSplitter (<directional composition>)
	  relation 173698 *-->
	    stereotype "sp"
	    a role_name "mSplitter" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 173698 // mSplitter (<directional composition>)
	    b parent class_ref 182914 // StreamSplitter
	end

	classrelation 173826 // mOutput (<directional composition>)
	  relation 173826 *-->
	    stereotype "sp"
	    a role_name "mOutput" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 173826 // mOutput (<directional composition>)
	    b parent class_ref 178434 // IGraphicBufferProducer
	end
      end

      class 183170 "typedef23"
	visibility package stereotype "typedef" explicit_base_type "BnProducerListener"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 183298 "typedef24"
	visibility package stereotype "typedef" explicit_base_type "IBinder::DeathRecipient"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 183426 "BufferTracker"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 173954 // <generalisation>
	  relation 173954 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 173954 // <generalisation>
	    b parent class_ref 183554 // typedef25
	end

	operation 299266 "BufferTracker"
	  public explicit_return_type ""
	  nparams 1
	    param in name "buffer" explicit_type "sp<GraphicBuffer>"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 299394 "getBuffer"
	  const cpp_inline public explicit_return_type "sp<GraphicBuffer>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mBuffer; };
"
	  
	  
	  
	  
	end

	operation 299522 "getMergedFence"
	  const cpp_inline public explicit_return_type "sp<Fence>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mMergedFence; };
"
	  
	  
	  
	  
	end

	operation 299650 "mergeFence"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "with" explicit_type "sp<Fence>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 299778 "incrementReleaseCountLocked"
	  cpp_inline public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ++mReleaseCount; };
"
	  
	  
	  
	  
	  comment " Returns the new value
 Only called while mMutex is held"
	end

	operation 299906 "~BufferTracker"
	  private explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 300034 "BufferTracker"
	  private explicit_return_type ""
	  nparams 1
	    param in name "other" type class_ref 183426 // BufferTracker
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	  comment " Disallow copying"
	end

	operation 300162 "operator ="
	  private return_type class_ref 183426 // BufferTracker
	  nparams 1
	    param in name "other" type class_ref 183426 // BufferTracker
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 238722 "mBuffer"
	  private explicit_type "GraphicBuffer"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " One instance that holds this native handle"
	end

	attribute 238850 "mMergedFence"
	  private explicit_type "Fence"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 238978 "mReleaseCount"
	  private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 183554 "typedef25"
	visibility package stereotype "typedef" explicit_base_type "LightRefBase<BufferTracker>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 300290 "StreamSplitter"
	private explicit_return_type ""
	nparams 1
	  param in name "inputQueue" explicit_type "sp<IGraphicBufferConsumer>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Only called from createSplitter"
      end

      operation 300418 "~StreamSplitter"
	cpp_virtual private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Must be accessed through RefBase"
      end

      attribute 239106 "MAX_OUTSTANDING_BUFFERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 239234 "mIsAbandoned"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAbandoned is set to true when an output dies. Once the StreamSplitter
 has been abandoned, it will continue to detach buffers from other
 outputs, but it will disconnect from the input and not attempt to
 communicate with it further."
      end

      attribute 239362 "mMutex"
	private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 239490 "mReleaseCondition"
	private explicit_type "Condition"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 239618 "mOutstandingBuffers"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 174082 // mInput (<directional composition>)
	relation 174082 *-->
	  stereotype "sp"
	  a role_name "mInput" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 174082 // mInput (<directional composition>)
	  b parent class_ref 171522 // IGraphicBufferConsumer
      end

      attribute 239746 "mOutputs"
	private explicit_type "sp<IGraphicBufferProducer> "
	stereotype "Vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 239874 "mBuffers"
	private explicit_type "uint64_t, sp<BufferTracker> "
	stereotype "KeyedVector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Map of GraphicBuffer IDs (GraphicBuffer::getId()) to buffer tracking
 objects (which are mostly for counting how many outputs have released the
 buffer, but also contain merged release fences)."
      end
    end

    class 183682 "Surface"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * An implementation of ANativeWindow that feeds graphics buffers into a
 * BufferQueue.
 *
 * This is typically used by programs that want to render frames through
 * some means (maybe OpenGL, a software renderer, or a hardware decoder)
 * and have the frames they create forwarded to SurfaceFlinger for
 * compositing.  For example, a video decoder could render a frame and call
 * eglSwapBuffers(), which invokes ANativeWindow callbacks defined by
 * Surface.  Surface then forwards the buffers through Binder IPC
 * to the BufferQueue's producer interface, providing the new frame to a
 * consumer such as GLConsumer."
      classrelation 174210 // <generalisation>
	relation 174210 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 174210 // <generalisation>
	  b parent class_ref 183810 // typedef26
      end

      operation 300546 "Surface"
	public explicit_return_type ""
	nparams 2
	  param in name "bufferProducer" explicit_type "sp<IGraphicBufferProducer>"
	  param in name "controlledByApp" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "     * creates a Surface from the given IGraphicBufferProducer (which concrete
     * implementation is a BufferQueue).
     *
     * Surface is mainly state-less while it's disconnected, it can be
     * viewed as a glorified IGraphicBufferProducer holder. It's therefore
     * safe to create other Surfaces from the same IGraphicBufferProducer.
     *
     * However, once a Surface is connected, it'll prevent other Surfaces
     * referring to the same IGraphicBufferProducer to become connected and
     * therefore prevent them to be used as actual producers of buffers.
     *
     * the controlledByApp flag indicates that this Surface (producer) is
     * controlled by the application. This flag is used at connect time."
      end

      operation 300674 "getIGraphicBufferProducer"
	const public explicit_return_type "sp<IGraphicBufferProducer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getIGraphicBufferProducer() returns the IGraphicBufferProducer this
     * Surface was created with. Usually it's an error to use the
     * IGraphicBufferProducer while the Surface is connected."
      end

      operation 300802 "isValid"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "surface" explicit_type "sp<Surface>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return surface != NULL && surface->getIGraphicBufferProducer() != NULL;
    };
"
	
	
	
	
	comment " convenience function to check that the given surface is non NULL as
     * well as its IGraphicBufferProducer "
      end

      operation 300930 "setSidebandStream"
	public explicit_return_type "void"
	nparams 1
	  param in name "stream" explicit_type "sp<NativeHandle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Attaches a sideband buffer stream to the Surface's IGraphicBufferProducer.
     *
     * A sideband stream is a device-specific mechanism for passing buffers
     * from the producer to the consumer without using dequeueBuffer/
     * queueBuffer. If a sideband stream is present, the consumer can choose
     * whether to acquire buffers from the sideband stream or from the queued
     * buffers.
     *
     * Passing NULL or a different stream handle will detach the previous
     * handle if any."
      end

      operation 301058 "allocateBuffers"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Allocates buffers based on the current dimensions/format.
     *
     * This function will allocate up to the maximum number of buffers
     * permitted by the current BufferQueue configuration. It will use the
     * default format and dimensions. This is most useful to avoid an allocation
     * delay during dequeueBuffer. If there are already the maximum number of
     * buffers allocated, this function has no effect."
      end

      operation 301186 "~Surface"
	cpp_virtual protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 301314 "operator ="
	private return_type class_ref 183682 // Surface
	nparams 1
	  param in name "rhs" type class_ref 183682 // Surface
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " can't be copied"
      end

      operation 301442 "Surface"
	private explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 183682 // Surface
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 301570 "hook_cancelBuffer"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "window" explicit_type "ANativeWindow"
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param in name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " ANativeWindow hooks"
      end

      operation 301698 "hook_dequeueBuffer"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "window" explicit_type "ANativeWindow"
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param inout name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * * ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 301826 "hook_perform"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "window" explicit_type "ANativeWindow"
	  param in name "operation" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ...${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ...${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 301954 "hook_query"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "window" explicit_type "ANativeWindow"
	  param in name "what" explicit_type "int"
	  param inout name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 302082 "hook_queueBuffer"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "window" explicit_type "ANativeWindow"
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param in name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 302210 "hook_setSwapInterval"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "window" explicit_type "ANativeWindow"
	  param in name "interval" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 302338 "hook_cancelBuffer_DEPRECATED"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "window" explicit_type "ANativeWindow"
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 302466 "hook_dequeueBuffer_DEPRECATED"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "window" explicit_type "ANativeWindow"
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 302594 "hook_lockBuffer_DEPRECATED"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "window" explicit_type "ANativeWindow"
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 302722 "hook_queueBuffer_DEPRECATED"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "window" explicit_type "ANativeWindow"
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 302850 "dispatchConnect"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 302978 "dispatchDisconnect"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 303106 "dispatchSetBufferCount"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 303234 "dispatchSetBuffersGeometry"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 303362 "dispatchSetBuffersDimensions"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 303490 "dispatchSetBuffersUserDimensions"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 303618 "dispatchSetBuffersFormat"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 303746 "dispatchSetScalingMode"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 303874 "dispatchSetBuffersTransform"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 304002 "dispatchSetBuffersStickyTransform"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 304130 "dispatchSetBuffersTimestamp"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 304258 "dispatchSetCrop"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 304386 "dispatchSetPostTransformCrop"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 304514 "dispatchSetUsage"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 304642 "dispatchLock"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 304770 "dispatchUnlockAndPost"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 304898 "dispatchSetSidebandStream"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 305026 "dequeueBuffer"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param inout name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 305154 "cancelBuffer"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param in name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 305282 "queueBuffer"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param in name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 305410 "perform"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "operation" explicit_type "int"
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 305538 "query"
	const cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "what" explicit_type "int"
	  param inout name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 305666 "setSwapInterval"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "interval" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 305794 "lockBuffer_DEPRECATED"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 305922 "connect"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 306050 "disconnect"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 306178 "setBufferCount"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 306306 "setBuffersDimensions"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 306434 "setBuffersUserDimensions"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 306562 "setBuffersFormat"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 306690 "setScalingMode"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 306818 "setBuffersTransform"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "transform" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 306946 "setBuffersStickyTransform"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "transform" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 307074 "setBuffersTimestamp"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "timestamp" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 307202 "setCrop"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "rect" explicit_type "Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 307330 "setUsage"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "reqUsage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 307458 "lock"
	cpp_virtual public explicit_return_type "int"
	nparams 2
	  param inout name "outBuffer" explicit_type "ANativeWindow_Buffer"
	  param inout name "inOutDirtyBounds" explicit_type "ARect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 307586 "unlockAndPost"
	cpp_virtual public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 183938 "anonymous24"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 240002 "NUM_BUFFER_SLOTS"
	  public type class_ref 183938 // anonymous24
	  init_value " BufferQueue::NUM_BUFFER_SLOTS "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 184066 "anonymous25"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 240130 "DEFAULT_FORMAT"
	  public type class_ref 184066 // anonymous25
	  init_value " PIXEL_FORMAT_RGBA_8888 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 307714 "freeAllBuffers"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 307842 "getSlotFromBufferLocked"
	const private explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "android_native_buffer_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 184194 "BufferSlot"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 240258 "buffer"
	  public explicit_type "GraphicBuffer"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 240386 "dirtyRegion"
	  public explicit_type "Region"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      classrelation 174338 // mGraphicBufferProducer (<directional composition>)
	relation 174338 *-->
	  stereotype "sp"
	  a role_name "mGraphicBufferProducer" private
	    comment " mSurfaceTexture is the interface to the surface texture server. All
 operations on the surface texture client ultimately translate into
 interactions with the server using this interface.
 TODO: rename to mBufferProducer"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 174338 // mGraphicBufferProducer (<directional composition>)
	  b parent class_ref 178434 // IGraphicBufferProducer
      end

      classrelation 174466 // mSlots (<directional composition>)
	relation 174466 *-->
	  a role_name "mSlots" multiplicity "[NUM_BUFFER_SLOTS]" private
	    comment " mSlots stores the buffers that have been allocated for each buffer slot.
 It is initialized to null pointers, and gets filled in with the result of
 IGraphicBufferProducer::requestBuffer when the client dequeues a buffer from a
 slot that has not yet been used. The buffer allocated to a slot will also
 be replaced if the requested buffer usage or geometry differs from that
 of the buffer allocated to a slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    classrelation_ref 174466 // mSlots (<directional composition>)
	  b parent class_ref 184194 // BufferSlot
      end

      attribute 240514 "mReqWidth"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mReqWidth is the buffer width that will be requested at the next dequeue
 operation. It is initialized to 1."
      end

      attribute 240642 "mReqHeight"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mReqHeight is the buffer height that will be requested at the next
 dequeue operation. It is initialized to 1."
      end

      attribute 240770 "mReqFormat"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mReqFormat is the buffer pixel format that will be requested at the next
 deuque operation. It is initialized to PIXEL_FORMAT_RGBA_8888."
      end

      attribute 240898 "mReqUsage"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mReqUsage is the set of buffer usage flags that will be requested
 at the next deuque operation. It is initialized to 0."
      end

      attribute 241026 "mTimestamp"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTimestamp is the timestamp that will be used for the next buffer queue
 operation. It defaults to NATIVE_WINDOW_TIMESTAMP_AUTO, which means that
 a timestamp is auto-generated when queueBuffer is called."
      end

      attribute 241154 "mCrop"
	private explicit_type "Rect"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCrop is the crop rectangle that will be used for the next buffer
 that gets queued. It is set by calling setCrop."
      end

      attribute 241282 "mScalingMode"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mScalingMode is the scaling mode that will be used for the next
 buffers that get queued. It is set by calling setScalingMode."
      end

      attribute 241410 "mTransform"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTransform is the transform identifier that will be used for the next
 buffer that gets queued. It is set by calling setTransform."
      end

      attribute 241538 "mStickyTransform"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mStickyTransform is a transform that is applied on top of mTransform
 in each buffer that is queued.  This is typically used to force the
 compositor to apply a transform, and will prevent the transform hint
 from being set by the compositor."
      end

      attribute 241666 "mDefaultWidth"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultWidth is default width of the buffers, regardless of the
 native_window_set_buffers_dimensions call."
      end

      attribute 241794 "mDefaultHeight"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultHeight is default height of the buffers, regardless of the
 native_window_set_buffers_dimensions call."
      end

      attribute 241922 "mUserWidth"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mUserWidth, if non-zero, is an application-specified override
 of mDefaultWidth.  This is lower priority than the width set by
 native_window_set_buffers_dimensions."
      end

      attribute 242050 "mUserHeight"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mUserHeight, if non-zero, is an application-specified override
 of mDefaultHeight.  This is lower priority than the height set
 by native_window_set_buffers_dimensions."
      end

      attribute 242178 "mTransformHint"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTransformHint is the transform probably applied to buffers of this
 window. this is only a hint, actual transform may differ."
      end

      attribute 242306 "mProducerControlledByApp"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mProducerControlledByApp whether this buffer producer is controlled
 by the application"
      end

      attribute 242434 "mSwapIntervalZero"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mSwapIntervalZero set if we should drop buffers at queue() time to
 achieve an asynchronous swap interval"
      end

      attribute 242562 "mConsumerRunningBehind"
	private explicit_type "bool"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConsumerRunningBehind whether the consumer is running more than
 one buffer behind the producer."
      end

      attribute 242690 "mMutex"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMutex is the mutex used to prevent concurrent access to the member
 variables of Surface objects. It must be locked whenever the
 member variables are accessed."
      end

      attribute 242818 "mLockedBuffer"
	private explicit_type "GraphicBuffer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " must be used from the lock/unlock thread"
      end

      attribute 242946 "mPostedBuffer"
	private explicit_type "GraphicBuffer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243074 "mConnectedToCpu"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243202 "mDirtyRegion"
	private explicit_type "Region"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " must be accessed from lock/unlock thread only"
      end
    end

    class 183810 "typedef26"
      visibility package stereotype "typedef" explicit_base_type "ANativeObjectBase<ANativeWindow, Surface, RefBase>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 184322 "SurfaceComposerClient"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      classrelation 174594 // <generalisation>
	relation 174594 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 174594 // <generalisation>
	  b parent class_ref 169090 // typedef1
      end

      extra_member 142338 "friend"
	
	cpp "
    friend class Composer;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 307970 "SurfaceComposerClient"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 308098 "~SurfaceComposerClient"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 308226 "initCheck"
	const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Always make sure we could initialize"
      end

      operation 308354 "connection"
	const public explicit_return_type "sp<IBinder>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return the connection of this client"
      end

      operation 308482 "dispose"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Forcibly remove connection before all references have gone away."
      end

      operation 308610 "linkToComposerDeath"
	public explicit_return_type "status_t"
	nparams 3
	  param in name "recipient" explicit_type "sp<IBinder::DeathRecipient>"
	  param inout name "cookie" explicit_type "void"
	    defaultvalue "NULL"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " callback when the composer is dies"
      end

      operation 308738 "getDisplayConfigs"
	class_operation public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "configs" explicit_type "Vector<DisplayInfo>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Get a list of supported configurations for a given display"
      end

      operation 308866 "getDisplayInfo"
	class_operation public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "info" explicit_type "DisplayInfo"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Get the DisplayInfo for the currently-active configuration"
      end

      operation 308994 "getActiveConfig"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Get the index of the current active configuration (relative to the list
 returned by getDisplayInfo)"
      end

      operation 309122 "setActiveConfig"
	class_operation public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set a new active configuration using an index relative to the list
 returned by getDisplayInfo"
      end

      operation 309250 "setDisplayPowerMode"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Triggers screen on/off or low power mode and waits for it to complete "
      end

      operation 309378 "createSurface"
	public explicit_return_type "sp<SurfaceControl>"
	nparams 5
	  param in name "name" explicit_type "String8"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "PixelFormat"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0  // usage flags
    "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " ------------------------------------------------------------------------
 surface creation / destruction
! Create a surface"
      end

      operation 309506 "createDisplay"
	class_operation public explicit_return_type "sp<IBinder>"
	nparams 2
	  param in name "displayName" explicit_type "String8"
	  param in name "secure" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! Create a virtual display"
      end

      operation 309634 "destroyDisplay"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! Destroy a virtual display"
      end

      operation 309762 "getBuiltInDisplay"
	class_operation public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "id" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! Get the token for the existing default displays.
! Possible values for id are eDisplayIdMain and eDisplayIdHdmi."
      end

      operation 309890 "openGlobalTransaction"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " ------------------------------------------------------------------------
 Composer parameters
 All composer parameters must be changed within a transaction
 several surfaces can be updated in one transaction, all changes are
 committed at once when the transaction is closed.
 closeGlobalTransaction() requires an IPC with the server.
! Open a composer transaction on all active SurfaceComposerClients."
      end

      operation 310018 "closeGlobalTransaction"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "synchronous" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! Close a composer transaction on all active SurfaceComposerClients."
      end

      operation 310146 "setAnimationTransaction"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! Flag the currently open transaction as an animation transaction."
      end

      operation 310274 "hide"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "id" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 310402 "show"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "id" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 310530 "setFlags"
	public explicit_return_type "status_t"
	nparams 3
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "flags" explicit_type "uint32_t"
	  param in name "mask" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 310658 "setTransparentRegionHint"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "transparent" explicit_type "Region"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 310786 "setLayer"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "layer" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 310914 "setAlpha"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "alpha" explicit_type "float"
	    defaultvalue "1.0f"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 311042 "setMatrix"
	public explicit_return_type "status_t"
	nparams 5
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "dsdx" explicit_type "float"
	  param in name "dtdx" explicit_type "float"
	  param in name "dsdy" explicit_type "float"
	  param in name "dtdy" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 311170 "setPosition"
	public explicit_return_type "status_t"
	nparams 3
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 311298 "setSize"
	public explicit_return_type "status_t"
	nparams 3
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 311426 "setCrop"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "crop" explicit_type "Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 311554 "setLayerStack"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "layerStack" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 311682 "destroySurface"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "id" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 311810 "clearLayerFrameStats"
	const public explicit_return_type "status_t"
	nparams 1
	  param in name "token" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 311938 "getLayerFrameStats"
	const public explicit_return_type "status_t"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param inout name "outStats" explicit_type "FrameStats"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 312066 "clearAnimationFrameStats"
	class_operation public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 312194 "getAnimationFrameStats"
	class_operation public explicit_return_type "status_t"
	nparams 1
	  param inout name "outStats" explicit_type "FrameStats"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 312322 "setDisplaySurface"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "bufferProducer" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 312450 "setDisplayLayerStack"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "layerStack" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 312578 "setDisplaySize"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 312706 "setDisplayProjection"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "orientation" explicit_type "uint32_t"
	  param in name "layerStackRect" explicit_type "Rect"
	  param in name "displayRect" explicit_type "Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " setDisplayProjection() defines the projection of layer stacks
     * to a given display.
     *
     * - orientation defines the display's orientation.
     * - layerStackRect defines which area of the window manager coordinate
     * space will be used.
     * - displayRect defines where on the display will layerStackRect be
     * mapped to. displayRect is specified post-orientation, that is
     * it uses the orientation seen by the end-user."
      end

      operation 312834 "onFirstRef"
	cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 312962 "getComposer"
	private explicit_return_type "Composer"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 243330 "mLock"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243458 "mStatus"
	private explicit_type "status_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 174722 // mClient (<directional composition>)
	relation 174722 *-->
	  stereotype "sp"
	  a role_name "mClient" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 174722 // mClient (<directional composition>)
	  b parent class_ref 181122 // ISurfaceComposerClient
      end

      attribute 243586 "mComposer"
	private explicit_type "Composer"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 184450 "ScreenshotClient"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      operation 313090 "capture"
	class_operation public explicit_return_type "status_t"
	nparams 8
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "producer" explicit_type "sp<IGraphicBufferProducer>"
	  param in name "sourceCrop" explicit_type "Rect"
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " if cropping isn't required, callers may pass in a default Rect, e.g.:
   capture(display, producer, Rect(), reqWidth, ...);"
      end

      classrelation 174850 // mCpuConsumer (<directional composition>)
	relation 174850 *-->
	  stereotype "sp"
	  a role_name "mCpuConsumer" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 174850 // mCpuConsumer (<directional composition>)
	  b parent class_ref 174850 // CpuConsumer
      end

      classrelation 174978 // mProducer (<directional composition>)
	relation 174978 *-->
	  stereotype "sp"
	  a role_name "mProducer" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 174978 // mProducer (<directional composition>)
	  b parent class_ref 178434 // IGraphicBufferProducer
      end

      classrelation 175106 // mBuffer (<directional composition>)
	relation 175106 *-->
	  a role_name "mBuffer" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 175106 // mBuffer (<directional composition>)
	  b parent class_ref 175106 // LockedBuffer
      end

      attribute 243714 "mHaveBuffer"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 313218 "ScreenshotClient"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 313346 "~ScreenshotClient"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 313474 "update"
	public explicit_return_type "status_t"
	nparams 3
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "sourceCrop" explicit_type "Rect"
	  param in name "useIdentityTransform" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " frees the previous screenshot and captures a new one
 if cropping isn't required, callers may pass in a default Rect, e.g.:
   update(display, Rect(), useIdentityTransform);"
      end

      operation 313602 "update"
	public explicit_return_type "status_t"
	nparams 5
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "sourceCrop" explicit_type "Rect"
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 313730 "update"
	public explicit_return_type "status_t"
	nparams 7
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "sourceCrop" explicit_type "Rect"
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 313858 "update"
	public explicit_return_type "status_t"
	nparams 8
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "sourceCrop" explicit_type "Rect"
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	  param in name "rotation" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 313986 "getCpuConsumer"
	const public explicit_return_type "sp<CpuConsumer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 314114 "release"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " release memory occupied by the screenshot"
      end

      operation 314242 "getPixels"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " pixels are valid until this object is freed or
 release() or update() is called"
      end

      operation 314370 "getWidth"
	const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 314498 "getHeight"
	const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 314626 "getFormat"
	const public explicit_return_type "PixelFormat"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 314754 "getStride"
	const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 314882 "getSize"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " size of allocated memory in bytes"
      end
    end

    class 184578 "SurfaceControl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      classrelation 175234 // <generalisation>
	relation 175234 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 175234 // <generalisation>
	  b parent class_ref 169090 // typedef1
      end

      operation 315010 "isValid"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "surface" explicit_type "sp<SurfaceControl>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (surface != 0) && surface->isValid();
    };
"
	
	
	
	
      end

      operation 315138 "isValid"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mHandle!=0 && mClient!=0;
    };
"
	
	
	
	
      end

      operation 315266 "isSameSurface"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" explicit_type "sp<SurfaceControl>"
	  param in name "rhs" explicit_type "sp<SurfaceControl>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 315394 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " release surface data from java"
      end

      operation 315522 "setLayerStack"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "layerStack" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 315650 "setLayer"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "layer" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 315778 "setPosition"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 315906 "setSize"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 316034 "hide"
	public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 316162 "show"
	public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 316290 "setFlags"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "flags" explicit_type "uint32_t"
	  param in name "mask" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 316418 "setTransparentRegionHint"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "transparent" explicit_type "Region"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 316546 "setAlpha"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "alpha" explicit_type "float"
	    defaultvalue "1.0f"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 316674 "setMatrix"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "dsdx" explicit_type "float"
	  param in name "dtdx" explicit_type "float"
	  param in name "dsdy" explicit_type "float"
	  param in name "dtdy" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 316802 "setCrop"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "crop" explicit_type "Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 316930 "writeSurfaceToParcel"
	class_operation public explicit_return_type "status_t"
	nparams 2
	  param in name "control" explicit_type "sp<SurfaceControl>"
	  param inout name "parcel" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 317058 "getSurface"
	const public explicit_return_type "sp<Surface>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 317186 "clearLayerFrameStats"
	const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 317314 "getLayerFrameStats"
	const public explicit_return_type "status_t"
	nparams 1
	  param inout name "outStats" explicit_type "FrameStats"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 317442 "operator ="
	private return_type class_ref 184578 // SurfaceControl
	nparams 1
	  param inout name "rhs" type class_ref 184578 // SurfaceControl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " can't be copied"
      end

      operation 317570 "SurfaceControl"
	private explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 184578 // SurfaceControl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      classrelation 175362 // <dependency>
	relation 175362 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 175362 // <dependency>
	  b parent class_ref 184322 // SurfaceComposerClient
      end

      classrelation 175490 // <dependency>
	relation 175490 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 175490 // <dependency>
	  b parent class_ref 183682 // Surface
      end

      operation 317698 "SurfaceControl"
	private explicit_return_type ""
	nparams 3
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "handle" explicit_type "sp<IBinder>"
	  param in name "gbp" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 317826 "~SurfaceControl"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 317954 "validate"
	const private explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 318082 "destroy"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 175618 // mClient (<directional composition>)
	relation 175618 *-->
	  stereotype "sp"
	  a role_name "mClient" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 175618 // mClient (<directional composition>)
	  b parent class_ref 184322 // SurfaceComposerClient
      end

      attribute 243842 "mHandle"
	private explicit_type "IBinder"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 175746 // mGraphicBufferProducer (<directional composition>)
	relation 175746 *-->
	  stereotype "sp"
	  a role_name "mGraphicBufferProducer" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 175746 // mGraphicBufferProducer (<directional composition>)
	  b parent class_ref 178434 // IGraphicBufferProducer
      end

      attribute 243970 "mLock"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 175874 // mSurfaceData (<directional composition>)
	relation 175874 *-->
	  stereotype "sp"
	  a role_name "mSurfaceData" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 175874 // mSurfaceData (<directional composition>)
	  b parent class_ref 183682 // Surface
      end
    end

    class 184706 "ComposerService"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------
 This holds our connection to the composer service (i.e. SurfaceFlinger).
 If the remote side goes away, we will re-establish the connection.
 Users of this class should not retain the value from
 getComposerService() for an extended period.

 (It's not clear that using Singleton is useful here anymore.)"
      classrelation 176002 // <generalisation>
	relation 176002 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 176002 // <generalisation>
	  b parent class_ref 184834 // typedef5
      end

      attribute 244098 "mComposerService"
	private explicit_type "ISurfaceComposer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 244226 "mDeathObserver"
	private explicit_type "IBinder::DeathRecipient"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 244354 "mLock"
	private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 318210 "ComposerService"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 318338 "connectLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 318466 "composerServiceDied"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      extra_member 142466 "friend"
	
	cpp "    friend class Singleton<ComposerService>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 318594 "getComposerService"
	class_operation public explicit_return_type "sp<ISurfaceComposer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Get a connection to the Composer Service.  This will block until
 a connection is established."
      end
    end

    class 184834 "typedef5"
      visibility package stereotype "typedef" explicit_base_type "Singleton<ComposerService>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 184962 "layer_state_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Used to communicate layer information between SurfaceFlinger and its clients."
      class 185090 "anonymous1"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 244482 "eLayerHidden"
	  public type class_ref 185090 // anonymous1
	  init_value " 0x01"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 244610 "eLayerOpaque"
	  public type class_ref 185090 // anonymous1
	  init_value " 0x02"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 185218 "anonymous2"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 244738 "ePositionChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000001"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 244866 "eLayerChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000002"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 244994 "eSizeChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000004"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 245122 "eAlphaChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000008"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 245250 "eMatrixChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000010"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 245378 "eTransparentRegionChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000020"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 245506 "eVisibilityChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000040"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 245634 "eLayerStackChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000080"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 245762 "eCropChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000100"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 245890 "eOpacityChanged"
	  public type class_ref 185218 // anonymous2
	  init_value " 0x00000200"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 318722 "layer_state_t"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :   what(0),
            x(0), y(0), z(0), w(0), h(0), layerStack(0),
            alpha(0), flags(0), mask(0),
            reserved(0)
    {
        matrix.dsdx = matrix.dtdy = 1.0f;
        matrix.dsdy = matrix.dtdx = 0.0f;
        crop.makeInvalid();
    };
"
	
	
	
	
      end

      operation 318850 "write"
	const public explicit_return_type "status_t"
	nparams 1
	  param inout name "output" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 318978 "read"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "input" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 185346 "matrix22_t"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 246018 "dsdx"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 246146 "dtdx"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 246274 "dsdy"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 246402 "dtdy"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      attribute 246530 "surface"
	public explicit_type "IBinder"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 246658 "what"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 246786 "x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 246914 "y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 247042 "z"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 247170 "w"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 247298 "h"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 247426 "layerStack"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 247554 "alpha"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 247682 "flags"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 247810 "mask"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 247938 "reserved"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 176130 // matrix (<directional composition>)
	relation 176130 *-->
	  a role_name "matrix" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 176130 // matrix (<directional composition>)
	  b parent class_ref 185346 // matrix22_t
      end

      attribute 248066 "crop"
	public explicit_type "Rect"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 248194 "transparentRegion"
	public explicit_type "Region"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " non POD must be last. see write/read"
      end
    end

    class 185474 "ComposerState"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 248322 "client"
	public explicit_type "ISurfaceComposerClient"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 176258 // state (<directional composition>)
	relation 176258 *-->
	  a role_name "state" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 176258 // state (<directional composition>)
	  b parent class_ref 184962 // layer_state_t
      end

      operation 319106 "write"
	const public explicit_return_type "status_t"
	nparams 1
	  param inout name "output" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 319234 "read"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "input" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 185602 "DisplayState"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 185730 "anonymous3"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 248450 "eOrientationDefault"
	  public type class_ref 185730 // anonymous3
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 248578 "eOrientation90"
	  public type class_ref 185730 // anonymous3
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 248706 "eOrientation180"
	  public type class_ref 185730 // anonymous3
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 248834 "eOrientation270"
	  public type class_ref 185730 // anonymous3
	  init_value " 3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 248962 "eOrientationUnchanged"
	  public type class_ref 185730 // anonymous3
	  init_value " 4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 249090 "eOrientationSwapMask"
	  public type class_ref 185730 // anonymous3
	  init_value " 0x01
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 185858 "anonymous4"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 249218 "eSurfaceChanged"
	  public type class_ref 185858 // anonymous4
	  init_value " 0x01"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 249346 "eLayerStackChanged"
	  public type class_ref 185858 // anonymous4
	  init_value " 0x02"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 249474 "eDisplayProjectionChanged"
	  public type class_ref 185858 // anonymous4
	  init_value " 0x04"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 249602 "eDisplaySizeChanged"
	  public type class_ref 185858 // anonymous4
	  init_value " 0x08
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      attribute 249730 "what"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 249858 "token"
	public explicit_type "IBinder"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 249986 "surface"
	public explicit_type "IGraphicBufferProducer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 250114 "layerStack"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 250242 "orientation"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 250370 "viewport"
	public explicit_type "Rect"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 250498 "frame"
	public explicit_type "Rect"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 319362 "write"
	const public explicit_return_type "status_t"
	nparams 1
	  param inout name "output" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 319490 "read"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "input" explicit_type "Parcel"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 185986 "SyncFeatures"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 176386 // <generalisation>
	relation 176386 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 176386 // <generalisation>
	  b parent class_ref 186114 // typedef6
      end

      extra_member 142594 "friend"
	
	cpp "
    friend class Singleton<SyncFeatures>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      attribute 250626 "mHasNativeFenceSync"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 250754 "mHasFenceSync"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 250882 "mHasWaitSync"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 251010 "mString"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 319618 "SyncFeatures"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 319746 "useNativeFenceSync"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 319874 "useFenceSync"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 320002 "useWaitSync"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 320130 "toString"
	const public explicit_return_type "String8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 186114 "typedef6"
      visibility package stereotype "typedef" explicit_base_type "Singleton<SyncFeatures>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end
  end

  deploymentview 134658 "gui"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 135682 "anonymous4"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137090 // anonymous4
      end
    end

    artifact 136066 "anonymous5"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137474 // anonymous5
      end
    end

    artifact 136450 "anonymous6"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137858 // anonymous6
      end
    end

    artifact 136834 "anonymous7"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138242 // anonymous7
      end
    end

    artifact 137218 "anonymous8"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138626 // anonymous8
      end
    end

    artifact 137602 "anonymous9"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139010 // anonymous9
      end
    end

    artifact 137986 "anonymous10"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139394 // anonymous10
      end
    end

    artifact 138370 "anonymous11"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139778 // anonymous11
      end
    end

    artifact 139010 "anonymous12"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140418 // anonymous12
      end
    end

    artifact 155138 "BitTube"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 169090 // typedef1
	class_ref 168962 // BitTube
      end
    end

    artifact 155266 "BufferItem"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 169346 // typedef2
	class_ref 169218 // BufferItem
      end
    end

    artifact 155394 "BufferItemConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 169602 // BufferItemConsumer
      end
    end

    artifact 155522 "BufferQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 170114 // BufferQueue
      end
    end

    artifact 155650 "BufferQueueConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 172034 // BufferQueueConsumer
      end
    end

    artifact 155778 "BufferQueueCore"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 172546 // typedef3
	class_ref 172290 // BufferQueueCore
      end
    end

    artifact 156162 "BufferQueueProducer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 174082 // typedef4
	class_ref 172674 // BufferQueueProducer
      end
    end

    artifact 156290 "BufferSlot"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 173826 // BufferSlot
      end
    end

    artifact 156418 "ConsumerBase"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 169730 // ConsumerBase
      end
    end

    artifact 156546 "CpuConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 174850 // CpuConsumer
      end
    end

    artifact 156674 "DisplayEventReceiver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 175362 // DisplayEventReceiver
      end
    end

    artifact 156802 "GLConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 176130 // GLConsumer
      end
    end

    artifact 156930 "GraphicBufferAlloc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 176898 // GraphicBufferAlloc
      end
    end

    artifact 157058 "IConsumerListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 174338 // ConsumerListener
	class_ref 177154 // typedef8
	class_ref 173442 // IConsumerListener
	class_ref 177282 // typedef9
	class_ref 171906 // BnConsumerListener
      end
    end

    artifact 157186 "IDisplayEventConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 177410 // IDisplayEventConnection
	class_ref 177666 // typedef10
	class_ref 177538 // BnDisplayEventConnection
      end
    end

    artifact 157314 "IGraphicBufferAlloc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 173314 // IGraphicBufferAlloc
	class_ref 177794 // typedef11
	class_ref 177026 // BnGraphicBufferAlloc
      end
    end

    artifact 157442 "IGraphicBufferConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 171522 // IGraphicBufferConsumer
	class_ref 178306 // typedef13
	class_ref 172162 // BnGraphicBufferConsumer
      end
    end

    artifact 157570 "IGraphicBufferProducer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 178434 // IGraphicBufferProducer
	class_ref 178946 // typedef15
	class_ref 173954 // BnGraphicBufferProducer
      end
    end

    artifact 157698 "IProducerListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 179074 // ProducerListener
	class_ref 173570 // IProducerListener
	class_ref 179330 // typedef16
	class_ref 179202 // DummyProducerListener
      end
    end

    artifact 157826 "ISensorEventConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 179458 // ISensorEventConnection
	class_ref 179714 // typedef17
	class_ref 179586 // BnSensorEventConnection
      end
    end

    artifact 157954 "ISensorServer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 179842 // ISensorServer
	class_ref 180098 // typedef18
	class_ref 179970 // BnSensorServer
      end
    end

    artifact 158082 "ISurfaceComposer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 180226 // ISurfaceComposer
	class_ref 180866 // typedef19
	class_ref 180738 // BnSurfaceComposer
      end
    end

    artifact 158210 "ISurfaceComposerClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 181122 // ISurfaceComposerClient
	class_ref 181506 // typedef20
	class_ref 181378 // BnSurfaceComposerClient
      end
    end

    artifact 158466 "Sensor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 181890 // typedef21
	class_ref 181762 // Sensor
      end
    end

    artifact 158722 "SensorEventQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 182274 // SensorEventQueue
      end
    end

    artifact 158978 "SensorManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 182786 // typedef22
	class_ref 182658 // SensorManager
      end
    end

    artifact 159106 "StreamSplitter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 182914 // StreamSplitter
      end
    end

    artifact 159234 "Surface"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 183810 // typedef26
	class_ref 183682 // Surface
      end
    end

    artifact 159362 "SurfaceComposerClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 184322 // SurfaceComposerClient
	class_ref 184450 // ScreenshotClient
      end
    end

    artifact 159490 "SurfaceControl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 184578 // SurfaceControl
      end
    end

    artifact 159618 "ComposerService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 184834 // typedef5
	class_ref 184706 // ComposerService
      end
    end

    artifact 159746 "LayerState"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 184962 // layer_state_t
	class_ref 185474 // ComposerState
	class_ref 185602 // DisplayState
      end
    end

    artifact 159874 "SyncFeatures"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 186114 // typedef6
	class_ref 185986 // SyncFeatures
      end
    end
  end

  package_ref 142850 // android BufferQueueDefs
end
