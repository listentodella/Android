format 76
"tests" // gui::tests
  revision 1
  modified_by 2 "thisway_diy"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "L:/android_projects/uml_tmp_file/gui/tests/"
  cpp_src_dir "L:/android_projects/uml_tmp_file/gui/tests/"
  cpp_namespace "android"
  classview 134530 "tests"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 134530 "DisconnectWaiter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Note that GLConsumer will lose the notifications
 onBuffersReleased and onFrameAvailable as there is currently
 no way to forward the events.  This DisconnectWaiter will not let the
 disconnect finish until finishDisconnect() is called.  It will
 also block until a disconnect is called"
      classrelation 134530 // <generalisation>
	relation 134530 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134530 // <generalisation>
	  b parent class_ref 134658 // typedef1
      end

      operation 134530 "DisconnectWaiter"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
        mWaitForDisconnect(false),
        mPendingFrames(0) {
    };
"
	
	
	
	
      end

      operation 134658 "waitForFrame"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mMutex);
        while (mPendingFrames == 0) {
            mFrameCondition.wait(mMutex);
        }
        mPendingFrames--;
    };
"
	
	
	
	
      end

      operation 134786 "onFrameAvailable"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mMutex);
        mPendingFrames++;
        mFrameCondition.signal();
    };
"
	
	
	
	
      end

      operation 134914 "onBuffersReleased"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mMutex);
        while (!mWaitForDisconnect) {
            mDisconnectCondition.wait(mMutex);
        }
    };
"
	
	
	
	
      end

      operation 135042 "onSidebandStreamChanged"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 135170 "finishDisconnect"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mMutex);
        mWaitForDisconnect = true;
        mDisconnectCondition.signal();
    };
"
	
	
	
	
      end

      attribute 134530 "mMutex"
	private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 134658 "mWaitForDisconnect"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 134786 "mDisconnectCondition"
	private explicit_type "Condition"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 134914 "mPendingFrames"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 135042 "mFrameCondition"
	private explicit_type "Condition"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 134658 "typedef1"
      visibility package stereotype "typedef" explicit_base_type "BnConsumerListener"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 134786 "FrameWaiter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 134658 // <generalisation>
	relation 134658 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134658 // <generalisation>
	  b parent class_ref 134914 // typedef2
      end

      operation 135298 "FrameWaiter"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mPendingFrames(0) {
    };
"
	
	
	
	
      end

      operation 135426 "waitForFrame"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mMutex);
        while (mPendingFrames == 0) {
            mCondition.wait(mMutex);
        }
        mPendingFrames--;
    };
"
	
	
	
	
      end

      operation 135554 "onFrameAvailable"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mMutex);
        mPendingFrames++;
        mCondition.signal();
    };
"
	
	
	
	
      end

      attribute 135170 "mPendingFrames"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 135298 "mMutex"
	private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 135426 "mCondition"
	private explicit_type "Condition"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 134914 "typedef2"
      visibility package stereotype "typedef" explicit_base_type "GLConsumer::FrameAvailableListener"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 135042 "GLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 134786 // <generalisation>
	relation 134786 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134786 // <generalisation>
	  b parent class_ref 135170 // typedef3
      end

      operation 135682 "loadShader"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "shaderType" explicit_type "GLenum"
	  param in name "pSource" explicit_type "char"
	  param inout name "outShader" explicit_type "GLuint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 135810 "createProgram"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "pVertexSource" explicit_type "char"
	  param in name "pFragmentSource" explicit_type "char"
	  param inout name "outPgm" explicit_type "GLuint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 135938 "GLTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mEglDisplay(EGL_NO_DISPLAY),
            mEglSurface(EGL_NO_SURFACE),
            mEglContext(EGL_NO_CONTEXT) {
    };
"
	
	
	
	
      end

      operation 136066 "SetUp"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136194 "TearDown"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136322 "getConfigAttribs"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "EGLint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136450 "getContextAttribs"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "EGLint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136578 "getSurfaceWidth"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "EGLint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136706 "getSurfaceHeight"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "EGLint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136834 "createWindowSurface"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "EGLSurface"
	nparams 3
	  param in name "display" explicit_type "EGLDisplay"
	  param in name "config" explicit_type "EGLConfig"
	  param inout name "window" explicit_type "sp<ANativeWindow>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 136962 "checkPixel"
	preserve_cpp_body_indent protected explicit_return_type "::testing::AssertionResult"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "r" explicit_type "int"
	  param in name "g" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "tolerance" explicit_type "int"
	    defaultvalue "2"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 137090 "assertRectEq"
	preserve_cpp_body_indent protected explicit_return_type "::testing::AssertionResult"
	nparams 3
	  param in name "r1" explicit_type "Rect"
	  param in name "r2" explicit_type "Rect"
	  param in name "tolerance" explicit_type "int"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 135554 "mDisplaySecs"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 135682 "mComposerClient"
	protected explicit_type "SurfaceComposerClient"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 135810 "mSurfaceControl"
	protected explicit_type "SurfaceControl"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 135938 "mEglDisplay"
	protected explicit_type "EGLDisplay"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136066 "mEglSurface"
	protected explicit_type "EGLSurface"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136194 "mEglContext"
	protected explicit_type "EGLContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136322 "mGlConfig"
	protected explicit_type "EGLConfig"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 135170 "typedef3"
      visibility package stereotype "typedef" explicit_base_type "::testing::Test"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 135298 "SurfaceTextureFBOTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 134914 // <generalisation>
	relation 134914 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134914 // <generalisation>
	  b parent class_ref 135426 // SurfaceTextureGLTest
      end

      operation 137218 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLTest::SetUp();

        glGenFramebuffers(1, &mFbo);
        ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());

        glGenTextures(1, &mFboTex);
        glBindTexture(GL_TEXTURE_2D, mFboTex);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, getSurfaceWidth(),
                getSurfaceHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
        glBindTexture(GL_TEXTURE_2D, 0);
        ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());

        glBindFramebuffer(GL_FRAMEBUFFER, mFbo);
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
                GL_TEXTURE_2D, mFboTex, 0);
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
    };
"
	
	
	
	
      end

      operation 137346 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLTest::TearDown();

        glDeleteTextures(1, &mFboTex);
        glDeleteFramebuffers(1, &mFbo);
    };
"
	
	
	
	
      end

      attribute 136450 "mFbo"
	protected explicit_type "GLuint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136578 "mFboTex"
	protected explicit_type "GLuint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 135426 "SurfaceTextureGLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135042 // <generalisation>
	relation 135042 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135042 // <generalisation>
	  b parent class_ref 135042 // GLTest
      end

      class 135554 "anonymous1"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 136706 "TEX_ID"
	  public type class_ref 135554 // anonymous1
	  init_value " 123 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 137474 "SetUp"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        GLTest::SetUp();
        sp<IGraphicBufferProducer> producer;
        BufferQueue::createBufferQueue(&producer, &mConsumer);
        mST = new GLConsumer(mConsumer, TEX_ID, GLConsumer::TEXTURE_EXTERNAL,
                true, false);
        mSTC = new Surface(producer);
        mANW = mSTC;
        mTextureRenderer = new TextureRenderer(TEX_ID, mST);
        ASSERT_NO_FATAL_FAILURE(mTextureRenderer->SetUp());
        mFW = new FrameWaiter;
        mST->setFrameAvailableListener(mFW);
    };
"
	
	
	
	
      end

      operation 137602 "TearDown"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mTextureRenderer.clear();
        mANW.clear();
        mSTC.clear();
        mST.clear();
        GLTest::TearDown();
    };
"
	
	
	
	
      end

      operation 137730 "drawTexture"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mTextureRenderer->drawTexture();
    };
"
	
	
	
	
      end

      attribute 136834 "mConsumer"
	protected explicit_type "IGraphicBufferConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136962 "mST"
	protected explicit_type "GLConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 137090 "mSTC"
	protected explicit_type "Surface"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 137218 "mANW"
	protected explicit_type "ANativeWindow"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 135170 // mTextureRenderer (<directional composition>)
	relation 135170 *-->
	  stereotype "sp"
	  a role_name "mTextureRenderer" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 135170 // mTextureRenderer (<directional composition>)
	  b parent class_ref 135682 // TextureRenderer
      end

      classrelation 135298 // mFW (<directional composition>)
	relation 135298 *-->
	  stereotype "sp"
	  a role_name "mFW" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 135298 // mFW (<directional composition>)
	  b parent class_ref 134786 // FrameWaiter
      end
    end

    class 135682 "TextureRenderer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 136578 // <generalisation>
	relation 136578 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136578 // <generalisation>
	  b parent class_ref 136962 // typedef6
      end

      operation 140162 "TextureRenderer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "texName" explicit_type "GLuint"
	  param in name "st" explicit_type "sp<GLConsumer>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)} : mTexName(texName), mST(st) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 140290 "SetUp"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 140418 "drawTexture"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// drawTexture draws the GLConsumer over the entire GL viewport.

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 139138 "mTexName"
	private explicit_type "GLuint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 139266 "mST"
	private explicit_type "GLConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 139394 "mPgm"
	private explicit_type "GLuint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 139522 "mPositionHandle"
	private explicit_type "GLint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 139650 "mTexSamplerHandle"
	private explicit_type "GLint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 139778 "mTexMatrixHandle"
	private explicit_type "GLint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 135810 "SurfaceTextureGLThreadToGLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * This test fixture is for testing GL -> GL texture streaming from one thread
 * to another.  It contains functionality to create a producer thread that will
 * perform GL rendering to an ANativeWindow that feeds frames to a
 * GLConsumer.  Additionally it supports interlocking the producer and
 * consumer threads so that a specific sequence of calls can be
 * deterministically created by the test.
 *
 * The intended usage is as follows:
 *
 * TEST_F(...) {
 *     class PT : public ProducerThread {
 *         virtual void render() {
 *             ...
 *             swapBuffers();
 *         }
 *     };
 *
 *     runProducerThread(new PT());
 *
 *     // The order of these calls will vary from test to test and may include
 *     // multiple frames and additional operations (e.g. GL rendering from the
 *     // texture).
 *     fc->waitForFrame();
 *     mST->updateTexImage();
 *     fc->finishFrame();
 * }
 *"
      classrelation 135426 // <generalisation>
	relation 135426 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135426 // <generalisation>
	  b parent class_ref 135938 // SurfaceTextureGLToGLTest
      end

      class 136066 "ProducerThread"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 135554 // <generalisation>
	  relation 135554 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 135554 // <generalisation>
	    b parent class_ref 136194 // typedef4
	end

	operation 137858 "~ProducerThread"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        };
"
	  
	  
	  
	  
	end

	operation 137986 "setEglObjects"
	  cpp_inline public explicit_return_type "void"
	  nparams 3
	    param in name "producerEglDisplay" explicit_type "EGLDisplay"
	    param in name "producerEglSurface" explicit_type "EGLSurface"
	    param in name "producerEglContext" explicit_type "EGLContext"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
            mProducerEglDisplay = producerEglDisplay;
            mProducerEglSurface = producerEglSurface;
            mProducerEglContext = producerEglContext;
        };
"
	  
	  
	  
	  
	end

	operation 138114 "threadLoop"
	  cpp_virtual cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            eglMakeCurrent(mProducerEglDisplay, mProducerEglSurface,
                    mProducerEglSurface, mProducerEglContext);
            render();
            eglMakeCurrent(mProducerEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE,
                    EGL_NO_CONTEXT);
            return false;
        };
"
	  
	  
	  
	  
	end

	operation 138242 "render"
	  abstract cpp_virtual protected explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  
	  
	  
	  
	end

	operation 138370 "swapBuffers"
	  cpp_inline protected explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            eglSwapBuffers(mProducerEglDisplay, mProducerEglSurface);
        };
"
	  
	  
	  
	  
	end

	attribute 137346 "mProducerEglDisplay"
	  protected explicit_type "EGLDisplay"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 137474 "mProducerEglSurface"
	  protected explicit_type "EGLSurface"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 137602 "mProducerEglContext"
	  protected explicit_type "EGLContext"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 136194 "typedef4"
	visibility package stereotype "typedef" explicit_base_type "Thread"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 136322 "FrameCondition"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 135682 // <generalisation>
	  relation 135682 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 135682 // <generalisation>
	    b parent class_ref 136450 // typedef5
	end

	operation 138498 "FrameCondition"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
                mFrameAvailable(false),
                mFrameFinished(false) {
        };
"
	  
	  
	  
	  
	end

	operation 138626 "waitForFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            ALOGV(\"+waitForFrame\");
            while (!mFrameAvailable) {
                mFrameAvailableCondition.wait(mMutex);
            }
            mFrameAvailable = false;
            ALOGV(\"-waitForFrame\");
        };
"
	  
	  
	  
	  
	  comment " waitForFrame waits for the next frame to arrive.  This should be
 called from the consumer thread once for every frame expected by the
 test."
	end

	operation 138754 "finishFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            ALOGV(\"+finishFrame\");
            mFrameFinished = true;
            mFrameFinishCondition.signal();
            ALOGV(\"-finishFrame\");
        };
"
	  
	  
	  
	  
	  comment " Allow the producer to return from its swapBuffers call and continue
 on to produce the next frame.  This should be called by the consumer
 thread once for every frame expected by the test."
	end

	operation 138882 "onFrameAvailable"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            ALOGV(\"+onFrameAvailable\");
            mFrameAvailable = true;
            mFrameAvailableCondition.signal();
            while (!mFrameFinished) {
                mFrameFinishCondition.wait(mMutex);
            }
            mFrameFinished = false;
            ALOGV(\"-onFrameAvailable\");
        };
"
	  
	  
	  
	  
	  comment " This should be called by GLConsumer on the producer thread."
	end

	attribute 137730 "mFrameAvailable"
	  protected explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 137858 "mFrameFinished"
	  protected explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 137986 "mMutex"
	  protected explicit_type "Mutex"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 138114 "mFrameAvailableCondition"
	  protected explicit_type "Condition"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 138242 "mFrameFinishCondition"
	  protected explicit_type "Condition"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 136450 "typedef5"
	visibility package stereotype "typedef" explicit_base_type "GLConsumer::FrameAvailableListener"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 139010 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLToGLTest::SetUp();
        mFC = new FrameCondition();
        mST->setFrameAvailableListener(mFC);
    };
"
	
	
	
	
      end

      operation 139138 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mProducerThread != NULL) {
            mProducerThread->requestExitAndWait();
        }
        mProducerThread.clear();
        mFC.clear();
        SurfaceTextureGLToGLTest::TearDown();
    };
"
	
	
	
	
      end

      operation 139266 "runProducerThread"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "producerThread" explicit_type "sp<ProducerThread>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ASSERT_TRUE(mProducerThread == NULL);
        mProducerThread = producerThread;
        producerThread->setEglObjects(mEglDisplay, mProducerEglSurface,
                mProducerEglContext);
        producerThread->run();
    };
"
	
	
	
	
      end

      classrelation 135810 // mProducerThread (<directional composition>)
	relation 135810 *-->
	  stereotype "sp"
	  a role_name "mProducerThread" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 135810 // mProducerThread (<directional composition>)
	  b parent class_ref 136066 // ProducerThread
      end

      classrelation 135938 // mFC (<directional composition>)
	relation 135938 *-->
	  stereotype "sp"
	  a role_name "mFC" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 135938 // mFC (<directional composition>)
	  b parent class_ref 136322 // FrameCondition
      end
    end

    class 135938 "SurfaceTextureGLToGLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * This test fixture is for testing GL -> GL texture streaming.  It creates an
 * EGLSurface and an EGLContext for the image producer to use."
      classrelation 136066 // <generalisation>
	relation 136066 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136066 // <generalisation>
	  b parent class_ref 135426 // SurfaceTextureGLTest
      end

      operation 139394 "SurfaceTextureGLToGLTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mProducerEglSurface(EGL_NO_SURFACE),
            mProducerEglContext(EGL_NO_CONTEXT) {
    };
"
	
	
	
	
      end

      operation 139522 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLTest::SetUp();

        mProducerEglSurface = eglCreateWindowSurface(mEglDisplay, mGlConfig,
                mANW.get(), NULL);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_SURFACE, mProducerEglSurface);

        mProducerEglContext = eglCreateContext(mEglDisplay, mGlConfig,
                EGL_NO_CONTEXT, getContextAttribs());
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mProducerEglContext);
    };
"
	
	
	
	
      end

      operation 139650 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mProducerEglContext != EGL_NO_CONTEXT) {
            eglDestroyContext(mEglDisplay, mProducerEglContext);
        }
        if (mProducerEglSurface != EGL_NO_SURFACE) {
            eglDestroySurface(mEglDisplay, mProducerEglSurface);
        }
        SurfaceTextureGLTest::TearDown();
    };
"
	
	
	
	
      end

      attribute 138370 "mProducerEglSurface"
	protected explicit_type "EGLSurface"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 138498 "mProducerEglContext"
	protected explicit_type "EGLContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 136578 "SurfaceTextureMultiContextGLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 136194 // <generalisation>
	relation 136194 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136194 // <generalisation>
	  b parent class_ref 135426 // SurfaceTextureGLTest
      end

      class 136706 "anonymous2"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 138626 "SECOND_TEX_ID"
	  public type class_ref 136706 // anonymous2
	  init_value " 123 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 136834 "anonymous3"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 138754 "THIRD_TEX_ID"
	  public type class_ref 136834 // anonymous3
	  init_value " 456 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 139778 "SurfaceTextureMultiContextGLTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mSecondEglContext(EGL_NO_CONTEXT) {
    };
"
	
	
	
	
      end

      operation 139906 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLTest::SetUp();

        // Set up the secondary context and texture renderer.
        mSecondEglContext = eglCreateContext(mEglDisplay, mGlConfig,
                EGL_NO_CONTEXT, getContextAttribs());
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mSecondEglContext);

        ASSERT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface,
                mSecondEglContext));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        mSecondTextureRenderer = new TextureRenderer(SECOND_TEX_ID, mST);
        ASSERT_NO_FATAL_FAILURE(mSecondTextureRenderer->SetUp());

        // Set up the tertiary context and texture renderer.
        mThirdEglContext = eglCreateContext(mEglDisplay, mGlConfig,
                EGL_NO_CONTEXT, getContextAttribs());
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mThirdEglContext);

        ASSERT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface,
                mThirdEglContext));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        mThirdTextureRenderer = new TextureRenderer(THIRD_TEX_ID, mST);
        ASSERT_NO_FATAL_FAILURE(mThirdTextureRenderer->SetUp());

        // Switch back to the primary context to start the tests.
        ASSERT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface,
                mEglContext));
    };
"
	
	
	
	
      end

      operation 140034 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mThirdEglContext != EGL_NO_CONTEXT) {
            eglDestroyContext(mEglDisplay, mThirdEglContext);
        }
        if (mSecondEglContext != EGL_NO_CONTEXT) {
            eglDestroyContext(mEglDisplay, mSecondEglContext);
        }
        SurfaceTextureGLTest::TearDown();
    };
"
	
	
	
	
      end

      attribute 138882 "mSecondEglContext"
	protected explicit_type "EGLContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 136322 // mSecondTextureRenderer (<directional composition>)
	relation 136322 *-->
	  stereotype "sp"
	  a role_name "mSecondTextureRenderer" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 136322 // mSecondTextureRenderer (<directional composition>)
	  b parent class_ref 135682 // TextureRenderer
      end

      attribute 139010 "mThirdEglContext"
	protected explicit_type "EGLContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 136450 // mThirdTextureRenderer (<directional composition>)
	relation 136450 *-->
	  stereotype "sp"
	  a role_name "mThirdTextureRenderer" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 136450 // mThirdTextureRenderer (<directional composition>)
	  b parent class_ref 135682 // TextureRenderer
      end
    end

    class 136962 "typedef6"
      visibility package stereotype "typedef" explicit_base_type "RefBase"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 137218 "BpConsumerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 136706 // <generalisation>
	relation 136706 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136706 // <generalisation>
	  b parent class_ref 137346 // typedef7
      end

      operation 140546 "BpConsumerListener"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IConsumerListener>(impl) {
    };
"
	
	
	
	
      end

      operation 140674 "onFrameAvailable"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IConsumerListener::getInterfaceDescriptor());
        remote()->transact(ON_FRAME_AVAILABLE, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end

      operation 140802 "onBuffersReleased"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IConsumerListener::getInterfaceDescriptor());
        remote()->transact(ON_BUFFER_RELEASED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end

      operation 140930 "onSidebandStreamChanged"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IConsumerListener::getInterfaceDescriptor());
        remote()->transact(ON_SIDEBAND_STREAM_CHANGED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 137346 "typedef7"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<IConsumerListener>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 137602 "BpDisplayEventConnection"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 136834 // <generalisation>
	relation 136834 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136834 // <generalisation>
	  b parent class_ref 137730 // typedef8
      end

      operation 141058 "BpDisplayEventConnection"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IDisplayEventConnection>(impl)
    {
    };
"
	
	
	
	
      end

      operation 141186 "getDataChannel"
	const cpp_virtual cpp_inline public explicit_return_type "sp<BitTube>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IDisplayEventConnection::getInterfaceDescriptor());
        remote()->transact(GET_DATA_CHANNEL, data, &reply);
        return new BitTube(reply);
    };
"
	
	
	
	
      end

      operation 141314 "setVsyncRate"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IDisplayEventConnection::getInterfaceDescriptor());
        data.writeInt32(count);
        remote()->transact(SET_VSYNC_RATE, data, &reply);
    };
"
	
	
	
	
      end

      operation 141442 "requestNextVsync"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IDisplayEventConnection::getInterfaceDescriptor());
        remote()->transact(REQUEST_NEXT_VSYNC, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 137730 "typedef8"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<IDisplayEventConnection>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 137986 "BpGraphicBufferAlloc"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 136962 // <generalisation>
	relation 136962 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136962 // <generalisation>
	  b parent class_ref 138114 // typedef9
      end

      operation 141570 "BpGraphicBufferAlloc"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IGraphicBufferAlloc>(impl)
    {
    };
"
	
	
	
	
      end

      operation 141698 "createGraphicBuffer"
	cpp_virtual cpp_inline public explicit_return_type "sp<GraphicBuffer>"
	nparams 5
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "PixelFormat"
	  param in name "usage" explicit_type "uint32_t"
	  param inout name "error" explicit_type "status_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferAlloc::getInterfaceDescriptor());
        data.writeInt32(w);
        data.writeInt32(h);
        data.writeInt32(format);
        data.writeInt32(usage);
        remote()->transact(CREATE_GRAPHIC_BUFFER, data, &reply);
        sp<GraphicBuffer> graphicBuffer;
        status_t result = reply.readInt32();
        if (result == NO_ERROR) {
            graphicBuffer = new GraphicBuffer();
            result = reply.read(*graphicBuffer);
            // reply.readStrongBinder();
            // here we don't even have to read the BufferReference from
            // the parcel, it'll die with the parcel.
        }
        *error = result;
        return graphicBuffer;
    };
"
	
	
	
	
      end
    end

    class 138114 "typedef9"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<IGraphicBufferAlloc>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 138370 "BpGraphicBufferConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137090 // <generalisation>
	relation 137090 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 137090 // <generalisation>
	  b parent class_ref 138498 // typedef10
      end

      operation 141826 "BpGraphicBufferConsumer"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IGraphicBufferConsumer>(impl)
    {
    };
"
	
	
	
	
      end

      operation 141954 "acquireBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param inout name "buffer" explicit_type "BufferItem"
	  param in name "presentWhen" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeInt64(presentWhen);
        status_t result = remote()->transact(ACQUIRE_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        result = reply.read(*buffer);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 142082 "detachBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeInt32(slot);
        status_t result = remote()->transact(DETACH_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 142210 "attachBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param inout name "slot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.write(*buffer.get());
        status_t result = remote()->transact(ATTACH_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        *slot = reply.readInt32();
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 142338 "releaseBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "buf" explicit_type "int"
	  param in name "frameNumber" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 142466 "consumerConnect"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "consumer" explicit_type "sp<IConsumerListener>"
	  param in name "controlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeStrongBinder(consumer->asBinder());
        data.writeInt32(controlledByApp);
        status_t result = remote()->transact(CONSUMER_CONNECT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 142594 "consumerDisconnect"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        status_t result = remote()->transact(CONSUMER_DISCONNECT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 142722 "getReleasedBuffers"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param inout name "slotMask" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        if (slotMask == NULL) {
            ALOGE(\"getReleasedBuffers: slotMask must not be NULL\");
            return BAD_VALUE;
        }
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        status_t result = remote()->transact(GET_RELEASED_BUFFERS, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        *slotMask = reply.readInt64();
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 142850 "setDefaultBufferSize"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeInt32(w);
        data.writeInt32(h);
        status_t result = remote()->transact(SET_DEFAULT_BUFFER_SIZE, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 142978 "setDefaultMaxBufferCount"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeInt32(bufferCount);
        status_t result = remote()->transact(SET_DEFAULT_MAX_BUFFER_COUNT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 143106 "disableAsyncBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        status_t result = remote()->transact(DISABLE_ASYNC_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 143234 "setMaxAcquiredBufferCount"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "maxAcquiredBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeInt32(maxAcquiredBuffers);
        status_t result = remote()->transact(SET_MAX_ACQUIRED_BUFFER_COUNT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 143362 "setConsumerName"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeString8(name);
        remote()->transact(SET_CONSUMER_NAME, data, &reply);
    };
"
	
	
	
	
      end

      operation 143490 "setDefaultBufferFormat"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeInt32(defaultFormat);
        status_t result = remote()->transact(SET_DEFAULT_BUFFER_FORMAT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 143618 "setConsumerUsageBits"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeInt32(usage);
        status_t result = remote()->transact(SET_CONSUMER_USAGE_BITS, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 143746 "setTransformHint"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "hint" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeInt32(hint);
        status_t result = remote()->transact(SET_TRANSFORM_HINT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 143874 "getSidebandStream"
	const cpp_virtual cpp_inline public explicit_return_type "sp<NativeHandle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        status_t err;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        if ((err = remote()->transact(GET_SIDEBAND_STREAM, data, &reply)) != NO_ERROR) {
            return NULL;
        }
        sp<NativeHandle> stream;
        if (reply.readInt32()) {
            stream = NativeHandle::create(reply.readNativeHandle(), true);
        }
        return stream;
    };
"
	
	
	
	
      end

      operation 144002 "dump"
	const cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferConsumer::getInterfaceDescriptor());
        data.writeString8(result);
        data.writeString8(String8(prefix ? prefix : \"\"));
        remote()->transact(DUMP, data, &reply);
        reply.readString8();
    };
"
	
	
	
	
      end
    end

    class 138498 "typedef10"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<IGraphicBufferConsumer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 138754 "BpGraphicBufferProducer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137218 // <generalisation>
	relation 137218 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 137218 // <generalisation>
	  b parent class_ref 138882 // typedef11
      end

      operation 144130 "BpGraphicBufferProducer"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IGraphicBufferProducer>(impl)
    {
    };
"
	
	
	
	
      end

      operation 144258 "requestBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "bufferIdx" explicit_type "int"
	  param inout name "buf" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(bufferIdx);
        status_t result =remote()->transact(REQUEST_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        bool nonNull = reply.readInt32();
        if (nonNull) {
            *buf = new GraphicBuffer();
            result = reply.read(**buf);
            if(result != NO_ERROR) {
                (*buf).clear();
                return result;
            }
        }
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 144386 "setBufferCount"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(bufferCount);
        status_t result =remote()->transact(SET_BUFFER_COUNT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 144514 "dequeueBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 7
	  param inout name "buf" explicit_type "int"
	  param inout name "fence" explicit_type "sp<Fence>"
	  param in name "async" explicit_type "bool"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "uint32_t"
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(async);
        data.writeInt32(w);
        data.writeInt32(h);
        data.writeInt32(format);
        data.writeInt32(usage);
        status_t result = remote()->transact(DEQUEUE_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        *buf = reply.readInt32();
        bool nonNull = reply.readInt32();
        if (nonNull) {
            *fence = new Fence();
            reply.read(**fence);
        }
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 144642 "detachBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(slot);
        status_t result = remote()->transact(DETACH_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 144770 "detachNextBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if (outBuffer == NULL) {
            ALOGE(\"detachNextBuffer: outBuffer must not be NULL\");
            return BAD_VALUE;
        } else if (outFence == NULL) {
            ALOGE(\"detachNextBuffer: outFence must not be NULL\");
            return BAD_VALUE;
        }
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        status_t result = remote()->transact(DETACH_NEXT_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        result = reply.readInt32();
        if (result == NO_ERROR) {
            bool nonNull = reply.readInt32();
            if (nonNull) {
                *outBuffer = new GraphicBuffer;
                reply.read(**outBuffer);
            }
            nonNull = reply.readInt32();
            if (nonNull) {
                *outFence = new Fence;
                reply.read(**outFence);
            }
        }
        return result;
    };
"
	
	
	
	
      end

      operation 144898 "attachBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param inout name "slot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.write(*buffer.get());
        status_t result = remote()->transact(ATTACH_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        *slot = reply.readInt32();
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 145026 "queueBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 3
	  param in name "buf" explicit_type "int"
	  param in name "input" explicit_type "QueueBufferInput"
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(buf);
        data.write(input);
        status_t result = remote()->transact(QUEUE_BUFFER, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        memcpy(output, reply.readInplace(sizeof(*output)), sizeof(*output));
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 145154 "cancelBuffer"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "buf" explicit_type "int"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(buf);
        data.write(*fence.get());
        remote()->transact(CANCEL_BUFFER, data, &reply);
    };
"
	
	
	
	
      end

      operation 145282 "query"
	cpp_virtual cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "what" explicit_type "int"
	  param inout name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(what);
        status_t result = remote()->transact(QUERY, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        value[0] = reply.readInt32();
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 145410 "connect"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 4
	  param in name "listener" explicit_type "sp<IProducerListener>"
	  param in name "api" explicit_type "int"
	  param in name "producerControlledByApp" explicit_type "bool"
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        if (listener != NULL) {
            data.writeInt32(1);
            data.writeStrongBinder(listener->asBinder());
        } else {
            data.writeInt32(0);
        }
        data.writeInt32(api);
        data.writeInt32(producerControlledByApp);
        status_t result = remote()->transact(CONNECT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        memcpy(output, reply.readInplace(sizeof(*output)), sizeof(*output));
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 145538 "disconnect"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(api);
        status_t result =remote()->transact(DISCONNECT, data, &reply);
        if (result != NO_ERROR) {
            return result;
        }
        result = reply.readInt32();
        return result;
    };
"
	
	
	
	
      end

      operation 145666 "setSidebandStream"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "stream" explicit_type "sp<NativeHandle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        status_t result;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        if (stream.get()) {
            data.writeInt32(true);
            data.writeNativeHandle(stream->handle());
        } else {
            data.writeInt32(false);
        }
        if ((result = remote()->transact(SET_SIDEBAND_STREAM, data, &reply)) == NO_ERROR) {
            result = reply.readInt32();
        }
        return result;
    };
"
	
	
	
	
      end

      operation 145794 "allocateBuffers"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "async" explicit_type "bool"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "format" explicit_type "uint32_t"
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(async));
        data.writeInt32(static_cast<int32_t>(width));
        data.writeInt32(static_cast<int32_t>(height));
        data.writeInt32(static_cast<int32_t>(format));
        data.writeInt32(static_cast<int32_t>(usage));
        status_t result = remote()->transact(ALLOCATE_BUFFERS, data, &reply);
        if (result != NO_ERROR) {
            ALOGE(\"allocateBuffers failed to transact: %d\", result);
        }
    };
"
	
	
	
	
      end
    end

    class 138882 "typedef11"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<IGraphicBufferProducer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 139138 "BpProducerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137346 // <generalisation>
	relation 137346 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 137346 // <generalisation>
	  b parent class_ref 139266 // typedef12
      end

      operation 145922 "BpProducerListener"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IProducerListener>(impl) {};
"
	
	
	
	
      end

      operation 146050 "onBufferReleased"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IProducerListener::getInterfaceDescriptor());
        remote()->transact(ON_BUFFER_RELEASED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 139266 "typedef12"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<IProducerListener>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 139522 "BpSensorEventConnection"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137474 // <generalisation>
	relation 137474 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 137474 // <generalisation>
	  b parent class_ref 139650 // typedef13
      end

      operation 146178 "BpSensorEventConnection"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<ISensorEventConnection>(impl)
    {
    };
"
	
	
	
	
      end

      operation 146306 "getSensorChannel"
	const cpp_virtual cpp_inline public explicit_return_type "sp<BitTube>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISensorEventConnection::getInterfaceDescriptor());
        remote()->transact(GET_SENSOR_CHANNEL, data, &reply);
        return new BitTube(reply);
    };
"
	
	
	
	
      end

      operation 146434 "enableDisable"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 5
	  param in name "handle" explicit_type "int"
	  param in name "enabled" explicit_type "bool"
	  param in name "samplingPeriodNs" explicit_type "nsecs_t"
	  param in name "maxBatchReportLatencyNs" explicit_type "nsecs_t"
	  param in name "reservedFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISensorEventConnection::getInterfaceDescriptor());
        data.writeInt32(handle);
        data.writeInt32(enabled);
        data.writeInt64(samplingPeriodNs);
        data.writeInt64(maxBatchReportLatencyNs);
        data.writeInt32(reservedFlags);
        remote()->transact(ENABLE_DISABLE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 146562 "setEventRate"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "handle" explicit_type "int"
	  param in name "ns" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISensorEventConnection::getInterfaceDescriptor());
        data.writeInt32(handle);
        data.writeInt64(ns);
        remote()->transact(SET_EVENT_RATE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 146690 "flush"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISensorEventConnection::getInterfaceDescriptor());
        remote()->transact(FLUSH_SENSOR, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end
    end

    class 139650 "typedef13"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<ISensorEventConnection>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 139906 "BpSensorServer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137602 // <generalisation>
	relation 137602 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 137602 // <generalisation>
	  b parent class_ref 140034 // typedef14
      end

      operation 146818 "BpSensorServer"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<ISensorServer>(impl)
    {
    };
"
	
	
	
	
      end

      operation 146946 "getSensorList"
	cpp_virtual cpp_inline public explicit_return_type "Vector<Sensor>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISensorServer::getInterfaceDescriptor());
        remote()->transact(GET_SENSOR_LIST, data, &reply);
        Sensor s;
        Vector<Sensor> v;
        int32_t n = reply.readInt32();
        v.setCapacity(n);
        while (n--) {
            reply.read(s);
            v.add(s);
        }
        return v;
    };
"
	
	
	
	
      end

      operation 147074 "createSensorEventConnection"
	cpp_virtual cpp_inline public explicit_return_type "sp<ISensorEventConnection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISensorServer::getInterfaceDescriptor());
        remote()->transact(CREATE_SENSOR_EVENT_CONNECTION, data, &reply);
        return interface_cast<ISensorEventConnection>(reply.readStrongBinder());
    };
"
	
	
	
	
      end
    end

    class 140034 "typedef14"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<ISensorServer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 140162 "BpSurfaceComposer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137730 // <generalisation>
	relation 137730 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 137730 // <generalisation>
	  b parent class_ref 140290 // typedef15
      end

      operation 147202 "BpSurfaceComposer"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<ISurfaceComposer>(impl)
    {
    };
"
	
	
	
	
      end

      operation 147330 "createConnection"
	cpp_virtual cpp_inline public explicit_return_type "sp<ISurfaceComposerClient>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        uint32_t n;
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        remote()->transact(BnSurfaceComposer::CREATE_CONNECTION, data, &reply);
        return interface_cast<ISurfaceComposerClient>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 147458 "createGraphicBufferAlloc"
	cpp_virtual cpp_inline public explicit_return_type "sp<IGraphicBufferAlloc>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        uint32_t n;
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        remote()->transact(BnSurfaceComposer::CREATE_GRAPHIC_BUFFER_ALLOC, data, &reply);
        return interface_cast<IGraphicBufferAlloc>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 147586 "setTransactionState"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "state" explicit_type "Vector<ComposerState>"
	  param in name "displays" explicit_type "Vector<DisplayState>"
	  param in name "flags" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        {
            Vector<ComposerState>::const_iterator b(state.begin());
            Vector<ComposerState>::const_iterator e(state.end());
            data.writeInt32(state.size());
            for ( ; b != e ; ++b ) {
                b->write(data);
            }
        }
        {
            Vector<DisplayState>::const_iterator b(displays.begin());
            Vector<DisplayState>::const_iterator e(displays.end());
            data.writeInt32(displays.size());
            for ( ; b != e ; ++b ) {
                b->write(data);
            }
        }
        data.writeInt32(flags);
        remote()->transact(BnSurfaceComposer::SET_TRANSACTION_STATE, data, &reply);
    };
"
	
	
	
	
      end

      operation 147714 "bootFinished"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        remote()->transact(BnSurfaceComposer::BOOT_FINISHED, data, &reply);
    };
"
	
	
	
	
      end

      operation 147842 "captureScreen"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 9
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "producer" explicit_type "sp<IGraphicBufferProducer>"
	  param in name "sourceCrop" explicit_type "Rect"
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	  param in name "rotation" explicit_type "ISurfaceComposer::Rotation"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeStrongBinder(display);
        data.writeStrongBinder(producer->asBinder());
        data.write(sourceCrop);
        data.writeInt32(reqWidth);
        data.writeInt32(reqHeight);
        data.writeInt32(minLayerZ);
        data.writeInt32(maxLayerZ);
        data.writeInt32(static_cast<int32_t>(useIdentityTransform));
        data.writeInt32(static_cast<int32_t>(rotation));
        remote()->transact(BnSurfaceComposer::CAPTURE_SCREEN, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 147970 "authenticateSurfaceTexture"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "bufferProducer" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        int err = NO_ERROR;
        err = data.writeInterfaceToken(
                ISurfaceComposer::getInterfaceDescriptor());
        if (err != NO_ERROR) {
            ALOGE(\"ISurfaceComposer::authenticateSurfaceTexture: error writing \"
                    \"interface descriptor: %s (%d)\", strerror(-err), -err);
            return false;
        }
        err = data.writeStrongBinder(bufferProducer->asBinder());
        if (err != NO_ERROR) {
            ALOGE(\"ISurfaceComposer::authenticateSurfaceTexture: error writing \"
                    \"strong binder to parcel: %s (%d)\", strerror(-err), -err);
            return false;
        }
        err = remote()->transact(BnSurfaceComposer::AUTHENTICATE_SURFACE, data,
                &reply);
        if (err != NO_ERROR) {
            ALOGE(\"ISurfaceComposer::authenticateSurfaceTexture: error \"
                    \"performing transaction: %s (%d)\", strerror(-err), -err);
            return false;
        }
        int32_t result = 0;
        err = reply.readInt32(&result);
        if (err != NO_ERROR) {
            ALOGE(\"ISurfaceComposer::authenticateSurfaceTexture: error \"
                    \"retrieving result: %s (%d)\", strerror(-err), -err);
            return false;
        }
        return result != 0;
    };
"
	
	
	
	
      end

      operation 148098 "createDisplayEventConnection"
	cpp_virtual cpp_inline public explicit_return_type "sp<IDisplayEventConnection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        sp<IDisplayEventConnection> result;
        int err = data.writeInterfaceToken(
                ISurfaceComposer::getInterfaceDescriptor());
        if (err != NO_ERROR) {
            return result;
        }
        err = remote()->transact(
                BnSurfaceComposer::CREATE_DISPLAY_EVENT_CONNECTION,
                data, &reply);
        if (err != NO_ERROR) {
            ALOGE(\"ISurfaceComposer::createDisplayEventConnection: error performing \"
                    \"transaction: %s (%d)\", strerror(-err), -err);
            return result;
        }
        result = interface_cast<IDisplayEventConnection>(reply.readStrongBinder());
        return result;
    };
"
	
	
	
	
      end

      operation 148226 "createDisplay"
	cpp_virtual cpp_inline public explicit_return_type "sp<IBinder>"
	nparams 2
	  param in name "displayName" explicit_type "String8"
	  param in name "secure" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeString8(displayName);
        data.writeInt32(secure ? 1 : 0);
        remote()->transact(BnSurfaceComposer::CREATE_DISPLAY, data, &reply);
        return reply.readStrongBinder();
    };
"
	
	
	
	
      end

      operation 148354 "destroyDisplay"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeStrongBinder(display);
        remote()->transact(BnSurfaceComposer::DESTROY_DISPLAY, data, &reply);
    };
"
	
	
	
	
      end

      operation 148482 "getBuiltInDisplay"
	cpp_virtual cpp_inline public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "id" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeInt32(id);
        remote()->transact(BnSurfaceComposer::GET_BUILT_IN_DISPLAY, data, &reply);
        return reply.readStrongBinder();
    };
"
	
	
	
	
      end

      operation 148610 "setPowerMode"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeStrongBinder(display);
        data.writeInt32(mode);
        remote()->transact(BnSurfaceComposer::SET_POWER_MODE, data, &reply);
    };
"
	
	
	
	
      end

      operation 148738 "getDisplayConfigs"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "configs" explicit_type "Vector<DisplayInfo>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeStrongBinder(display);
        remote()->transact(BnSurfaceComposer::GET_DISPLAY_CONFIGS, data, &reply);
        status_t result = reply.readInt32();
        if (result == NO_ERROR) {
            size_t numConfigs = static_cast<size_t>(reply.readInt32());
            configs->clear();
            configs->resize(numConfigs);
            for (size_t c = 0; c < numConfigs; ++c) {
                memcpy(&(configs->editItemAt(c)),
                        reply.readInplace(sizeof(DisplayInfo)),
                        sizeof(DisplayInfo));
            }
        }
        return result;
    };
"
	
	
	
	
      end

      operation 148866 "getDisplayStats"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "stats" explicit_type "DisplayStatInfo"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeStrongBinder(display);
        remote()->transact(BnSurfaceComposer::GET_DISPLAY_STATS, data, &reply);
        status_t result = reply.readInt32();
        if (result == NO_ERROR) {
            memcpy(stats,
                    reply.readInplace(sizeof(DisplayStatInfo)),
                    sizeof(DisplayStatInfo));
        }
        return result;
    };
"
	
	
	
	
      end

      operation 148994 "getActiveConfig"
	cpp_virtual cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeStrongBinder(display);
        remote()->transact(BnSurfaceComposer::GET_ACTIVE_CONFIG, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 149122 "setActiveConfig"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        data.writeStrongBinder(display);
        data.writeInt32(id);
        remote()->transact(BnSurfaceComposer::SET_ACTIVE_CONFIG, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 149250 "clearAnimationFrameStats"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        remote()->transact(BnSurfaceComposer::CLEAR_ANIMATION_FRAME_STATS, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 149378 "getAnimationFrameStats"
	const cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param inout name "outStats" explicit_type "FrameStats"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposer::getInterfaceDescriptor());
        remote()->transact(BnSurfaceComposer::GET_ANIMATION_FRAME_STATS, data, &reply);
        reply.read(*outStats);
        return reply.readInt32();
    };
"
	
	
	
	
      end
    end

    class 140290 "typedef15"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<ISurfaceComposer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 140546 "BpSurfaceComposerClient"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137858 // <generalisation>
	relation 137858 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 137858 // <generalisation>
	  b parent class_ref 140674 // typedef16
      end

      operation 149506 "BpSurfaceComposerClient"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<ISurfaceComposerClient>(impl) {
    };
"
	
	
	
	
      end

      operation 149634 "createSurface"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 7
	  param in name "name" explicit_type "String8"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "PixelFormat"
	  param in name "flags" explicit_type "uint32_t"
	  param inout name "handle" explicit_type "sp<IBinder>"
	  param inout name "gbp" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposerClient::getInterfaceDescriptor());
        data.writeString8(name);
        data.writeInt32(w);
        data.writeInt32(h);
        data.writeInt32(format);
        data.writeInt32(flags);
        remote()->transact(CREATE_SURFACE, data, &reply);
        *handle = reply.readStrongBinder();
        *gbp = interface_cast<IGraphicBufferProducer>(reply.readStrongBinder());
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 149762 "destroySurface"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "handle" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposerClient::getInterfaceDescriptor());
        data.writeStrongBinder(handle);
        remote()->transact(DESTROY_SURFACE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 149890 "clearLayerFrameStats"
	const cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "handle" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposerClient::getInterfaceDescriptor());
        data.writeStrongBinder(handle);
        remote()->transact(CLEAR_LAYER_FRAME_STATS, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 150018 "getLayerFrameStats"
	const cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "handle" explicit_type "sp<IBinder>"
	  param inout name "outStats" explicit_type "FrameStats"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ISurfaceComposerClient::getInterfaceDescriptor());
        data.writeStrongBinder(handle);
        remote()->transact(GET_LAYER_FRAME_STATS, data, &reply);
        reply.read(*outStats);
        return reply.readInt32();
    };
"
	
	
	
	
      end
    end

    class 140674 "typedef16"
      visibility package stereotype "typedef" explicit_base_type "BpInterface<ISurfaceComposerClient>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 140802 "Composer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137986 // <generalisation>
	relation 137986 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 137986 // <generalisation>
	  b parent class_ref 140930 // typedef17
      end

      extra_member 134530 "friend"
	
	cpp "
    friend class Singleton<Composer>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      attribute 146050 "mLock"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 146178 "mComposerStates"
	private explicit_type "ComposerState"
	stereotype "SortedVector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 146306 "mDisplayStates"
	private explicit_type "DisplayState "
	stereotype "SortedVector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 146434 "mForceSynchronous"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 146562 "mTransactionNestCount"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 146690 "mAnimation"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 150146 "Composer"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : Singleton<Composer>(),
        mForceSynchronous(0), mTransactionNestCount(0),
        mAnimation(false)
    { };
"
	
	
	
	
      end

      operation 150274 "openGlobalTransactionImpl"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 150402 "closeGlobalTransactionImpl"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "synchronous" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 150530 "setAnimationTransactionImpl"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 150658 "getLayerStateLocked"
	preserve_cpp_body_indent private explicit_return_type "layer_state_t"
	nparams 2
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 150786 "getDisplayStateLocked"
	preserve_cpp_body_indent private explicit_return_type "DisplayState"
	nparams 1
	  param in name "token" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 150914 "createDisplay"
	preserve_cpp_body_indent public explicit_return_type "sp<IBinder>"
	nparams 2
	  param in name "displayName" explicit_type "String8"
	  param in name "secure" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151042 "destroyDisplay"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151170 "getBuiltInDisplay"
	preserve_cpp_body_indent public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "id" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151298 "setPosition"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 4
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151426 "setSize"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 4
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151554 "setLayer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "z" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151682 "setFlags"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 4
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "flags" explicit_type "uint32_t"
	  param in name "mask" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151810 "setTransparentRegionHint"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "transparentRegion" explicit_type "Region"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151938 "setAlpha"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "alpha" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152066 "setMatrix"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 6
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "dsdx" explicit_type "float"
	  param in name "dtdx" explicit_type "float"
	  param in name "dsdy" explicit_type "float"
	  param in name "dtdy" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152194 "setOrientation"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "orientation" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152322 "setCrop"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "crop" explicit_type "Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152450 "setLayerStack"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "layerStack" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152578 "setDisplaySurface"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "bufferProducer" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152706 "setDisplayLayerStack"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "layerStack" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152834 "setDisplayProjection"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "orientation" explicit_type "uint32_t"
	  param in name "layerStackRect" explicit_type "Rect"
	  param in name "displayRect" explicit_type "Rect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 152962 "setDisplaySize"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 153090 "setAnimationTransaction"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Composer::getInstance().setAnimationTransactionImpl();
    };
"
	
	
	
	
      end

      operation 153218 "openGlobalTransaction"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Composer::getInstance().openGlobalTransactionImpl();
    };
"
	
	
	
	
      end

      operation 153346 "closeGlobalTransaction"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "synchronous" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Composer::getInstance().closeGlobalTransactionImpl(synchronous);
    };
"
	
	
	
	
      end
    end

    class 140930 "typedef17"
      visibility package stereotype "typedef" explicit_base_type "Singleton<Composer>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 141058 "BufferQueueTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 138114 // <generalisation>
	relation 138114 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 138114 // <generalisation>
	  b parent class_ref 135170 // typedef3
      end

      operation 153474 "BufferQueueTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"Begin test: %s.%s\", testInfo->test_case_name(),
                testInfo->name());
    };
"
	
	
	
	
      end

      operation 153602 "~BufferQueueTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"End test:   %s.%s\", testInfo->test_case_name(),
                testInfo->name());
    };
"
	
	
	
	
      end

      operation 153730 "GetMinUndequeuedBufferCount"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ASSERT_TRUE(bufferCount != NULL);
        ASSERT_EQ(OK, mProducer->query(NATIVE_WINDOW_MIN_UNDEQUEUED_BUFFERS,
                    bufferCount));
        ASSERT_GE(*bufferCount, 0);
    };
"
	
	
	
	
      end

      operation 153858 "createBufferQueue"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        BufferQueue::createBufferQueue(&mProducer, &mConsumer);
    };
"
	
	
	
	
      end

      attribute 146818 "mProducer"
	protected explicit_type "IGraphicBufferProducer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 146946 "mConsumer"
	protected explicit_type "IGraphicBufferConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 141186 "DummyConsumer"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 138242 // <generalisation>
	relation 138242 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 138242 // <generalisation>
	  b parent class_ref 134658 // typedef1
      end

      operation 153986 "onFrameAvailable"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 154114 "onBuffersReleased"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 154242 "onSidebandStreamChanged"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end
    end

    class 141314 "CpuConsumerTestParams"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 147074 "width"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 147202 "height"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 147330 "maxLockedBuffers"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 147458 "format"
	public explicit_type "PixelFormat"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 141442 "CpuConsumerTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 138370 // <generalisation>
	relation 138370 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 138370 // <generalisation>
	  b parent class_ref 141570 // typedef18
      end

      operation 154370 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        const ::testing::TestInfo* const test_info =
                ::testing::UnitTest::GetInstance()->current_test_info();
        CpuConsumerTestParams params = GetParam();
        ALOGV(\"** Starting test %s (%d x %d, %d, 0x%x)\",
                test_info->name(),
                params.width, params.height,
                params.maxLockedBuffers, params.format);
        sp<IGraphicBufferProducer> producer;
        sp<IGraphicBufferConsumer> consumer;
        BufferQueue::createBufferQueue(&producer, &consumer);
        mCC = new CpuConsumer(consumer, params.maxLockedBuffers);
        String8 name(\"CpuConsumer_Under_Test\");
        mCC->setName(name);
        mSTC = new Surface(producer);
        mANW = mSTC;
    };
"
	
	
	
	
      end

      operation 154498 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mANW.clear();
        mSTC.clear();
        mCC.clear();
    };
"
	
	
	
	
      end

      class 141698 "FrameWaiter"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 138498 // <generalisation>
	  relation 138498 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 138498 // <generalisation>
	    b parent class_ref 141826 // typedef19
	end

	operation 154626 "FrameWaiter"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
                mPendingFrames(0) {
        };
"
	  
	  
	  
	  
	end

	operation 154754 "waitForFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (mPendingFrames == 0) {
                mCondition.wait(mMutex);
            }
            mPendingFrames--;
        };
"
	  
	  
	  
	  
	end

	operation 154882 "onFrameAvailable"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mPendingFrames++;
            mCondition.signal();
        };
"
	  
	  
	  
	  
	end

	attribute 147586 "mPendingFrames"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 147714 "mMutex"
	  public explicit_type "Mutex"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 147842 "mCondition"
	  public explicit_type "Condition"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 141826 "typedef19"
	visibility package stereotype "typedef" explicit_base_type "CpuConsumer::FrameAvailableListener"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 141954 "DisconnectWaiter"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 138626 // <generalisation>
	  relation 138626 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 138626 // <generalisation>
	    b parent class_ref 142082 // typedef20
	end

	operation 155010 "DisconnectWaiter"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mWaitForDisconnect(false),
            mPendingFrames(0) {
        };
"
	  
	  
	  
	  
	end

	operation 155138 "waitForFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (mPendingFrames == 0) {
                mFrameCondition.wait(mMutex);
            }
            mPendingFrames--;
        };
"
	  
	  
	  
	  
	end

	operation 155266 "onFrameAvailable"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mPendingFrames++;
            mFrameCondition.signal();
        };
"
	  
	  
	  
	  
	end

	operation 155394 "onBuffersReleased"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (!mWaitForDisconnect) {
                mDisconnectCondition.wait(mMutex);
            }
        };
"
	  
	  
	  
	  
	end

	operation 155522 "finishDisconnect"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mWaitForDisconnect = true;
            mDisconnectCondition.signal();
        };
"
	  
	  
	  
	  
	end

	attribute 147970 "mMutex"
	  private explicit_type "Mutex"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 148098 "mWaitForDisconnect"
	  private explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 148226 "mDisconnectCondition"
	  private explicit_type "Condition"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 148354 "mPendingFrames"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 148482 "mFrameCondition"
	  private explicit_type "Condition"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 142082 "typedef20"
	visibility package stereotype "typedef" explicit_base_type "BufferQueue::ConsumerListener"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 148610 "mCC"
	protected explicit_type "CpuConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148738 "mSTC"
	protected explicit_type "Surface"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148866 "mANW"
	protected explicit_type "ANativeWindow"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 141570 "typedef18"
      visibility package stereotype "typedef" explicit_base_type "::testing::TestWithParam<CpuConsumerTestParams>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 142338 "IGraphicBufferProducerTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 138754 // <generalisation>
	relation 138754 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 138754 // <generalisation>
	  b parent class_ref 135170 // typedef3
      end

      operation 155650 "IGraphicBufferProducerTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 155778 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"Begin test: %s.%s\", testInfo->test_case_name(),
                testInfo->name());

        mDC = new DummyConsumer;

        BufferQueue::createBufferQueue(&mProducer, &mConsumer);

        // Test check: Can't connect producer if no consumer yet
        ASSERT_EQ(NO_INIT, TryConnectProducer());

        // Must connect consumer before producer connects will succeed.
        ASSERT_OK(mConsumer->consumerConnect(mDC, /*controlledByApp*/false));
    };
"
	
	
	
	
      end

      operation 155906 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"End test:   %s.%s\", testInfo->test_case_name(),
                testInfo->name());
    };
"
	
	
	
	
      end

      operation 156034 "TryConnectProducer"
	cpp_inline protected explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        IGraphicBufferProducer::QueueBufferOutput output;
        return mProducer->connect(TEST_TOKEN,
                                  TEST_API,
                                  TEST_CONTROLLED_BY_APP,
                                  &output);
        // TODO: use params to vary token, api, producercontrolledbyapp, etc
    };
"
	
	
	
	
      end

      operation 156162 "ConnectProducer"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ASSERT_OK(TryConnectProducer());
    };
"
	
	
	
	
	comment " Connect to a producer in a 'correct' fashion.
   Precondition: Consumer is connected."
      end

      operation 156290 "CreateBufferInput"
	class_operation cpp_inline protected explicit_return_type "IGraphicBufferProducer::QueueBufferInput"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return QueueBufferInputBuilder().build();
    };
"
	
	
	
	
	comment " Create a generic \"valid\" input for queueBuffer
 -- uses the default buffer format, width, etc."
      end

      class 142466 "QueueBufferInputBuilder"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 156418 "QueueBufferInputBuilder"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
           timestamp = QUEUE_BUFFER_INPUT_TIMESTAMP;
           isAutoTimestamp = QUEUE_BUFFER_INPUT_IS_AUTO_TIMESTAMP;
           crop = QUEUE_BUFFER_INPUT_RECT;
           scalingMode = QUEUE_BUFFER_INPUT_SCALING_MODE;
           transform = QUEUE_BUFFER_INPUT_TRANSFORM;
           async = QUEUE_BUFFER_INPUT_ASYNC;
           fence = QUEUE_BUFFER_INPUT_FENCE;
        };
"
	  
	  
	  
	  
	end

	operation 156546 "build"
	  cpp_inline public explicit_return_type "IGraphicBufferProducer::QueueBufferInput"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return IGraphicBufferProducer::QueueBufferInput(
                    timestamp,
                    isAutoTimestamp,
                    crop,
                    scalingMode,
                    transform,
                    async,
                    fence);
        };
"
	  
	  
	  
	  
	end

	operation 156674 "setTimestamp"
	  cpp_inline public return_type class_ref 142466 // QueueBufferInputBuilder
	  nparams 1
	    param in name "timestamp" explicit_type "int64_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            this->timestamp = timestamp;
            return *this;
        };
"
	  
	  
	  
	  
	end

	operation 156802 "setIsAutoTimestamp"
	  cpp_inline public return_type class_ref 142466 // QueueBufferInputBuilder
	  nparams 1
	    param in name "isAutoTimestamp" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            this->isAutoTimestamp = isAutoTimestamp;
            return *this;
        };
"
	  
	  
	  
	  
	end

	operation 156930 "setCrop"
	  cpp_inline public return_type class_ref 142466 // QueueBufferInputBuilder
	  nparams 1
	    param in name "crop" explicit_type "Rect"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            this->crop = crop;
            return *this;
        };
"
	  
	  
	  
	  
	end

	operation 157058 "setScalingMode"
	  cpp_inline public return_type class_ref 142466 // QueueBufferInputBuilder
	  nparams 1
	    param in name "scalingMode" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            this->scalingMode = scalingMode;
            return *this;
        };
"
	  
	  
	  
	  
	end

	operation 157186 "setTransform"
	  cpp_inline public return_type class_ref 142466 // QueueBufferInputBuilder
	  nparams 1
	    param in name "transform" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            this->transform = transform;
            return *this;
        };
"
	  
	  
	  
	  
	end

	operation 157314 "setAsync"
	  cpp_inline public return_type class_ref 142466 // QueueBufferInputBuilder
	  nparams 1
	    param in name "async" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            this->async = async;
            return *this;
        };
"
	  
	  
	  
	  
	end

	operation 157442 "setFence"
	  cpp_inline public return_type class_ref 142466 // QueueBufferInputBuilder
	  nparams 1
	    param in name "fence" explicit_type "sp<Fence>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            this->fence = fence;
            return *this;
        };
"
	  
	  
	  
	  
	end

	attribute 149506 "timestamp"
	  private explicit_type "int64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 149634 "isAutoTimestamp"
	  private explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 149762 "crop"
	  private explicit_type "Rect"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 149890 "scalingMode"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 150018 "transform"
	  private explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 150146 "async"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 150274 "fence"
	  private explicit_type "Fence"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 142594 "DequeueBufferResult"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 150402 "slot"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 150530 "fence"
	  public explicit_type "Fence"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 157570 "dequeueBuffer"
	cpp_inline protected explicit_return_type "status_t"
	nparams 6
	  param in name "async" explicit_type "bool"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "uint32_t"
	  param in name "usage" explicit_type "uint32_t"
	  param inout name "result" type class_ref 142594 // DequeueBufferResult
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        return mProducer->dequeueBuffer(&result->slot, &result->fence, async, w, h, format, usage);
    };
"
	
	
	
	
      end

      classrelation 138882 // mDC (<directional composition>)
	relation 138882 *-->
	  stereotype "sp"
	  a role_name "mDC" private
	    comment " hide from test body"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 138882 // mDC (<directional composition>)
	  b parent class_ref 141186 // DummyConsumer
      end

      attribute 150658 "mProducer"
	protected explicit_type "IGraphicBufferProducer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " accessible from test body"
      end

      attribute 150786 "mConsumer"
	protected explicit_type "IGraphicBufferConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 142722 "MultiTextureConsumerTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 139010 // <generalisation>
	relation 139010 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 139010 // <generalisation>
	  b parent class_ref 135042 // GLTest
      end

      class 142850 "anonymous14"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 150914 "TEX_ID"
	  public type class_ref 142850 // anonymous14
	  init_value " 123 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 157698 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        GLTest::SetUp();
        sp<IGraphicBufferProducer> producer;
        sp<IGraphicBufferConsumer> consumer;
        BufferQueue::createBufferQueue(&producer, &consumer);
        mGlConsumer = new GLConsumer(consumer, TEX_ID,
                GLConsumer::TEXTURE_EXTERNAL, true, false);
        mSurface = new Surface(producer);
        mANW = mSurface.get();

    };
"
	
	
	
	
      end

      operation 157826 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        GLTest::TearDown();
    };
"
	
	
	
	
      end

      operation 157954 "getContextAttribs"
	cpp_virtual cpp_inline protected explicit_return_type "EGLint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return NULL;
    };
"
	
	
	
	
      end

      operation 158082 "getConfigAttribs"
	cpp_virtual cpp_inline protected explicit_return_type "EGLint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static EGLint sDefaultConfigAttribs[] = {
            EGL_SURFACE_TYPE, EGL_PBUFFER_BIT,
            EGL_RED_SIZE, 8,
            EGL_GREEN_SIZE, 8,
            EGL_BLUE_SIZE, 8,
            EGL_ALPHA_SIZE, 8,
            EGL_NONE };

        return sDefaultConfigAttribs;
    };
"
	
	
	
	
      end

      attribute 151042 "mGlConsumer"
	protected explicit_type "GLConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 151170 "mSurface"
	protected explicit_type "Surface"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 151298 "mANW"
	protected explicit_type "ANativeWindow"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 142978 "SRGBTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 139138 // <generalisation>
	relation 139138 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 139138 // <generalisation>
	  b parent class_ref 135170 // typedef3
      end

      class 143106 "anonymous15"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 151426 "DISPLAY_WIDTH"
	  public type class_ref 143106 // anonymous15
	  init_value " 512"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 151554 "DISPLAY_HEIGHT"
	  public type class_ref 143106 // anonymous15
	  init_value " 512"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 151682 "PIXEL_SIZE"
	  public type class_ref 143106 // anonymous15
	  init_value " 4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 151810 "DISPLAY_SIZE"
	  public type class_ref 143106 // anonymous15
	  init_value " DISPLAY_WIDTH * DISPLAY_HEIGHT * PIXEL_SIZE"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 151938 "ALPHA_VALUE"
	  public type class_ref 143106 // anonymous15
	  init_value " 223"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 152066 "TOLERANCE"
	  public type class_ref 143106 // anonymous15
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      attribute 152194 "SHOW_DEBUG_STRING"
	class_attribute const_attribute protected explicit_type "char"
	multiplicity "[]"
	init_value "= \"DEBUG_OUTPUT_SECONDS\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 158210 "SRGBTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mInputSurface(), mCpuConsumer(), mLockedBuffer(),
            mEglDisplay(EGL_NO_DISPLAY), mEglConfig(),
            mEglContext(EGL_NO_CONTEXT), mEglSurface(EGL_NO_SURFACE),
            mComposerClient(), mSurfaceControl(), mOutputSurface() {
    };
"
	
	
	
	
      end

      operation 158338 "~SRGBTest"
	cpp_virtual cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        if (mEglDisplay != EGL_NO_DISPLAY) {
            if (mEglSurface != EGL_NO_SURFACE) {
                eglDestroySurface(mEglDisplay, mEglSurface);
            }
            if (mEglContext != EGL_NO_CONTEXT) {
                eglDestroyContext(mEglDisplay, mEglContext);
            }
            eglMakeCurrent(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE,
                    EGL_NO_CONTEXT);
            eglTerminate(mEglDisplay);
        }
    };
"
	
	
	
	
      end

      operation 158466 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        sp<IGraphicBufferProducer> producer;
        sp<IGraphicBufferConsumer> consumer;
        BufferQueue::createBufferQueue(&producer, &consumer);
        ASSERT_EQ(NO_ERROR, consumer->setDefaultBufferSize(
                DISPLAY_WIDTH, DISPLAY_HEIGHT));
        mCpuConsumer = new CpuConsumer(consumer, 1);
        String8 name(\"CpuConsumer_for_SRGBTest\");
        mCpuConsumer->setName(name);
        mInputSurface = new Surface(producer);

        ASSERT_NO_FATAL_FAILURE(createEGLSurface(mInputSurface.get()));
        ASSERT_NO_FATAL_FAILURE(createDebugSurface());
    };
"
	
	
	
	
      end

      operation 158594 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ASSERT_NO_FATAL_FAILURE(copyToDebugSurface());
        ASSERT_TRUE(mLockedBuffer.data != NULL);
        ASSERT_EQ(NO_ERROR, mCpuConsumer->unlockBuffer(mLockedBuffer));
    };
"
	
	
	
	
      end

      operation 158722 "linearToSRGB"
	class_operation cpp_inline protected explicit_return_type "float"
	nparams 1
	  param in name "l" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (l <= 0.0031308f) {
            return l * 12.92f;
        } else {
            return 1.055f * pow(l, (1 / 2.4f)) - 0.055f;
        }
    };
"
	
	
	
	
      end

      operation 158850 "srgbToLinear"
	class_operation cpp_inline protected explicit_return_type "float"
	nparams 1
	  param in name "s" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (s <= 0.04045) {
            return s / 12.92f;
        } else {
            return pow(((s + 0.055f) / 1.055f), 2.4f);
        }
    };
"
	
	
	
	
      end

      operation 158978 "srgbToLinear"
	class_operation cpp_inline protected explicit_return_type "uint8_t"
	nparams 1
	  param in name "u" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        float f = u / 255.0f;
        return static_cast<uint8_t>(srgbToLinear(f) * 255.0f + 0.5f);
    };
"
	
	
	
	
      end

      operation 159106 "fillTexture"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "writeAsSRGB" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        uint8_t* textureData = new uint8_t[DISPLAY_SIZE];

        for (int y = 0; y < DISPLAY_HEIGHT; ++y) {
            for (int x = 0; x < DISPLAY_WIDTH; ++x) {
                float realValue = static_cast<float>(x) / (DISPLAY_WIDTH - 1);
                realValue *= ALPHA_VALUE / 255.0f; // Premultiply by alpha
                if (writeAsSRGB) {
                    realValue = linearToSRGB(realValue);
                }

                int offset = (y * DISPLAY_WIDTH + x) * PIXEL_SIZE;
                for (int c = 0; c < 3; ++c) {
                    uint8_t intValue = static_cast<uint8_t>(
                            realValue * 255.0f + 0.5f);
                    textureData[offset + c] = intValue;
                }
                textureData[offset + 3] = ALPHA_VALUE;
            }
        }

        glTexImage2D(GL_TEXTURE_2D, 0, writeAsSRGB ? GL_SRGB8_ALPHA8 : GL_RGBA8,
                DISPLAY_WIDTH, DISPLAY_HEIGHT, 0, GL_RGBA, GL_UNSIGNED_BYTE,
                textureData);
        ASSERT_EQ(GL_NO_ERROR, glGetError());

        delete[] textureData;
    };
"
	
	
	
	
      end

      operation 159234 "initShaders"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static const char vertexSource[] =
            \"attribute vec4 vPosition;\\n\"
            \"varying vec2 texCoords;\\n\"
            \"void main() {\\n\"
            \"  texCoords = 0.5 * (vPosition.xy + vec2(1.0, 1.0));\\n\"
            \"  gl_Position = vPosition;\\n\"
            \"}\\n\";

        static const char fragmentSource[] =
            \"precision mediump float;\\n\"
            \"uniform sampler2D texSampler;\\n\"
            \"varying vec2 texCoords;\\n\"
            \"void main() {\\n\"
            \"  gl_FragColor = texture2D(texSampler, texCoords);\\n\"
            \"}\\n\";

        GLuint program;
        {
            SCOPED_TRACE(\"Creating shader program\");
            ASSERT_NO_FATAL_FAILURE(GLTest::createProgram(
                    vertexSource, fragmentSource, &program));
        }

        GLint positionHandle = glGetAttribLocation(program, \"vPosition\");
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        ASSERT_NE(-1, positionHandle);

        GLint samplerHandle = glGetUniformLocation(program, \"texSampler\");
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        ASSERT_NE(-1, samplerHandle);

        static const GLfloat vertices[] = {
            -1.0f, 1.0f,
            -1.0f, -1.0f,
            1.0f, -1.0f,
            1.0f, 1.0f,
        };

        glVertexAttribPointer(positionHandle, 2, GL_FLOAT, GL_FALSE, 0, vertices);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        glEnableVertexAttribArray(positionHandle);
        ASSERT_EQ(GL_NO_ERROR, glGetError());

        glUseProgram(program);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        glUniform1i(samplerHandle, 0);
        ASSERT_EQ(GL_NO_ERROR, glGetError());

        GLuint textureHandle;
        glGenTextures(1, &textureHandle);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        glBindTexture(GL_TEXTURE_2D, textureHandle);
        ASSERT_EQ(GL_NO_ERROR, glGetError());

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
    };
"
	
	
	
	
      end

      operation 159362 "drawTexture"
	cpp_inline protected explicit_return_type "void"
	nparams 5
	  param in name "asSRGB" explicit_type "bool"
	  param in name "x" explicit_type "GLint"
	  param in name "y" explicit_type "GLint"
	  param in name "width" explicit_type "GLsizei"
	  param in name "height" explicit_type "GLsizei"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        ASSERT_NO_FATAL_FAILURE(fillTexture(asSRGB));
        glViewport(x, y, width, height);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
        glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
        ASSERT_EQ(GL_NO_ERROR, glGetError());
    };
"
	
	
	
	
      end

      operation 159490 "checkLockedBuffer"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "format" explicit_type "PixelFormat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ASSERT_EQ(mLockedBuffer.format, format);
        ASSERT_EQ(mLockedBuffer.width, DISPLAY_WIDTH);
        ASSERT_EQ(mLockedBuffer.height, DISPLAY_HEIGHT);
    };
"
	
	
	
	
      end

      operation 159618 "withinTolerance"
	class_operation cpp_inline protected explicit_return_type "bool"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        int diff = a - b;
        return diff >= 0 ? diff <= TOLERANCE : -diff <= TOLERANCE;
    };
"
	
	
	
	
      end

      attribute 152322 "mInputSurface"
	protected explicit_type "Surface"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Primary producer and consumer"
      end

      attribute 152450 "mCpuConsumer"
	protected explicit_type "CpuConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152578 "mLockedBuffer"
	protected explicit_type "CpuConsumer::LockedBuffer"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152706 "mEglDisplay"
	protected explicit_type "EGLDisplay"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152834 "mEglConfig"
	protected explicit_type "EGLConfig"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152962 "mEglContext"
	protected explicit_type "EGLContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 153090 "mEglSurface"
	protected explicit_type "EGLSurface"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 153218 "mComposerClient"
	protected explicit_type "SurfaceComposerClient"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Auxiliary display output"
      end

      attribute 153346 "mSurfaceControl"
	protected explicit_type "SurfaceControl"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 153474 "mOutputSurface"
	protected explicit_type "Surface"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 159746 "createEGLSurface"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "inputSurface" explicit_type "Surface"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mEglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_DISPLAY, mEglDisplay);

        EXPECT_TRUE(eglInitialize(mEglDisplay, NULL, NULL));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        static const EGLint configAttribs[] = {
            EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES3_BIT_KHR,
            EGL_RED_SIZE, 8,
            EGL_GREEN_SIZE, 8,
            EGL_BLUE_SIZE, 8,
            EGL_ALPHA_SIZE, 8,
            EGL_NONE };

        EGLint numConfigs = 0;
        EXPECT_TRUE(eglChooseConfig(mEglDisplay, configAttribs, &mEglConfig, 1,
                &numConfigs));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_GT(numConfigs, 0);

        static const EGLint contextAttribs[] = {
            EGL_CONTEXT_CLIENT_VERSION, 3,
            EGL_NONE } ;

        mEglContext = eglCreateContext(mEglDisplay, mEglConfig, EGL_NO_CONTEXT,
                contextAttribs);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mEglContext);

        mEglSurface = eglCreateWindowSurface(mEglDisplay, mEglConfig,
                inputSurface, NULL);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_SURFACE, mEglSurface);

        EXPECT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface,
                mEglContext));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
    };
"
	
	
	
	
      end

      operation 159874 "createDebugSurface"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (getenv(SHOW_DEBUG_STRING) == NULL) return;

        mComposerClient = new SurfaceComposerClient;
        ASSERT_EQ(NO_ERROR, mComposerClient->initCheck());

        mSurfaceControl = mComposerClient->createSurface(
                String8(\"SRGBTest Surface\"), DISPLAY_WIDTH, DISPLAY_HEIGHT,
                PIXEL_FORMAT_RGBA_8888);

        ASSERT_TRUE(mSurfaceControl != NULL);
        ASSERT_TRUE(mSurfaceControl->isValid());

        SurfaceComposerClient::openGlobalTransaction();
        ASSERT_EQ(NO_ERROR, mSurfaceControl->setLayer(0x7FFFFFFF));
        ASSERT_EQ(NO_ERROR, mSurfaceControl->show());
        SurfaceComposerClient::closeGlobalTransaction();

        ANativeWindow_Buffer outBuffer;
        ARect inOutDirtyBounds;
        mOutputSurface = mSurfaceControl->getSurface();
        mOutputSurface->lock(&outBuffer, &inOutDirtyBounds);
        uint8_t* bytePointer = reinterpret_cast<uint8_t*>(outBuffer.bits);
        for (int y = 0; y < outBuffer.height; ++y) {
            int rowOffset = y * outBuffer.stride; // pixels
            for (int x = 0; x < outBuffer.width; ++x) {
                int colOffset = (rowOffset + x) * PIXEL_SIZE; // bytes
                for (int c = 0; c < PIXEL_SIZE; ++c) {
                    int offset = colOffset + c;
                    bytePointer[offset] = ((c + 1) * 56) - 1;
                }
            }
        }
        mOutputSurface->unlockAndPost();
    };
"
	
	
	
	
      end

      operation 160002 "copyToDebugSurface"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (!mOutputSurface.get()) return;

        size_t bufferSize = mLockedBuffer.height * mLockedBuffer.stride *
                PIXEL_SIZE;

        ANativeWindow_Buffer outBuffer;
        ARect outBufferBounds;
        mOutputSurface->lock(&outBuffer, &outBufferBounds);
        ASSERT_EQ(mLockedBuffer.width, outBuffer.width);
        ASSERT_EQ(mLockedBuffer.height, outBuffer.height);
        ASSERT_EQ(mLockedBuffer.stride, outBuffer.stride);

        if (mLockedBuffer.format == outBuffer.format) {
            memcpy(outBuffer.bits, mLockedBuffer.data, bufferSize);
        } else {
            ASSERT_EQ(mLockedBuffer.format, PIXEL_FORMAT_sRGB_A_8888);
            ASSERT_EQ(outBuffer.format, PIXEL_FORMAT_RGBA_8888);
            uint8_t* outPointer = reinterpret_cast<uint8_t*>(outBuffer.bits);
            for (int y = 0; y < outBuffer.height; ++y) {
                int rowOffset = y * outBuffer.stride; // pixels
                for (int x = 0; x < outBuffer.width; ++x) {
                    int colOffset = (rowOffset + x) * PIXEL_SIZE; // bytes

                    // RGB are converted
                    for (int c = 0; c < (PIXEL_SIZE - 1); ++c) {
                        outPointer[colOffset + c] = srgbToLinear(
                                mLockedBuffer.data[colOffset + c]);
                    }

                    // Alpha isn't converted
                    outPointer[colOffset + 3] =
                            mLockedBuffer.data[colOffset + 3];
                }
            }
        }
        mOutputSurface->unlockAndPost();

        int sleepSeconds = atoi(getenv(SHOW_DEBUG_STRING));
        sleep(sleepSeconds);
    };
"
	
	
	
	
      end
    end

    class 143234 "StreamSplitterTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 139266 // <generalisation>
	relation 139266 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 139266 // <generalisation>
	  b parent class_ref 135170 // typedef3
      end

      operation 160130 "StreamSplitterTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"Begin test: %s.%s\", testInfo->test_case_name(),
                testInfo->name());
    };
"
	
	
	
	
      end

      operation 160258 "~StreamSplitterTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"End test:   %s.%s\", testInfo->test_case_name(),
                testInfo->name());
    };
"
	
	
	
	
      end
    end

    class 143362 "DummyListener"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 139394 // <generalisation>
	relation 139394 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 139394 // <generalisation>
	  b parent class_ref 134658 // typedef1
      end

      operation 160386 "onFrameAvailable"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 160514 "onBuffersReleased"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 160642 "onSidebandStreamChanged"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end
    end

    class 143490 "CountedAllocator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 139522 // <generalisation>
	relation 139522 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 139522 // <generalisation>
	  b parent class_ref 143618 // typedef21
      end

      operation 160770 "CountedAllocator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mAllocCount(0) {
        sp<ISurfaceComposer> composer(ComposerService::getComposerService());
        mAllocator = composer->createGraphicBufferAlloc();
    };
"
	
	
	
	
      end

      operation 160898 "~CountedAllocator"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 161026 "createGraphicBuffer"
	cpp_virtual cpp_inline public explicit_return_type "sp<GraphicBuffer>"
	nparams 5
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" explicit_type "PixelFormat"
	  param in name "usage" explicit_type "uint32_t"
	  param inout name "error" explicit_type "status_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        ++mAllocCount;
        sp<GraphicBuffer> buffer = mAllocator->createGraphicBuffer(w, h, format,
                usage, error);
        return buffer;
    };
"
	
	
	
	
      end

      operation 161154 "getAllocCount"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mAllocCount; };
"
	
	
	
	
      end

      attribute 153602 "mAllocator"
	private explicit_type "IGraphicBufferAlloc"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 153730 "mAllocCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 143618 "typedef21"
      visibility package stereotype "typedef" explicit_base_type "BnGraphicBufferAlloc"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 143746 "SurfaceTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 139650 // <generalisation>
	relation 139650 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 139650 // <generalisation>
	  b parent class_ref 135170 // typedef3
      end

      operation 161282 "SurfaceTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
        ProcessState::self()->startThreadPool();
    };
"
	
	
	
	
      end

      operation 161410 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mComposerClient = new SurfaceComposerClient;
        ASSERT_EQ(NO_ERROR, mComposerClient->initCheck());

        mSurfaceControl = mComposerClient->createSurface(
                String8(\"Test Surface\"), 32, 32, PIXEL_FORMAT_RGBA_8888, 0);

        ASSERT_TRUE(mSurfaceControl != NULL);
        ASSERT_TRUE(mSurfaceControl->isValid());

        SurfaceComposerClient::openGlobalTransaction();
        ASSERT_EQ(NO_ERROR, mSurfaceControl->setLayer(0x7fffffff));
        ASSERT_EQ(NO_ERROR, mSurfaceControl->show());
        SurfaceComposerClient::closeGlobalTransaction();

        mSurface = mSurfaceControl->getSurface();
        ASSERT_TRUE(mSurface != NULL);
    };
"
	
	
	
	
      end

      operation 161538 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mComposerClient->dispose();
    };
"
	
	
	
	
      end

      attribute 153858 "mSurface"
	protected explicit_type "Surface"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 153986 "mComposerClient"
	protected explicit_type "SurfaceComposerClient"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154114 "mSurfaceControl"
	protected explicit_type "SurfaceControl"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 143874 "SurfaceTextureClientTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 139778 // <generalisation>
	relation 139778 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 139778 // <generalisation>
	  b parent class_ref 135170 // typedef3
      end

      operation 161666 "SurfaceTextureClientTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mEglDisplay(EGL_NO_DISPLAY),
            mEglSurface(EGL_NO_SURFACE),
            mEglContext(EGL_NO_CONTEXT) {
    };
"
	
	
	
	
      end

      operation 161794 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"Begin test: %s.%s\", testInfo->test_case_name(),
                testInfo->name());

        sp<IGraphicBufferProducer> producer;
        sp<IGraphicBufferConsumer> consumer;
        BufferQueue::createBufferQueue(&producer, &consumer);
        mST = new GLConsumer(consumer, 123, GLConsumer::TEXTURE_EXTERNAL, true,
                false);
        mSTC = new Surface(producer);
        mANW = mSTC;

        // We need a valid GL context so we can test updateTexImage()
        // This initializes EGL and create a dummy GL context with a
        // pbuffer render target.
        mEglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_DISPLAY, mEglDisplay);

        EGLint majorVersion, minorVersion;
        EXPECT_TRUE(eglInitialize(mEglDisplay, &majorVersion, &minorVersion));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        EGLConfig myConfig;
        EGLint numConfigs = 0;
        EXPECT_TRUE(eglChooseConfig(mEglDisplay, getConfigAttribs(),
                &myConfig, 1, &numConfigs));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        mEglConfig = myConfig;
        EGLint pbufferAttribs[] = {
            EGL_WIDTH, 16,
            EGL_HEIGHT, 16,
            EGL_NONE };
        mEglSurface = eglCreatePbufferSurface(mEglDisplay, myConfig, pbufferAttribs);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_SURFACE, mEglSurface);

        mEglContext = eglCreateContext(mEglDisplay, myConfig, EGL_NO_CONTEXT, 0);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mEglContext);

        EXPECT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
    };
"
	
	
	
	
      end

      operation 161922 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mST.clear();
        mSTC.clear();
        mANW.clear();

        eglMakeCurrent(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
        eglDestroyContext(mEglDisplay, mEglContext);
        eglDestroySurface(mEglDisplay, mEglSurface);
        eglTerminate(mEglDisplay);

        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"End test:   %s.%s\", testInfo->test_case_name(),
                testInfo->name());
    };
"
	
	
	
	
      end

      operation 162050 "getConfigAttribs"
	cpp_virtual cpp_inline protected explicit_return_type "EGLint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static EGLint sDefaultConfigAttribs[] = {
            EGL_SURFACE_TYPE, EGL_PBUFFER_BIT | EGL_WINDOW_BIT,
            EGL_NONE
        };

        return sDefaultConfigAttribs;
    };
"
	
	
	
	
      end

      attribute 154242 "mST"
	protected explicit_type "GLConsumer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154370 "mSTC"
	protected explicit_type "Surface"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154498 "mANW"
	protected explicit_type "ANativeWindow"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154626 "mEglDisplay"
	protected explicit_type "EGLDisplay"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154754 "mEglSurface"
	protected explicit_type "EGLSurface"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154882 "mEglContext"
	protected explicit_type "EGLContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 155010 "mEglConfig"
	protected explicit_type "EGLConfig"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 144002 "MultiSurfaceTextureClientTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 139906 // <generalisation>
	relation 139906 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 139906 // <generalisation>
	  b parent class_ref 135170 // typedef3
      end

      operation 162178 "MultiSurfaceTextureClientTest"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mEglDisplay(EGL_NO_DISPLAY),
            mEglContext(EGL_NO_CONTEXT) {
        for (int i = 0; i < NUM_SURFACE_TEXTURES; i++) {
            mEglSurfaces[i] = EGL_NO_CONTEXT;
        }
    };
"
	
	
	
	
      end

      class 144130 "anonymous16"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 155138 "NUM_SURFACE_TEXTURES"
	  public type class_ref 144130 // anonymous16
	  init_value " 32 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 162306 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mEglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_DISPLAY, mEglDisplay);

        EGLint majorVersion, minorVersion;
        EXPECT_TRUE(eglInitialize(mEglDisplay, &majorVersion, &minorVersion));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        EGLConfig myConfig;
        EGLint numConfigs = 0;
        EGLint configAttribs[] = {
            EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
            EGL_NONE
        };
        EXPECT_TRUE(eglChooseConfig(mEglDisplay, configAttribs, &myConfig, 1,
                &numConfigs));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        mEglContext = eglCreateContext(mEglDisplay, myConfig, EGL_NO_CONTEXT,
                0);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mEglContext);

        for (int i = 0; i < NUM_SURFACE_TEXTURES; i++) {
            sp<IGraphicBufferProducer> producer;
            sp<IGraphicBufferConsumer> consumer;
            BufferQueue::createBufferQueue(&producer, &consumer);
            sp<GLConsumer> st(new GLConsumer(consumer, i,
                    GLConsumer::TEXTURE_EXTERNAL, true, false));
            sp<Surface> stc(new Surface(producer));
            mEglSurfaces[i] = eglCreateWindowSurface(mEglDisplay, myConfig,
                    static_cast<ANativeWindow*>(stc.get()), NULL);
            ASSERT_EQ(EGL_SUCCESS, eglGetError());
            ASSERT_NE(EGL_NO_SURFACE, mEglSurfaces[i]);
        }
    };
"
	
	
	
	
      end

      operation 162434 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        eglMakeCurrent(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE,
                EGL_NO_CONTEXT);

        for (int i = 0; i < NUM_SURFACE_TEXTURES; i++) {
            if (mEglSurfaces[i] != EGL_NO_SURFACE) {
                eglDestroySurface(mEglDisplay, mEglSurfaces[i]);
            }
        }

        if (mEglContext != EGL_NO_CONTEXT) {
            eglDestroyContext(mEglDisplay, mEglContext);
        }

        if (mEglDisplay != EGL_NO_DISPLAY) {
            eglTerminate(mEglDisplay);
        }
    };
"
	
	
	
	
      end

      attribute 155266 "mEglDisplay"
	protected explicit_type "EGLDisplay"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 155394 "mEglSurfaces"
	protected explicit_type "EGLSurface"
	multiplicity "[NUM_SURFACE_TEXTURES]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 155522 "mEglContext"
	protected explicit_type "EGLContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 134530 "tests"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 134530 "DisconnectWaiter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 134658 // typedef1
	class_ref 134530 // DisconnectWaiter
      end
    end

    artifact 134658 "FrameWaiter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 134914 // typedef2
	class_ref 134786 // FrameWaiter
      end
    end

    artifact 134786 "GLTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 135170 // typedef3
	class_ref 135042 // GLTest
      end
    end

    artifact 134914 "SurfaceTextureFBO"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 135298 // SurfaceTextureFBOTest
      end
    end

    artifact 135042 "SurfaceTextureGL"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 135426 // SurfaceTextureGLTest
      end
    end

    artifact 135170 "SurfaceTextureGLThreadToGL"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 135810 // SurfaceTextureGLThreadToGLTest
      end
    end

    artifact 135298 "SurfaceTextureGLToGL"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 135938 // SurfaceTextureGLToGLTest
      end
    end

    artifact 135426 "SurfaceTextureMultiContextGL"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 136578 // SurfaceTextureMultiContextGLTest
      end
    end

    artifact 135554 "TextureRenderer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 136962 // typedef6
	class_ref 135682 // TextureRenderer
      end
    end

    artifact 135810 "typedef7"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137346 // typedef7
      end
    end

    artifact 135938 "BpConsumerListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137218 // BpConsumerListener
      end
    end

    artifact 136194 "typedef8"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137730 // typedef8
      end
    end

    artifact 136322 "BpDisplayEventConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137602 // BpDisplayEventConnection
      end
    end

    artifact 136578 "typedef9"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138114 // typedef9
      end
    end

    artifact 136706 "BpGraphicBufferAlloc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137986 // BpGraphicBufferAlloc
      end
    end

    artifact 136962 "typedef10"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138498 // typedef10
      end
    end

    artifact 137090 "BpGraphicBufferConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138370 // BpGraphicBufferConsumer
      end
    end

    artifact 137346 "typedef11"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138882 // typedef11
      end
    end

    artifact 137474 "BpGraphicBufferProducer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138754 // BpGraphicBufferProducer
      end
    end

    artifact 137730 "typedef12"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139266 // typedef12
      end
    end

    artifact 137858 "BpProducerListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139138 // BpProducerListener
      end
    end

    artifact 138114 "typedef13"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139650 // typedef13
      end
    end

    artifact 138242 "BpSensorEventConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139522 // BpSensorEventConnection
      end
    end

    artifact 138498 "typedef14"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140034 // typedef14
      end
    end

    artifact 138626 "BpSensorServer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139906 // BpSensorServer
      end
    end

    artifact 138754 "typedef15"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140290 // typedef15
      end
    end

    artifact 138882 "BpSurfaceComposer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140162 // BpSurfaceComposer
      end
    end

    artifact 139138 "typedef16"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140674 // typedef16
      end
    end

    artifact 139266 "BpSurfaceComposerClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140546 // BpSurfaceComposerClient
      end
    end

    artifact 139394 "typedef17"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140930 // typedef17
      end
    end

    artifact 139522 "Composer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 140802 // Composer
      end
    end

    artifact 139650 "BufferQueueTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 141058 // BufferQueueTest
      end
    end

    artifact 139778 "DummyConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 141186 // DummyConsumer
      end
    end

    artifact 139906 "CpuConsumerTestParams"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 141314 // CpuConsumerTestParams
      end
    end

    artifact 140034 "typedef18"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 141570 // typedef18
      end
    end

    artifact 140162 "CpuConsumerTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 141442 // CpuConsumerTest
      end
    end

    artifact 140418 "IGraphicBufferProducerTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 142338 // IGraphicBufferProducerTest
      end
    end

    artifact 140546 "MultiTextureConsumerTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 142722 // MultiTextureConsumerTest
      end
    end

    artifact 140674 "SRGBTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 142978 // SRGBTest
      end
    end

    artifact 140802 "StreamSplitterTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 143234 // StreamSplitterTest
      end
    end

    artifact 140930 "DummyListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 143362 // DummyListener
      end
    end

    artifact 141058 "typedef21"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 143618 // typedef21
      end
    end

    artifact 141186 "CountedAllocator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 143490 // CountedAllocator
      end
    end

    artifact 141314 "SurfaceTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 143746 // SurfaceTest
      end
    end

    artifact 141442 "SurfaceTextureClientTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 143874 // SurfaceTextureClientTest
      end
    end

    artifact 141570 "MultiSurfaceTextureClientTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 144002 // MultiSurfaceTextureClientTest
      end
    end
  end

  package_ref 134786 // tests
end
